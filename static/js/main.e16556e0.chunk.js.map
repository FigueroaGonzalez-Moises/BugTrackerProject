{"version":3,"sources":["components/manage/roles/Roles.tsx","components/manage/roles/RoleMethods.ts","components/tickets/Tickets.tsx","components/tickets/TicketHistory.tsx","components/tickets/edit-ticket/EditTicket.tsx","components/project/useGetProjects.tsx","components/GetLocation.ts","accessToken.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/Sidenav.tsx","components/PageLoader.tsx","components/MobileSideNav.tsx","components/UI.tsx","clientSideAuth/checkAuth.js","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabs.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/Dashboard.tsx","components/manage/projects/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/project/useGetProjectTickets.tsx","components/project/useGetProjectUsers.ts","components/project/ProjectDetails.tsx","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAss.tsx","components/project/edit-project/EditPTTable.tsx","components/project/EditProject.tsx","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","routes/pmRoute.tsx","components/Notifications.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","setNavActives.ts","components/Sorting.ts","generated/graphql.tsx","components/tickets/useGetUsers.tsx","css/JsStyling.ts","img/unnamed.webp","components/tickets/TicketComments.tsx"],"names":["ManageRoles","useGetUsersQuery","data","loading","RoleMethods","deleteUser","pagination","setRole","Sorting","usernameSort","emailSort","roleSort","firstnameSort","lastnameSort","useState","paginationLower","paginationUpper","rows","roleSwitch","emailSwitch","usernameSwitch","fnameSwitch","lnameSwitch","state","setState","user","useSelector","id","email","role","username","firstname","lastname","pages","useEffect","elems","document","querySelectorAll","M","Sidenav","init","setNavActives","className","eval","getUsers","length","pagesArr","i","push","onClick","map","_val","key","onChange","e","value","disabled","selected","name","type","target","match","toast","html","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","useAddNotificationMutation","sendNotification","a","userid","variables","window","location","reload","els","getElementsByClassName","el","classList","remove","getElementById","add","message","userId","Tickets","useGetUserTicketsQuery","sortByTitle","sortTicketsByPriority","sortTicketsByStatus","sortTicketsByType","arr","toggle","toggle2","titleSwitch","getUserTickets","title","priority","status","href","ticketid","TicketHistory","parentid","GetLocation","useGetHistoryQuery","getHistory","propertyChanged","oldValue","newValue","dateChanged","EditTicket","history","useHistory","useGetTicketDataByIdQuery","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","setTitle","useSetTicketDescMutation","setDesc","useSetTicketPriorityMutation","setPriority","useSetTicketProjectMutation","SetTicketProject","useDeleteTicketMutation","DeleteThisTicket","useAddTicketHistoryMutation","addHistory","useSetTicketDeveloperMutation","setDeveloper","useSendNotificationByUsernameMutation","description","projectid","parentTitle","assignedTo","new","developer","Projects","useGetProjects","Users","useGetUsers","Dropdown","Modal","JsFooterStyling","onresize","getTicketDataById","to","updateTicket","updated","updated2","desc","submitter","belongsto","deleteTicket","replace","htmlFor","data-error","data-target","goBack","useGetProjectDataQuery","getProjectData","useLocation","pathname","tmp","split","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","useLoginMutation","login","useDemoLoginMutation","demoLogin","URI","submitForm","preventDefault","console","log","response2","localStorage","setItem","refreshToken","err","fetch","method","credentials","then","res","demoUser","response","Register","setUsername","setFirstname","setLastname","useRegisterMutation","register","N","src","UserImage","alt","PageLoader","MobileSideNav","useLogoutMutation","LOGOUT","client","useGetUserNotificationsQuery","logout","resetStore","close","unread","getUserNotifications","forEach","read","UI","children","Tooltip","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","AdminRoute","error","changeIndicatorC","color","t","changeIndicatorT","subt","subt2","DashboardTabs","LStitle","getItem","LSdata","JSON","parse","chart","chartData","userTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","val","labels","datasets","label","backgroundColor","borderWidth","stringify","myTicketsByP","h","m","l","myTicketsByS","o","c","TicketsByP","TicketsByS","TicketsByT","Dashboard","LSname","LSchart","Cards","setChart","AutoInit","FloatingActionButton","hoverEnabled","position","setChartType","data-postion","data-tooltip","style","backgroundImage","temp","t1","concat","AddCard","options","responsive","ManageProjects","projectId","DetailsSubCom","useGetProjectDataByIdQuery","keyprop","getProjectDataById","useGetUserProjectsQuery","getUserProjects","useGetProjectTickets","useGetProjectTicketsQuery","getProjectTickets","useGetProjectUsers","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","sortBySubmitter","sortByDeveloper","submitterSwitch","developerSwitch","AssignedUsers","TicketDetails","ticket","TicketComments","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","PROJECT_ID","assigned","FormSelect","modPersonnel","EditAss","EditPTTable","EditProject","pTitle","pDesc","useSetProjectDescMutation","useSetProjectTitleMutation","useDeleteProjectMutation","delProj","updateProject","deleteProject","AddTicketToProject","UsersArray","useCreateTicketMutation","Submit","useSendNot_CreateTicketMutation","SendNotification","dev","addHide","elms","toggleHide","handleSubmit","belongsTo","setTicketType","setTicketStatus","setTicketPriority","SetTicketDev","CreateProject","useAddProjectMutation","SUBMIT","userids","usernames","userString","tmp2","indexOf","shift","q","slice","q2","tmp3","PmRoute","Notifications","useSetReadMutation","SET_READ","useDeleteNotificationMutation","DELETE_NOTIFICATION","current","includes","ids","notificationId","Routes","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","headers","json","initState","project","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","rmvActives","addActives","loc","titles","toLowerCase","sort","j","reverse","pop","submitters","developers","prioritySwitch","emails","names","AddCommentDocument","gql","useAddCommentMutation","baseOptions","ApolloReactHooks","AddNotificationDocument","AddProjectDocument","AddProjectUserDocument","AddTicketHistoryDocument","CreateTicketDocument","DeleteCommentDocument","useDeleteCommentMutation","DeleteNotificationDocument","DeleteProjectDocument","DeleteTicketDocument","DeleteUserDocument","DemoLoginDocument","GetCommentsDocument","useGetCommentsQuery","GetHistoryDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTicketDataByIdDocument","GetTicketsDocument","GetUserDocument","GetUserNotificationsDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","LogoutDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SendNot_CreateCommentDocument","useSendNot_CreateCommentMutation","SendNot_CreateTicketDocument","SendNotificationByUsernameDocument","SetProjectDescDocument","SetProjectTitleDocument","SetReadDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateCommentDocument","useUpdateCommentMutation","UpdateRoleDocument","GetUsersDocument","undefined","innerWidth","module","exports","ADD_COMMENT","DELETE_COMMENT","UPDATE_COMMENT","SEND_NOTIFICATION","comment","setComment","addComment","setTimeout","deleteComment","commentid","updateComment","updatedMessage","comments","getComments","commenter","createdAt"],"mappings":"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","file":"static/js/main.e16556e0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery } from \"../../../generated/graphql\";\r\nimport { RoleMethods } from \"./RoleMethods\";\r\nimport { Sorting } from \"../../Sorting\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../../setNavActives\";\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const { deleteUser, pagination, setRole } = RoleMethods();\r\n    const {\r\n        usernameSort,\r\n        emailSort,\r\n        roleSort,\r\n        firstnameSort,\r\n        lastnameSort,\r\n    } = Sorting();\r\n\r\n    const [state, setState] = useState({\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: \"2\",\r\n        roleSwitch: \"0\",\r\n        emailSwitch: \"0\",\r\n        usernameSwitch: \"0\",\r\n        fnameSwitch: \"0\",\r\n        lnameSwitch: \"0\",\r\n    });\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let pages;\r\n    if (state.rows !== \"\") {\r\n        // eslint-disable-next-line\r\n        pages = eval(`(${data.getUsers!.length}/${state.rows}) - 1`);\r\n    }\r\n\r\n    let pagesArr = [] as number[];\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper table-mb\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Manage Roles</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    UserName\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let usernameSwitch: string =\r\n                                                usernameSort(\r\n                                                    data.getUsers,\r\n                                                    state.usernameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({\r\n                                                ...state,\r\n                                                usernameSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Email\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let emailSwitch: string =\r\n                                                emailSort(\r\n                                                    data.getUsers,\r\n                                                    state.emailSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, emailSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Role\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let roleSwitch: string =\r\n                                                roleSort(\r\n                                                    data.getUsers,\r\n                                                    state.roleSwitch\r\n                                                ) || \"0\";\r\n                                            setState({\r\n                                                ...state,\r\n                                                roleSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    First Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let fnameSwitch: string =\r\n                                                firstnameSort(\r\n                                                    data.getUsers,\r\n                                                    state.fnameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, fnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Last Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let lnameSwitch: string =\r\n                                                lastnameSort(\r\n                                                    data.getUsers,\r\n                                                    state.lnameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, lnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUsers!.map ? (\r\n                                data!.getUsers!.map((_val, i: number) => {\r\n                                    if (state.rows === \"\") {\r\n                                        return null;\r\n                                    } else if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {!!data.getUsers![i]\r\n                                                        .username\r\n                                                        ? data.getUsers![i]\r\n                                                              .username\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {!!data!.getUsers![i].email\r\n                                                        ? data!.getUsers![i]\r\n                                                              .email\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <div className=\"input-field col s12\">\r\n                                                        <select\r\n                                                            className=\"browser-default capitalize\"\r\n                                                            onChange={e =>\r\n                                                                setRole(\r\n                                                                    e,\r\n                                                                    i,\r\n                                                                    data\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <option\r\n                                                                value=\"\"\r\n                                                                className=\"capitalize\"\r\n                                                                disabled\r\n                                                                selected\r\n                                                            >\r\n                                                                {\r\n                                                                    data!\r\n                                                                        .getUsers![\r\n                                                                        i\r\n                                                                    ].role\r\n                                                                }\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`admin`}\r\n                                                            >\r\n                                                                Admin\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`developer`}\r\n                                                            >\r\n                                                                Developer\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`project-manager`}\r\n                                                            >\r\n                                                                Project-manager\r\n                                                            </option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data!.getUsers![i]\r\n                                                            .firstname\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data!.getUsers![i]\r\n                                                            .lastname\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <button\r\n                                                        name={`${\r\n                                                            data!.getUsers![i]\r\n                                                                .id\r\n                                                        }`}\r\n                                                        onClick={e => {\r\n                                                            deleteUser(e);\r\n                                                        }}\r\n                                                        className=\"btn red\"\r\n                                                    >\r\n                                                        Delete\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return null;\r\n                                    }\r\n                                })\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Page Limit:\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"text\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            let tmp = e.target.value.match(/\\D/g) || [];\r\n                            if (tmp.length !== 0) {\r\n                                M.toast({\r\n                                    html: \"Only numbers are accepted\",\r\n                                });\r\n                            } else if (e.target.value === \"0\") {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"Only numbers greater than 0 are accepted\",\r\n                                });\r\n                            } else {\r\n                                setState({\r\n                                    ...state,\r\n                                    rows: e.target.value,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`1li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map((_val, i) => {\r\n                            return (\r\n                                <li key={i + 2} id={`${i + 2}li`}>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        id={`${i + 2}`}\r\n                                        onClick={e => {\r\n                                            let id: string = pagination(e);\r\n                                            setState({\r\n                                                ...state,\r\n                                                // eslint-disable-next-line\r\n                                                paginationLower: eval(\r\n                                                    `${id} - 1`\r\n                                                ),\r\n                                                paginationUpper: id,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        {i + 2}\r\n                                    </a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    useAddNotificationMutation,\r\n    useDeleteUserMutation,\r\n    useUpdateRoleMutation,\r\n} from \"../../../generated/graphql\";\r\n\r\nexport const RoleMethods = () => {\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n    const [sendNotification] = useAddNotificationMutation();\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let userid = target.name;\r\n        let tmp = await DELETEUSER({\r\n            variables: {\r\n                userid,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: \"Error occurred while deleting user\" });\r\n        }\r\n    };\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: number, data: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n        if (!id || !role) {\r\n        } else {\r\n            await updateRole({\r\n                variables: {\r\n                    role,\r\n                    id,\r\n                },\r\n            });\r\n\r\n            await sendNotification({\r\n                variables: {\r\n                    message: `Your role has been changed from ${data.getUsers[i].role} to ${role}`,\r\n                    userId: id,\r\n                },\r\n            });\r\n\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return {\r\n        deleteUser,\r\n        pagination,\r\n        setRole,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    const {\r\n        pagination,\r\n        sortByTitle,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n    } = Sorting();\r\n\r\n    const [state, setState] = useState({\r\n        arr: [] as any,\r\n        toggle: \"0\",\r\n        toggle2: \"0\",\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: \"4\",\r\n        titleSwitch: \"0\",\r\n    });\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let pages;\r\n    if (state.rows !== \"\") {\r\n        // eslint-disable-next-line\r\n        pages = eval(`(${data.getUserTickets.length}/${state.rows}) - 1`);\r\n    }\r\n    let pagesArr = [] as number[];\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Tickets</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Project Title\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let titleSwitch = sortByTitle(\r\n                                                data.getUserTickets,\r\n                                                state.titleSwitch\r\n                                            );\r\n                                            setState({ ...state, titleSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Priority\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle2: string =\r\n                                                sortTicketsByPriority(\r\n                                                    data.getUserTickets,\r\n                                                    state.toggle2\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle2 });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Ticket Status\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle: string =\r\n                                                sortTicketsByStatus(\r\n                                                    data.getUserTickets,\r\n                                                    state.toggle\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Type\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let arr: any = sortTicketsByType(\r\n                                                data.getUserTickets\r\n                                            );\r\n                                            setState({ ...state, arr });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getUserTickets.map ? (\r\n                                data.getUserTickets.map((_val, i) => {\r\n                                    if (state.rows === \"\") {\r\n                                        return null;\r\n                                    } else if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .title\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .priority\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .status\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .type\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"noselect capitalize\">\r\n                                                    <a\r\n                                                        href={`#/ticket-details:${data.getUserTickets[i].ticketid}`}\r\n                                                    >\r\n                                                        Details\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return null;\r\n                                    }\r\n                                })\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Page Limit:\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"text\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            let tmp = e.target.value.match(/\\D/g) || [];\r\n                            if (tmp.length !== 0) {\r\n                                M.toast({\r\n                                    html: \"Only numbers are accepted\",\r\n                                });\r\n                            } else if (e.target.value === \"0\") {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"Only numbers greater than 0 are accepted\",\r\n                                });\r\n                            } else {\r\n                                setState({\r\n                                    ...state,\r\n                                    rows: e.target.value,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`${1}li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map((_val, i) => {\r\n                            return (\r\n                                <li key={i + 2} id={`${i + 2}li`}>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        id={`${i + 2}`}\r\n                                        onClick={e => {\r\n                                            let id: string = pagination(e);\r\n                                            setState({\r\n                                                ...state,\r\n                                                // eslint-disable-next-line\r\n                                                paginationLower: eval(\r\n                                                    `${id} - 1`\r\n                                                ),\r\n                                                paginationUpper: id,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        {i + 2}\r\n                                    </a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetHistoryQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst TicketHistory = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n    const { data, loading } = useGetHistoryQuery({ variables: { parentid } });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper table-mb\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            History for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Property</th>\r\n                                    <th>Old Value</th>\r\n                                    <th>New Value</th>\r\n                                    <th className=\"nonessen\">Date Changed</th>\r\n                                </tr>\r\n\r\n                                {!data || !data.getHistory.map ? (\r\n                                    <tr></tr>\r\n                                ) : (\r\n                                    data.getHistory.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .propertyChanged\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .oldValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .newValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize nonessen\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .dateChanged\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketHistory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetTicketDataByIdQuery,\r\n    useSetTicketStatusMutation,\r\n    useSetTicketTypeMutation,\r\n    useSetTicketTitleMutation,\r\n    useSetTicketDescMutation,\r\n    useSetTicketPriorityMutation,\r\n    useDeleteTicketMutation,\r\n    useAddTicketHistoryMutation,\r\n    useSetTicketProjectMutation,\r\n    useSetTicketDeveloperMutation,\r\n    useSendNotificationByUsernameMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport M from \"materialize-css\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from \"../../../css/JsStyling\";\r\nimport { useGetProjects } from \"../../project/useGetProjects\";\r\nimport { useGetUsers } from \"../useGetUsers\";\r\n\r\nexport const EditTicket: React.FC = () => {\r\n    const history: any = useHistory();\r\n    let ticketid = GetLocation();\r\n    // eslint-disable-next-line\r\n    var parentid = eval(ticketid);\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${ticketid}` },\r\n    });\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const [setStatus] = useSetTicketStatusMutation();\r\n    const [setType] = useSetTicketTypeMutation();\r\n    const [setTitle] = useSetTicketTitleMutation();\r\n    const [setDesc] = useSetTicketDescMutation();\r\n    const [setPriority] = useSetTicketPriorityMutation();\r\n    const [SetTicketProject] = useSetTicketProjectMutation();\r\n    const [DeleteThisTicket] = useDeleteTicketMutation();\r\n    const [addHistory] = useAddTicketHistoryMutation();\r\n    const [setDeveloper] = useSetTicketDeveloperMutation();\r\n    const [sendNotification] = useSendNotificationByUsernameMutation();\r\n\r\n    const [state, setState] = useState({\r\n        status: \"\",\r\n        type: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"\",\r\n        projectid: \"\",\r\n        parentTitle: \"\",\r\n        assignedTo: \"\",\r\n        new: false,\r\n        developer: \"\",\r\n    });\r\n\r\n    let Projects = useGetProjects();\r\n    let Users = useGetUsers();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    if (loading || !data || !Projects || !Users) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (data.getTicketDataById.length === 0) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    const updateTicket = async () => {\r\n        let updated = false;\r\n        let updated2 = true;\r\n        try {\r\n            if (state.title !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].title!;\r\n                setState({ ...state, new: true });\r\n                if (state.title !== \"\") {\r\n                    await setTitle({\r\n                        variables: {\r\n                            ticketid: `${ticketid}`,\r\n                            title: `${state.title}`,\r\n                        },\r\n                    });\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketTitle\",\r\n                            newValue: state.title,\r\n                            oldValue,\r\n                            parentid,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n            }\r\n\r\n            if (state.description !== \"\") {\r\n                await setDesc({\r\n                    variables: {\r\n                        ticketid: `${ticketid}`,\r\n                        desc: `${state.description}`,\r\n                    },\r\n                });\r\n                let oldValue: string = data.getTicketDataById[0].description!;\r\n                addHistory({\r\n                    variables: {\r\n                        propertyChanged: \"TicketDescription\",\r\n                        newValue: state.description,\r\n                        oldValue,\r\n                        parentid,\r\n                    },\r\n                });\r\n\r\n                updated = true;\r\n            }\r\n\r\n            if (state.status !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].status!;\r\n                await setStatus({\r\n                    variables: {\r\n                        ticketid: `${ticketid}`,\r\n                        status: `${state.status}`,\r\n                    },\r\n                });\r\n                await addHistory({\r\n                    variables: {\r\n                        propertyChanged: \"TicketStatus\",\r\n                        oldValue,\r\n                        parentid,\r\n                        newValue: state.status,\r\n                    },\r\n                });\r\n\r\n                if (state.status === \"closed\") {\r\n                    await sendNotification({\r\n                        variables: {\r\n                            message: `Your Ticket#${ticketid} has been closed *T${ticketid}`,\r\n                            username: data.getTicketDataById[0].submitter,\r\n                        },\r\n                    });\r\n                    updated2 = false;\r\n                } else {\r\n                    updated = true;\r\n                }\r\n            }\r\n\r\n            if (state.priority !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].priority!;\r\n                await setPriority({\r\n                    variables: {\r\n                        ticketid: `${ticketid}`,\r\n                        priority: `${state.priority}`,\r\n                    },\r\n                });\r\n\r\n                addHistory({\r\n                    variables: {\r\n                        propertyChanged: \"TicketPriority\",\r\n                        oldValue,\r\n                        parentid,\r\n                        newValue: state.priority,\r\n                    },\r\n                });\r\n\r\n                updated = true;\r\n            }\r\n\r\n            if (state.type !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].type!;\r\n                await setType({\r\n                    variables: {\r\n                        ticketid: `${ticketid}`,\r\n                        type: `${state.type}`,\r\n                    },\r\n                });\r\n                addHistory({\r\n                    variables: {\r\n                        propertyChanged: \"TicketType\",\r\n                        oldValue,\r\n                        parentid,\r\n                        newValue: state.type,\r\n                    },\r\n                });\r\n\r\n                updated = true;\r\n            }\r\n\r\n            if (state.projectid !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].belongsto;\r\n                await SetTicketProject({\r\n                    variables: {\r\n                        ticketid,\r\n                        projectid: state.projectid,\r\n                    },\r\n                });\r\n\r\n                addHistory({\r\n                    variables: {\r\n                        propertyChanged: \"ParentOfTicket\",\r\n                        oldValue: `ProjectId: ${oldValue}`,\r\n                        parentid,\r\n                        newValue: `ProjectId: ${state.projectid}`,\r\n                    },\r\n                });\r\n\r\n                updated = true;\r\n            }\r\n\r\n            if (state.developer !== \"\") {\r\n                let oldValue: string = data.getTicketDataById[0].developer;\r\n                if (user.role === \"admin\" || user.role === \"project-manager\") {\r\n                    await setDeveloper({\r\n                        variables: {\r\n                            ticketid,\r\n                            developer: state.developer,\r\n                        },\r\n                    });\r\n\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"AssignedDeveloper\",\r\n                            oldValue,\r\n                            parentid,\r\n                            newValue: state.developer,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n            }\r\n\r\n            if (updated && updated2) {\r\n                await sendNotification({\r\n                    variables: {\r\n                        message: `Your Ticket#${ticketid} has been updated *T${ticketid}`,\r\n                        username: data.getTicketDataById[0].submitter,\r\n                    },\r\n                });\r\n            }\r\n\r\n            window.location.reload();\r\n        } catch (err) {\r\n            M.toast({ html: \"Could not update Ticket\" });\r\n            M.toast({ html: `Error : ${err}` });\r\n        }\r\n    };\r\n\r\n    const deleteTicket = async () => {\r\n        await DeleteThisTicket({\r\n            variables: {\r\n                ticketid: `${ticketid}`,\r\n            },\r\n        });\r\n        window.location.replace(\"#/dashboard\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">\r\n                        Edit Ticket #{ticketid}\r\n                    </h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            {state.new ? (\r\n                                                <span>{state.title}</span>\r\n                                            ) : (\r\n                                                data.getTicketDataById[0]\r\n                                                    .title || (\r\n                                                    <span>No Title</span>\r\n                                                )\r\n                                            )}\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                {state.new ? (\r\n                                                    <span>\r\n                                                        {state.description}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    data.getTicketDataById[0]\r\n                                                        .description || (\r\n                                                        <span>\r\n                                                            No description\r\n                                                        </span>\r\n                                                    )\r\n                                                )}\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {user.role === \"admin\" ||\r\n                                    user.role === \"project-manager\" ? (\r\n                                        <span>\r\n                                            <a\r\n                                                className=\"dropdown-trigger btn manage-dropdown\"\r\n                                                href=\"#!\"\r\n                                                data-target=\"dropdowndev\"\r\n                                            >\r\n                                                {state.developer !== \"\" ? (\r\n                                                    <span>\r\n                                                        {state.developer}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    (\r\n                                                        <span>\r\n                                                            {\r\n                                                                data\r\n                                                                    .getTicketDataById[0]\r\n                                                                    .developer\r\n                                                            }\r\n                                                        </span>\r\n                                                    ) || <span>No Status</span>\r\n                                                )}\r\n                                            </a>\r\n                                            <ul\r\n                                                id=\"dropdowndev\"\r\n                                                className=\"dropdown-content\"\r\n                                            >\r\n                                                {Users!.map((_val, i) => {\r\n                                                    return (\r\n                                                        <li key={i}>\r\n                                                            <button\r\n                                                                className=\"btnDropdown\"\r\n                                                                name={`${\r\n                                                                    Users![i]\r\n                                                                        .username\r\n                                                                }`}\r\n                                                                onClick={e =>\r\n                                                                    setState({\r\n                                                                        ...state,\r\n                                                                        developer: Users![\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .username,\r\n                                                                    })\r\n                                                                }\r\n                                                            >\r\n                                                                {\r\n                                                                    Users![i]\r\n                                                                        .username\r\n                                                                }\r\n                                                            </button>\r\n                                                        </li>\r\n                                                    );\r\n                                                })}\r\n                                            </ul>\r\n                                        </span>\r\n                                    ) : (\r\n                                        <span className=\"capitalize\">\r\n                                            {\r\n                                                data.getTicketDataById[0]\r\n                                                    .developer\r\n                                            }\r\n                                        </span>\r\n                                    )}\r\n                                </td>\r\n                                <td>\r\n                                    <span className=\"capitalize\">\r\n                                        {data.getTicketDataById[0].submitter}\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {user.role === \"developer\" ? (\r\n                                    <td>{data.getTicketDataById[0].title}</td>\r\n                                ) : (\r\n                                    <td>\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a\r\n                                            className=\"dropdown-trigger btn manage-dropdown\"\r\n                                            data-target=\"dropdownassign\"\r\n                                        >\r\n                                            {state.parentTitle === \"\" ? (\r\n                                                // eslint-disable-next-line\r\n                                                Projects.map((_val, i) => {\r\n                                                    if (\r\n                                                        `${\r\n                                                            Projects![i]\r\n                                                                .projectid\r\n                                                        }` ===\r\n                                                        `${data!\r\n                                                            .getTicketDataById[0]\r\n                                                            .belongsto!}`\r\n                                                    ) {\r\n                                                        return Projects![i]\r\n                                                            .title;\r\n                                                    }\r\n                                                })\r\n                                            ) : (\r\n                                                <>{state.parentTitle}</>\r\n                                            )}\r\n                                        </a>\r\n                                        <ul\r\n                                            id=\"dropdownassign\"\r\n                                            className=\"dropdown-content\"\r\n                                        >\r\n                                            {!!Projects.map\r\n                                                ? Projects.map((_val, i) => {\r\n                                                      return (\r\n                                                          <li key={i}>\r\n                                                              <button\r\n                                                                  className=\"btnDropdown\"\r\n                                                                  onClick={() =>\r\n                                                                      setState({\r\n                                                                          ...state,\r\n                                                                          projectid: `${Projects![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .projectid!}`,\r\n                                                                          parentTitle: Projects![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .title!,\r\n                                                                      })\r\n                                                                  }\r\n                                                              >\r\n                                                                  {\r\n                                                                      Projects![\r\n                                                                          i\r\n                                                                      ].title\r\n                                                                  }\r\n                                                              </button>\r\n                                                          </li>\r\n                                                      );\r\n                                                  })\r\n                                                : null}\r\n                                        </ul>\r\n                                    </td>\r\n                                )}\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        {state.priority !== \"\" ? (\r\n                                            <span>{state.priority}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .priority || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"low\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"medium\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"high\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .status || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"open\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"closed\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"closed\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"on-hold\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"on-hold\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        {state.type !== \"\" ? (\r\n                                            <span>{state.type}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0].type || (\r\n                                                <span>No Type</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"bugs/errors\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"features\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => updateTicket()}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>\r\n                            ARE YOU SURE YOU WANT TO DELETE TICKET #{ticketid}\r\n                        </h4>\r\n                        <p>This action cannot be undone</p>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteTicket()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useGetProjectDataQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetProjects = () => {\r\n    const { data , loading } = useGetProjectDataQuery();\r\n\r\n    if(loading || !data) {\r\n\r\n    } else {\r\n        let Projects = data.getProjectData;\r\n        return Projects;\r\n    }\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const GetLocation = () => {\r\n    let location = useLocation();\r\n    let id = location.pathname;\r\n    let tmp: any = id.split(':');\r\n    id = tmp[1];\r\n    return id;\r\n}","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useLoginMutation,\r\n    useDemoLoginMutation,\r\n} from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport M from \"materialize-css\";\r\n\r\nexport const Login: React.FC<RouteComponentProps> = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async (e?: React.SyntheticEvent, role?: string) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        if (!!role) {\r\n            try {\r\n                await demoLogin({\r\n                    variables: {\r\n                        role,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                console.log(\"Could not set Role Err :>> \", err);\r\n            }\r\n\r\n            try {\r\n                const response2 = await login({\r\n                    variables: {\r\n                        email: \"demo@demo.com\",\r\n                        password: \"demoPassword\",\r\n                    },\r\n                });\r\n\r\n                try {\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.login.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.login.refreshToken\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(\"Could not set tokens ERR :>> \", err);\r\n                }\r\n                window.location.reload();\r\n            } catch (err) {\r\n                console.log(\"Could not login Err :>> \", err);\r\n                M.toast({ html: \"Failed Login\" });\r\n                M.toast({ html: \"Server is likely down\" });\r\n            }\r\n        } else {\r\n            try {\r\n                if (email.length > 1 && password.length > 1) {\r\n                    await fetch(`${URI}/check-refresh-token`, {\r\n                        method: \"POST\",\r\n                        credentials: \"include\",\r\n                    }).then(async res => {\r\n                        if (res.status === 499) {\r\n                            const response2 = await login({\r\n                                variables: {\r\n                                    email: email,\r\n                                    password: password,\r\n                                },\r\n                            });\r\n\r\n                            if (response2 && response2.data) {\r\n                                setAccessToken(\r\n                                    response2.data.login.accessToken\r\n                                );\r\n                                localStorage.setItem(\r\n                                    \"refreshToken\",\r\n                                    response2.data.login.refreshToken\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n                    window.location.reload();\r\n                } else if (password.length < 1 && email.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                    document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n                } else if (password.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                }\r\n            } catch (error) {\r\n                console.log(\"error :>> \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const demoUser = async (e: React.SyntheticEvent, role: string) => {\r\n        e.preventDefault();\r\n        const response = await demoLogin({\r\n            variables: {\r\n                role,\r\n            },\r\n        });\r\n\r\n        if (response && response.data) {\r\n            setAccessToken(response.data.demoLogin.accessToken);\r\n            localStorage.setItem(\r\n                \"refreshToken\",\r\n                response.data.demoLogin.refreshToken\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                    onClick={e => submitForm(e)}\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </a>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"dd\")!\r\n                                        .classList.remove(\"hide\");\r\n                                }}\r\n                            >\r\n                                Demo User\r\n                            </button>\r\n                            <span\r\n                                className=\"dropdown-trigger btn stretched manage-dropdown hide\"\r\n                                id=\"dd\"\r\n                                data-target=\"dropdownRole\"\r\n                            >\r\n                                Role\r\n                            </span>\r\n                            <ul id=\"dropdownRole\" className=\"dropdown-content\">\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={async e => {\r\n                                            submitForm(e, \"admin\");\r\n                                        }}\r\n                                    >\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"developer\");\r\n                                        }}\r\n                                    >\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"project-manager\");\r\n                                        }}\r\n                                    >\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <span className=\"centered\">\r\n                                <div>\r\n                                    <u>\r\n                                        <a href=\"#/register\">Sign Up Here</a>\r\n                                    </u>\r\n                                </div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useRegisterMutation } from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [register] = useRegisterMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async () => {\r\n        if (\r\n            email.length > 1 &&\r\n            password.length > 1 &&\r\n            username.length > 1 &&\r\n            firstname.length > 1 &&\r\n            lastname.length > 1\r\n        ) {\r\n            await fetch(`${URI}/check-refresh-token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n            }).then(async res => {\r\n                if (res.status === 499) {\r\n                    const response2 = await register({\r\n                        variables: {\r\n                            email,\r\n                            password,\r\n                            username,\r\n                            role,\r\n                            firstname,\r\n                            lastname,\r\n                        },\r\n                    });\r\n\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.register.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.register.refreshToken\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById(\"username\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById(\"firstname\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById(\"lastname\")!.classList.add(\"invalid\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Sign Up</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"username\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={username}\r\n                                    onChange={e => setUsername(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a username\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span\r\n                                    className=\"dropdown-trigger btn manage-dropdown\"\r\n                                    id=\"roleDD\"\r\n                                    data-target=\"dropdownRole\"\r\n                                >\r\n                                    Role\r\n                                </span>\r\n                                <ul\r\n                                    id=\"dropdownRole\"\r\n                                    className=\"dropdown-content\"\r\n                                >\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"admin\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Admin\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"developer\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Developer\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"project-manager\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Project Manager\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"firstname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={firstname}\r\n                                    onChange={e => setFirstname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your first name\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"lastname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your last name \"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={e => submitForm()}\r\n                            >\r\n                                Register\r\n                            </button>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                >\r\n                                    Login Here\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport UserImage from \"../img/unnamed.webp\";\r\nimport { setNavActives } from \"../setNavActives\";\r\n\r\nexport const Sidenav = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        setNavActives(user);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a href=\"#/manage-roles\" className=\"navLink\" id=\"man-roles\">\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nconst PageLoader = () => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-red\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-yellow\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-green\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageLoader;\r\n","import UserImage from \"../img/unnamed.webp\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport {\r\n    useGetUserNotificationsQuery,\r\n    useLogoutMutation,\r\n} from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport PageLoader from \"./PageLoader\";\r\n\r\nexport const MobileSideNav = () => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        var instances = M.Sidenav.init(elems);\r\n        instances[0].close();\r\n        window.location.reload();\r\n    };\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    let unread = 0;\r\n    data?.getUserNotifications.forEach((_val, i) => {\r\n        if (!data.getUserNotifications[i].read) {\r\n            unread++;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"mobile-dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-roles\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-roles\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Man Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"mobile-projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"mobile-tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/notifications\" className=\"navLink\">\r\n                    <button className=\"btn\">\r\n                        {unread !== 0 ? (\r\n                            <i className=\"left material-icons\">\r\n                                notifications_active\r\n                            </i>\r\n                        ) : (\r\n                            <i className=\"left material-icons\">notifications</i>\r\n                        )}\r\n                        <span className=\"left\">Notifications</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                {/* eslint-disable-next-line */}\r\n                <a\r\n                    className=\"navLink\"\r\n                    onClick={() => {\r\n                        logout();\r\n                    }}\r\n                >\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">exit_to_app</i>\r\n                        <span className=\"left\">Logout</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n    useGetUserNotificationsQuery,\r\n    useLogoutMutation,\r\n} from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { Sidenav } from \"./Sidenav\";\r\nimport { MobileSideNav } from \"./MobileSideNav\";\r\nimport PageLoader from \"./PageLoader\";\r\n\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n    });\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        window.location.reload();\r\n    };\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    let unread = 0;\r\n    data?.getUserNotifications.forEach((_val, i) => {\r\n        if (!data.getUserNotifications[i].read) {\r\n            unread++;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#/dashboard\" className=\"brand-logo\">\r\n                            <i className=\"material-icons\">bug_report</i>\r\n                            <b>Bug Tracker</b>\r\n                        </a>\r\n\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            href=\"#\"\r\n                            data-target=\"slide-out\"\r\n                            className=\"sidenav-trigger\"\r\n                        >\r\n                            <i className=\"material-icons\">menu</i>\r\n                        </a>\r\n                        <ul\r\n                            id=\"nav-mobile\"\r\n                            className=\"right hide-on-med-and-down\"\r\n                        >\r\n                            <li>\r\n                                <a href=\"#/notifications\">\r\n                                    Your Notifications\r\n                                    {unread !== 0 ? (\r\n                                        <span className=\"new badge blue\">\r\n                                            {unread}\r\n                                        </span>\r\n                                    ) : null}\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                {/* eslint-disable-next-line */}\r\n                                <a\r\n                                    onClick={() => {\r\n                                        logout();\r\n                                    }}\r\n                                >\r\n                                    Logout\r\n                                    <i className=\"material-icons right\">\r\n                                        exit_to_app\r\n                                    </i>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">{children ? children : null}</span>\r\n        </div>\r\n    );\r\n};\r\n","import { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default checkAuth();","import React, { FC } from \"react\";\r\nimport { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: FC<IAuthRouteProps> = ({ component: Component, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthRoute;\r\n","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AdminRoute;","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove('indicator-pink');\r\n    t?.classList.remove('indicator-darkblue');\r\n    t?.classList.remove('indicator-cyan');\r\n    switch (color) {\r\n        case 'pink': {\r\n            t?.classList.add('indicator-pink');\r\n            break;\r\n        }\r\n        case 'dark-blue': {\r\n            t?.classList.add('indicator-darkblue');\r\n            break;\r\n        }\r\n        case 'cyan': {\r\n            t?.classList.add('indicator-cyan');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove('indicator-blue')\r\n    t?.classList.remove('indicator-yellow')\r\n    switch (color) {\r\n        case 'yellow': {\r\n            t?.classList.add('indicator-yellow');\r\n            subt?.classList.add('indicator-blue');\r\n            break;\r\n        }\r\n        case 'blue': {\r\n            t?.classList.add('indicator-blue');\r\n            subt2?.classList.add('indicator-yellow');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// export const changeIndicatorP = (i: string, color: string) => {\r\n//     let t = document.getElementById(`ul3${i}`)\r\n//     let subt = document.getElementById(`sub-tab3${i}`);\r\n//     let subt2 = document.getElementById(`sub-tab3.1${i}`);\r\n//     t?.classList.remove('indicator-orange');\r\n//     t?.classList.remove('indicator-blue');\r\n//     switch (color) {\r\n//         case 'orange': {\r\n//             t?.classList.add('indicator-orange');\r\n//             subt?.classList.add('indicator-blue');\r\n//             break;\r\n//         }\r\n//         case 'blue': {\r\n//             t?.classList.add('indicator-blue');\r\n//             subt2?.classList.add('indicator-orange');\r\n//             break;\r\n//         }\r\n//     }\r\n// }","import { useState } from \"react\";\r\nimport { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabs = () => {\r\n    let LStitle: any = localStorage.getItem(\"title\");\r\n    if (!!LStitle) {\r\n        LStitle = LStitle!.split(\",\");\r\n    }\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    }\r\n    const [title, setTitle] = useState({ title: LStitle || ([] as string[]) });\r\n    // eslint-disable-next-line\r\n    const [chartData, setChartData] = useState({\r\n        chart: LSdata || ([] as string[]),\r\n    });\r\n    const userTickets = useGetUserTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n    const tickets = useGetTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {};\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    return {\r\n        title,\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    };\r\n};\r\n","import { useGetUserTicketsQuery } from \"../../generated/graphql\"\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getUserTickets;\r\n}","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getTickets\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from \"react-chartjs-2\";\r\nimport M from \"materialize-css\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabs } from \"./DashboardTabs\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    let LSname: any = localStorage.getItem(\"chartType\");\r\n    if (!!LSname) {\r\n        LSname = LSname!.split(\",\");\r\n    }\r\n    let LSchart: any = localStorage.getItem(\"chart\");\r\n    if (!!LSchart) {\r\n        LSchart = LSchart.split(\",\");\r\n    }\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || ([] as string[]) });\r\n    const {\r\n        title,\r\n        myTicketsByS,\r\n        myTicketsByP,\r\n        myTicketsByT,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    } = DashboardTabs();\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        var elems = document.querySelectorAll(\".fixed-action-btn\");\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false,\r\n        });\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems, {\r\n            position: \"left\",\r\n        });\r\n\r\n        setNavActives(user);\r\n    });\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat((temp! += 1));\r\n        setState({ ...state, Cards: state.Cards.concat((temp! += 1)) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat(\"\"),\r\n        });\r\n        localStorage.setItem(\"chart\", `${t1}`);\r\n        let tmp = chart.name;\r\n        tmp.push(\"Pie\");\r\n        setChart({\r\n            ...chart,\r\n            name: tmp,\r\n        });\r\n        localStorage.setItem(\"chartType\", `${tmp}`);\r\n    };\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp,\r\n            });\r\n            localStorage.setItem(\"chartType\", `${tmp}`);\r\n        }\r\n    };\r\n\r\n    if (!localStorage.getItem(\"chartType\")) {\r\n        localStorage.setItem(\"chartType\", \"Donut\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fixed-action-btn\">\r\n                {/* eslint-disable-next-line */}\r\n                <a\r\n                    className=\"btn-floating tooltipped btn-large\"\r\n                    data-postion=\"left\"\r\n                    data-tooltip=\"ADD A CHART\"\r\n                    style={{\r\n                        backgroundImage:\r\n                            \"linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)\",\r\n                    }}\r\n                    onClick={() => {\r\n                        AddCard();\r\n                    }}\r\n                >\r\n                    <i className=\"material-icons\">insert_chart</i>\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                {state.Cards.map(function (_val: any, i: any) {\r\n                    return (\r\n                        <div\r\n                            className=\"col s10 offset-s1 m6 offset-m1 l6 xl4 container\"\r\n                            key={i}\r\n                        >\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <span className=\"card-title center\">\r\n                                            {title!.title[i]}\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div className=\"row row-verticle-center\">\r\n                                        <div className=\"col l12 m12 s12 centered\">\r\n                                            {chart.name[i] === \"Donut\" &&\r\n                                            !!LSdata &&\r\n                                            LSdata[i] ? (\r\n                                                <Doughnut\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Bar\" &&\r\n                                            !!LSdata &&\r\n                                            LSdata[i] ? (\r\n                                                <Bar\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Pie\" &&\r\n                                            !!LSdata &&\r\n                                            LSdata[i] ? (\r\n                                                <Pie\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card-tabs\">\r\n                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                        <li className=\"tab\">\r\n                                            <a\r\n                                                className=\"active\"\r\n                                                href={`#tab2${i}`}\r\n                                            >\r\n                                                Tickets\r\n                                            </a>\r\n                                        </li>\r\n                                        <li className=\"tab\">\r\n                                            <a href={`#tab${i}`}>Chart Type</a>\r\n                                        </li>\r\n                                        {/* <li className=\"tab\"><a href={`#tab3${i}`}>Projects</a></li> */}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className=\"card-content grey lighten-4\">\r\n                                    <div id={`tab${i}`}>\r\n                                        <div className=\"card-tabs\">\r\n                                            <ul\r\n                                                id={`ul${i}`}\r\n                                                className=\"tabs tabs-fixed-width\"\r\n                                            >\r\n                                                <li className=\"tab\">\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a\r\n                                                        className=\"active\"\r\n                                                        onClick={() => {\r\n                                                            changeIndicatorC(\r\n                                                                `${i}`,\r\n                                                                \"pink\"\r\n                                                            );\r\n                                                        }}\r\n                                                    >\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Donut`}\r\n                                                            onClick={e =>\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            Donut\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"dark-blue\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Pie`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Pie\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"cyan\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Bar`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Bar\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div id={`tab2${i}`}>\r\n                                        <ul\r\n                                            id={`ul2${i}`}\r\n                                            className=\"tabs tabs-fixed-width\"\r\n                                        >\r\n                                            <li className=\"tab my-tickets\">\r\n                                                <a\r\n                                                    className=\"active\"\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"yellow\"\r\n                                                        )\r\n                                                    }\r\n                                                    href={`#sub-tab2${i}`}\r\n                                                >\r\n                                                    My Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                            <li className=\"tab all-tickets\">\r\n                                                <a\r\n                                                    href={`#sub-tab2.1${i}`}\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"blue\"\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    All Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab2${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul\r\n                                                        id={`ul2${i}`}\r\n                                                        className=\"tabs tabs-fixed-width\"\r\n                                                    >\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active yellow-text\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByP!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    By Priority\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByS!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    By Status\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByT!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    By Type\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab2.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByP!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    By Priority\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByS!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    By Status\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByT!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    By Type\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* <div id={`tab3${i}`}>\r\n                                        <ul id={`ul3${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab\"><a className=\"active\" href={`#sub-tab3${i}`} onClick={() => changeIndicatorP(`${i}`, 'orange')}>My Projects</a></li>\r\n                                            <li className=\"tab\"><a href={`#sub-tab3.1${i}`} onClick={() => changeIndicatorP(`${i}`, 'blue')}>All Projects</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab3${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab3.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useGetProjectDataQuery } from \"../../../generated/graphql\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../../setNavActives\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">Manage Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <b>Project Name</b>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    <b>Description</b>\r\n                                </th>\r\n                                <th>\r\n                                    <b>Users Assigned</b>\r\n                                </th>\r\n                                <th className=\"noselect\">\r\n                                    <b>Edit/Details</b>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getProjectData.map ? (\r\n                                data.getProjectData.map(\r\n                                    (_val, i, getProjectData) => {\r\n                                        let projectId =\r\n                                            getProjectData[i].projectid;\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i].title\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td className=\"nonessen\">\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i]\r\n                                                            .description\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i]\r\n                                                            .projectid\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    <a\r\n                                                        href={`#/edit-project:${projectId}`}\r\n                                                    >\r\n                                                        <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                            edit\r\n                                                        </i>\r\n                                                    </a>\r\n                                                    <br />\r\n                                                    <a\r\n                                                        href={`#/project-details:${projectId}`}\r\n                                                    >\r\n                                                        <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                            details\r\n                                                        </i>\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"poormans-divider\"></div>\r\n                    <a href=\"#/create-project\">\r\n                        <button className=\"btn btn-ex safe-btn center footerBtn\">\r\n                            Add Project\r\n                        </button>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number,\r\n    keyprop: number,\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${props.projectid}` }});\r\n\r\n    if (loading || !data) {\r\n        return(\r\n            <tr><td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td></tr>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.keyprop}>\r\n            <td>\r\n                { data.getProjectDataById[0].title }\r\n            </td>\r\n\r\n            <td className = \"nonessen\">\r\n                { data.getProjectDataById[0].description }\r\n            </td>\r\n\r\n            <td>\r\n                <a href = {`#/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading } = useGetUserProjectsQuery();\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">My Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUserProjects!.map ? (\r\n                                data!.getUserProjects!.map(\r\n                                    (_val, i, getUserProjects): JSX.Element => {\r\n                                        return (\r\n                                            <DetailsSubCom\r\n                                                projectid={\r\n                                                    getUserProjects[i].projectid\r\n                                                }\r\n                                                key={i}\r\n                                                keyprop={i}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst useGetProjectTickets = () => {\r\n    let id = GetLocation();\r\n\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let Tickets = data.getProjectTickets;\r\n        return Tickets;\r\n    }\r\n};\r\n\r\nexport default useGetProjectTickets;\r\n","import { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst useGetProjectUsers = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let AssignedUsers = data.getProjectUsersById;\r\n        return AssignedUsers;\r\n    }\r\n};\r\n\r\nexport default useGetProjectUsers;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport useGetProjectTickets from \"./useGetProjectTickets\";\r\nimport { Sorting } from \"../Sorting\";\r\nimport { useState } from \"react\";\r\nimport useGetProjectUsers from \"./useGetProjectUsers\";\r\n\r\nexport const ProjectDetails: React.FC = () => {\r\n    let history: any = useHistory();\r\n    let id = GetLocation();\r\n    const {\r\n        sortByTitle,\r\n        sortBySubmitter,\r\n        sortByDeveloper,\r\n        sortTicketsByStatus,\r\n        usernameSort,\r\n        emailSort,\r\n        roleSort,\r\n    } = Sorting();\r\n    const [state, setState] = useState({\r\n        toggle: \"0\",\r\n        titleSwitch: \"0\",\r\n        usernameSwitch: \"0\",\r\n        emailSwitch: \"0\",\r\n        roleSwitch: \"0\",\r\n        submitterSwitch: \"0\",\r\n        developerSwitch: \"0\",\r\n    });\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    let Tickets = useGetProjectTickets();\r\n    let AssignedUsers = useGetProjectUsers();\r\n\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data || !AssignedUsers || !Tickets) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {data.getProjectDataById.length === 0 ? (\r\n                <Redirect to=\"#/dashboard\" />\r\n            ) : (\r\n                <div className=\"detailsWrapper container-fluid\">\r\n                    <div className=\"center-align table-wrapper\">\r\n                        <span className=\"table-header z-depth-2\">\r\n                            <h2 className=\"white-text\">\r\n                                Details for Project #{id}\r\n                            </h2>\r\n                        </span>\r\n\r\n                        <span className=\"table-body z-depth-1\">\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Project Name</th>\r\n                                        <th>Project Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {data.getProjectDataById[0].title}\r\n                                        </td>\r\n                                        <td>\r\n                                            {\r\n                                                data.getProjectDataById[0]\r\n                                                    .description\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row\">\r\n                                <span className=\"col s12 m5 l5 xl5\">\r\n                                    <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Assigned Personnel\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        User Name\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let usernameSwitch: string = usernameSort(\r\n                                                                    AssignedUsers,\r\n                                                                    state.usernameSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    usernameSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>\r\n                                                        Email\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let emailSwitch: string =\r\n                                                                    emailSort(\r\n                                                                        AssignedUsers,\r\n                                                                        state.emailSwitch\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    emailSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        Role\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let roleSwitch: string =\r\n                                                                    roleSort(\r\n                                                                        AssignedUsers,\r\n                                                                        state.roleSwitch\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    roleSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <tbody>\r\n                                            {AssignedUsers!.map(\r\n                                                (_val, i): JSX.Element => {\r\n                                                    return (\r\n                                                        <tr key={i}>\r\n                                                            <td className=\"capitalize\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].username\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td className=\"capitalize nonessen\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].email\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td className=\"capitalize\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].role\r\n                                                                }\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </span>\r\n\r\n                                <span className=\"col s12 m5 l5 xl5 offset-m2 offset-l2 offset-xl2\">\r\n                                    <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Tickets for Project #{id}\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        Title\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let titleSwitch = sortByTitle(\r\n                                                                    Tickets,\r\n                                                                    state.titleSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    titleSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>\r\n                                                        Submitter\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let submitterSwitch = sortBySubmitter(\r\n                                                                    Tickets,\r\n                                                                    state.submitterSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    submitterSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>\r\n                                                        Developer\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let developerSwitch = sortByDeveloper(\r\n                                                                    Tickets,\r\n                                                                    state.developerSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    developerSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        Status\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let toggle: string =\r\n                                                                    sortTicketsByStatus(\r\n                                                                        Tickets,\r\n                                                                        state.toggle\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    toggle,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <tbody>\r\n                                            {!Tickets\r\n                                                ? null\r\n                                                : Tickets!.map((_val, i) => {\r\n                                                      return (\r\n                                                          <tr key={i}>\r\n                                                              <td className=\"capitalize\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ].title\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize nonessen\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ]\r\n                                                                          .submitter\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize nonessen\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ]\r\n                                                                          .developer\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ].status\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td>\r\n                                                                  <a\r\n                                                                      className=\"noselect\"\r\n                                                                      href={`#/ticket-details:${\r\n                                                                          Tickets![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .ticketid\r\n                                                                      }`}\r\n                                                                  >\r\n                                                                      Details\r\n                                                                  </a>\r\n                                                              </td>\r\n                                                          </tr>\r\n                                                      );\r\n                                                  })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n\r\n                            <button\r\n                                className=\"btn left footerBtn\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                Go Back\r\n                            </button>\r\n                            {user.role === \"developer\" ? null : (\r\n                                <a href={`#/edit-project:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useEffect } from \"react\";\r\nimport TicketComments from \"./TicketComments\";\r\nimport TicketHistory from \"./TicketHistory\";\r\n\r\nexport const TicketDetails: React.FC = () => {\r\n    const history = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data) {\r\n        return <span>no data</span>;\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n\r\n    return (\r\n        <span>\r\n            {ticket.length === 0 ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                <>\r\n                    <div className=\"container \">\r\n                        <div className=\"center-align table-wrapper\">\r\n                            <span className=\"table-header z-depth-2\">\r\n                                <h2 className=\"white-text noselect\">\r\n                                    Details For Ticket #{id}\r\n                                </h2>\r\n                            </span>\r\n\r\n                            <span className=\"table-body z-depth-1\">\r\n                                <table className=\"striped responsive\">\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>TITLE</th>\r\n                                            <th>DESCRIPTION</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].title}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].description ||\r\n                                                    \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>ASSIGNED DEVELOPER</th>\r\n                                            <th>SUBMITTER</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].developer}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].submitter}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>BELONGS TO PROJECT</th>\r\n                                            <th>TICKET PRIORITY</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td>#{ticket[0].belongsto}</td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].priority}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>TICKET STATUS</th>\r\n                                            <th>TICKET TYPE</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].status}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].type || \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                                <div className=\"divider\"></div>\r\n\r\n                                <button\r\n                                    className=\"btn left footerBtn\"\r\n                                    onClick={() => history.goBack()}\r\n                                >\r\n                                    Back\r\n                                </button>\r\n                                <a href={`#/edit-ticket:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TicketComments />\r\n                    <TicketHistory />\r\n                </>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","\r\nexport const CheckIfInProject = (id: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers\r\n    for(let x = 0; x < users.length; x++) {\r\n        if(users[x].id === id) {\r\n            tmp = true\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n}","import { useGetUsersQuery, useAddProjectUserMutation, useRemoveProjectUserMutation } from \"../../../generated/graphql\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const USERS = (projectUsers: any) => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n    const PROJECT_ID = GetLocation();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({\r\n        assigned: projectUsers,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('select');\r\n        M.FormSelect.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const modPersonnel = async (i: number) => {\r\n        if(CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            await removeUser({ \r\n                variables: {\r\n                    userid: `${data!.getUsers![i].id}`,\r\n                    projectid: `${PROJECT_ID}`\r\n                }\r\n            });\r\n            M.toast({html: `Removed ${data!.getUsers![i].username}`});\r\n        } else {\r\n            await addUser({ \r\n                variables: {\r\n                    projectid: `${PROJECT_ID}`,\r\n                    userid: `${data!.getUsers![i].id}`\r\n                }\r\n            });\r\n            M.toast({html: `Added ${data!.getUsers![i].username}`});\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select className = \"browser-default\">\r\n                    <option value=\"\" disabled selected>Click to add/remove</option>\r\n                    { data!.getUsers!.map( ( _val, i, getUsers ) => {\r\n                        return(\r\n                            <option key={ i } onClick = { () => { modPersonnel(i) } }>  { getUsers[i].username } </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditAss: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectUsersById!.map(\r\n                (_val, i, getProjectUsersById): JSX.Element => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td className=\"capitalize\">\r\n                                {\" \"}\r\n                                {getProjectUsersById[i].username}{\" \"}\r\n                            </td>\r\n                            <td className=\"capitalize nonessen\">\r\n                                {\" \"}\r\n                                {getProjectUsersById[i].email}{\" \"}\r\n                            </td>\r\n                            <td className=\"capitalize\">\r\n                                {\" \"}\r\n                                {getProjectUsersById[i].role}{\" \"}\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            )}\r\n\r\n            <tr>\r\n                <USERS projectUsers={data.getProjectUsersById} />\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${id}`,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {!!data ? (\r\n                data!.getProjectTickets.map((_val, i, getProjectTickets) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td className=\"capitalize\">\r\n                                {getProjectTickets[i].title}\r\n                            </td>\r\n                            <td className=\"capitalize nonessen\">\r\n                                {getProjectTickets[i].submitter}\r\n                            </td>\r\n                            <td className=\"capitalize nonessen\">\r\n                                {getProjectTickets[i].developer}\r\n                            </td>\r\n                            <td className=\"capitalize\">\r\n                                {getProjectTickets[i].status}\r\n                            </td>\r\n                            <td>\r\n                                <a\r\n                                    href={`#/edit-ticket:${getProjectTickets[i].ticketid}`}\r\n                                >\r\n                                    EDIT\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            ) : (\r\n                <tr></tr>\r\n            )}\r\n            <tr>\r\n                <td>\r\n                    <a href={`#/project-add:${id}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            AddTicket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport {\r\n    useGetProjectDataByIdQuery,\r\n    useSetProjectDescMutation,\r\n    useSetProjectTitleMutation,\r\n    useDeleteProjectMutation,\r\n} from \"../../generated/graphql\";\r\nimport { EditAss } from \"./edit-project/EditAss\";\r\nimport { EditPTTable } from \"./edit-project/EditPTTable\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { JsFooterStyling } from \"../../css/JsStyling\";\r\n\r\nexport const EditProject: React.FC = () => {\r\n    const history: any = useHistory();\r\n    const [state, setState] = useState({\r\n        pTitle: \"\",\r\n        pDesc: \"\",\r\n    });\r\n\r\n    let id = GetLocation();\r\n\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (data.getProjectDataById.length === 0) {\r\n        return <Redirect to=\"/manage-projects\" />;\r\n    }\r\n\r\n    const updateProject = async () => {\r\n        if (state.pDesc !== \"\" || state.pTitle !== \"\") {\r\n            if (state.pTitle !== \"\") {\r\n                setTitle({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        title: `${state.pTitle}`,\r\n                    },\r\n                });\r\n                M.toast({ html: \"Project Title Successfully Changed\" });\r\n            }\r\n            if (state.pDesc !== \"\") {\r\n                setDesc({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        description: `${state.pDesc}`,\r\n                    },\r\n                });\r\n                M.toast({ html: \"Project Description Successfully Changed\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteProject = async () => {\r\n        let tmp = await delProj({\r\n            variables: {\r\n                projectid: `${id}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: \"An Error Occured while deleting project\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"detailsWrapper container-fluid\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Edit Project #{id}</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"project-name\"\r\n                                            value={state.pTitle}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    pTitle: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"project-name\">\r\n                                            {state.pTitle !== \"\" ? (\r\n                                                <span>{state.pTitle}</span>\r\n                                            ) : (\r\n                                                data.getProjectDataById[0].title\r\n                                            )}\r\n                                        </label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"project-desc\"\r\n                                            value={state.pDesc}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    pDesc: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"project-desc\">\r\n                                            {state.pDesc !== \"\" ? (\r\n                                                <span>{state.pDesc}</span>\r\n                                            ) : (\r\n                                                data.getProjectDataById[0]\r\n                                                    .description\r\n                                            )}\r\n                                        </label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"row\">\r\n                        <span className=\"col s12 m5 l5 xl5\">\r\n                            <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className=\"white-text\">\r\n                                    Assigned Personnel\r\n                                </h3>\r\n                            </span>\r\n\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <b>User Name</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Email</b>\r\n                                        </th>\r\n                                        <th>\r\n                                            <b>Role</b>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAss />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className=\"col s12 m5 l5 xl5 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className=\"white-text\">\r\n                                    Tickets for Project #{id}\r\n                                </h3>\r\n                            </span>\r\n\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <b>Title</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Submitter</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Developer</b>\r\n                                        </th>\r\n                                        <th>\r\n                                            <b>Status</b>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => {\r\n                                updateProject();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE PROJECT #{id}</h4>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteProject()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../tickets/useGetUsers\";\r\nimport {\r\n    useCreateTicketMutation,\r\n    useSendNot_CreateTicketMutation,\r\n} from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const AddTicketToProject: React.FC = () => {\r\n    const UsersArray = useGetUsers();\r\n    const history = useHistory();\r\n    const id = GetLocation();\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [SendNotification] = useSendNot_CreateTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: \"\",\r\n        type: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"\",\r\n        dev: \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (!UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const addHide = (elms: string[]) => {\r\n        elms.forEach((_val, i) => {\r\n            document.getElementById(elms[i])?.classList.add(\"hide\");\r\n        });\r\n    };\r\n\r\n    const toggleHide = (elms: string[]) => {\r\n        elms.forEach((_val, i) => {\r\n            document.getElementById(elms[i])?.classList.toggle(\"hide\");\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (\r\n            state.status === \"\" ||\r\n            state.type === \"\" ||\r\n            state.title === \"\" ||\r\n            state.description === \"\" ||\r\n            state.priority === \"\"\r\n        ) {\r\n            M.toast({ html: \"Missing Data\" });\r\n            addHide([\r\n                \"dev-hpr-br\",\r\n                \"dev-hpr\",\r\n                \"status-hpr-br\",\r\n                \"status-hpr\",\r\n                \"type-hpr-br\",\r\n                \"type-hpr\",\r\n                \"pri-hpr-br\",\r\n                \"pri-hpr\",\r\n            ]);\r\n\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.type === \"\") {\r\n                toggleHide([\"type-hpr-br\", \"type-hpr\"]);\r\n            }\r\n\r\n            if (state.status === \"\") {\r\n                toggleHide([\"status-hpr-br\", \"status-hpr\"]);\r\n            }\r\n\r\n            if (state.dev === \"\") {\r\n                toggleHide([\"dev-hpr-br\", \"dev-hpr\"]);\r\n            }\r\n\r\n            if (state.priority === \"\") {\r\n                toggleHide([\"pri-hpr-br\", \"pri-hpr\"]);\r\n            }\r\n        } else {\r\n            await Submit({\r\n                variables: {\r\n                    title: state.title,\r\n                    description: state.description,\r\n                    belongsTo: `${id}`,\r\n                    developer: state.dev,\r\n                    priority: state.priority,\r\n                    status: state.status,\r\n                    submitter: user.username,\r\n                    type: state.type,\r\n                },\r\n            });\r\n\r\n            await SendNotification({\r\n                variables: {\r\n                    projectid: id,\r\n                },\r\n            });\r\n\r\n            history.push({ pathname: \"#/manage\" });\r\n        }\r\n    };\r\n\r\n    const setTicketType = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({ ...state, type });\r\n    };\r\n\r\n    const setTicketStatus = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({ ...state, status });\r\n    };\r\n\r\n    const SetTicketDev = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let dev = target.name;\r\n        setState({ ...state, dev });\r\n    };\r\n\r\n    const setTicketPriority = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({ ...state, priority });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">Create Ticket</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            ADD A TITLE\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                ADD A DESCRIPTION\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        data-target=\"dropdownDev\"\r\n                                    >\r\n                                        {state.dev !== \"\" ? (\r\n                                            <span>{state.dev}</span>\r\n                                        ) : (\r\n                                            <span>Assign a Developer</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownDev\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        {UsersArray!.map(\r\n                                            (_val, i, UsersArray) => {\r\n                                                return (\r\n                                                    <li key={i}>\r\n                                                        <button\r\n                                                            className=\"btnDropdown\"\r\n                                                            name={`${UsersArray[i].username}`}\r\n                                                            onClick={e =>\r\n                                                                SetTicketDev(e)\r\n                                                            }\r\n                                                        >\r\n                                                            {\r\n                                                                UsersArray[i]\r\n                                                                    .username\r\n                                                            }\r\n                                                        </button>\r\n                                                    </li>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"dev-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"dev-hpr\"\r\n                                    >\r\n                                        Please Assign a Developer\r\n                                    </span>\r\n                                </td>\r\n                                <td>{user.username} (YOU)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>#{id}</td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        {state.priority !== \"\" ? (\r\n                                            <span>{state.priority}</span>\r\n                                        ) : (\r\n                                            <span>Ticket Priority</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"low\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"medium\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"high\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"pri-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"pri-hpr\"\r\n                                    >\r\n                                        Please Assign a Ticket Priority\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            <span>Set Ticket Status</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"open\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"closed\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"on-hold\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"status-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"status-hpr\"\r\n                                    >\r\n                                        Please Select a Ticket Status\r\n                                    </span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        {state.type !== \"\" ? (\r\n                                            <span>{state.type}</span>\r\n                                        ) : (\r\n                                            <span>Set Ticket Type</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"bugs-errors\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"features\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"type-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"type-hpr\"\r\n                                    >\r\n                                        Please Select a Ticket Type\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <div className=\"row\">\r\n                        <button\r\n                            className=\"btn left footerBtn modal-trigger\"\r\n                            data-target=\"cancelModal\"\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => handleSubmit()}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            Stay On Page\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            CANCEL\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useGetUsersQuery,\r\n    useAddProjectMutation,\r\n    useAddNotificationMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../tickets/useGetUsers\";\r\n\r\nexport const CreateProject: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const history = useHistory();\r\n    const UsersArray = useGetUsers();\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [sendNotification] = useAddNotificationMutation();\r\n    const [state, setState] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading || !data || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === \"\" || state.description === \"\") {\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")?.classList.add(\"invalid\");\r\n            }\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")?.classList.add(\"invalid\");\r\n            }\r\n\r\n            M.toast({ html: \"Missing Data\" });\r\n        } else {\r\n            await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users: state.userString,\r\n                },\r\n            });\r\n\r\n            state.userids.forEach(async (_val, i) => {\r\n                await sendNotification({\r\n                    variables: {\r\n                        message: `You have been assigned a new project`,\r\n                        userId: `${state.userids[i]}`,\r\n                    },\r\n                });\r\n            });\r\n\r\n            M.toast({ html: \"Project added successfully\" });\r\n            window.location.replace(\"/manage-projects\");\r\n        }\r\n    };\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n        setState({ ...state, userids: tmp, usernames: tmp2, userString: tmp3 });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">Create Project</h2>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"title\"\r\n                                                className=\"validate\"\r\n                                                value={state.title}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        title: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"title\">\r\n                                                ADD A TITLE\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a title\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    id=\"desc\"\r\n                                                    className=\"validate\"\r\n                                                    value={state.description}\r\n                                                    onChange={e =>\r\n                                                        setState({\r\n                                                            ...state,\r\n                                                            description:\r\n                                                                e.target.value,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"desc\">\r\n                                                    ADD A DESCRIPTION\r\n                                                </label>\r\n                                                <span\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\"Please enter a Description\"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                    <h3 className=\"white-text\">\r\n                                        Assign Personnel\r\n                                    </h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map((_val, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    {state.usernames[i]}\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>\r\n                                            Click to add/remove\r\n                                        </option>\r\n                                        {data!.getUsers!.map(\r\n                                            (_val, i, getUsers) => {\r\n                                                return (\r\n                                                    <option\r\n                                                        key={i}\r\n                                                        onClick={() => {\r\n                                                            addUser(\r\n                                                                getUsers[i].id,\r\n                                                                getUsers[i]\r\n                                                                    .username\r\n                                                            );\r\n                                                        }}\r\n                                                    >\r\n                                                        {getUsers[i].username}\r\n                                                    </option>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button\r\n                                className=\"btn left footerBtn modal-trigger modal-trigger\"\r\n                                data-target=\"cancelModal\"\r\n                            >\r\n                                Back\r\n                            </button>\r\n                            <button\r\n                                className=\"btn right safe-btn\"\r\n                                onClick={() => handleSubmit()}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                                Stay On Page\r\n                            </button>\r\n                            <button\r\n                                className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                CANCEL\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'project-manager' || user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    } \r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PmRoute;","import React from \"react\";\r\nimport {\r\n    useGetUserNotificationsQuery,\r\n    useSetReadMutation,\r\n    useDeleteNotificationMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Notifications: React.FC = () => {\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n    const [SET_READ] = useSetReadMutation();\r\n    const [DELETE_NOTIFICATION] = useDeleteNotificationMutation();\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Notifications</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Message</td>\r\n                                <td>Status</td>\r\n                                <td></td>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {data.getUserNotifications.map((_val, i) => {\r\n                                let current = data.getUserNotifications[i];\r\n                                let tmp = \"\";\r\n                                if (current.message.includes(\"*\")) {\r\n                                    tmp = current.message.slice(\r\n                                        current.message.indexOf(\"*\"),\r\n                                        current.message.length\r\n                                    );\r\n                                    if (tmp.includes(\"*T\")) {\r\n                                        let tmp2 = tmp.slice(\r\n                                            tmp.indexOf(\"T\") + 1,\r\n                                            tmp.length\r\n                                        );\r\n                                        tmp = `#/ticket-details:${tmp2}`;\r\n                                    }\r\n                                }\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>\r\n                                            {current.message.includes(\"*\") ? (\r\n                                                <>\r\n                                                    {current.message.slice(\r\n                                                        0,\r\n                                                        current.message.indexOf(\r\n                                                            \"*\"\r\n                                                        )\r\n                                                    )}\r\n                                                    <a href={tmp}>\r\n                                                        View details\r\n                                                    </a>\r\n                                                </>\r\n                                            ) : (\r\n                                                current.message\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {current.read ? \"Read\" : \"Unread\"}\r\n                                        </td>\r\n                                        <td>\r\n                                            {current.read ? null : (\r\n                                                <i\r\n                                                    className=\"material-icons green-text\"\r\n                                                    onClick={async () => {\r\n                                                        if (!current.read) {\r\n                                                            try {\r\n                                                                await SET_READ({\r\n                                                                    variables: {\r\n                                                                        ids: `${current.notificationId}`,\r\n                                                                    },\r\n                                                                });\r\n                                                            } catch (error) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Could not update notification\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html: `Error :>> ${error}`,\r\n                                                                });\r\n                                                            }\r\n                                                            window.location.reload();\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    check\r\n                                                </i>\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            <i\r\n                                                className=\"material-icons red-text\"\r\n                                                onClick={async () => {\r\n                                                    try {\r\n                                                        await DELETE_NOTIFICATION(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    notificationId:\r\n                                                                        current.notificationId,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n                                                    } catch {\r\n                                                        M.toast({\r\n                                                            html:\r\n                                                                \"Could not update notification\",\r\n                                                        });\r\n                                                    }\r\n                                                    window.location.reload();\r\n                                                }}\r\n                                            >\r\n                                                delete\r\n                                            </i>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notifications;\r\n","import AuthRoute from \"./authRoute\";\r\nimport AdminRoute from \"./adminRoute\";\r\nimport React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport { Dashboard } from \"../components/Dashboard/Dashboard\";\r\nimport { ManageRoles } from \"../components/manage/roles/Roles\";\r\nimport { ManageProjects } from \"../components/manage/projects/ManProjects\";\r\nimport { Projects } from \"../components/project/Projects\";\r\nimport { Tickets } from \"../components/tickets/Tickets\";\r\nimport { ProjectDetails } from \"../components/project/ProjectDetails\";\r\nimport { TicketDetails } from \"../components/tickets/TicketDetails\";\r\nimport { EditProject } from \"../components/project/EditProject\";\r\nimport { EditTicket } from \"../components/tickets/edit-ticket/EditTicket\";\r\nimport { AddTicketToProject } from \"../components/project/AddTicketToProject\";\r\nimport { CreateProject } from \"../components/project/create-project/CreateProject\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport PmRoute from \"./pmRoute\";\r\nimport TicketComments from \"../components/tickets/TicketComments\";\r\nimport Notifications from \"../components/Notifications\";\r\n\r\nexport const Routes: React.FC = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <AdminRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-roles\"\r\n                component={ManageRoles}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-projects\"\r\n                component={ManageProjects}\r\n            />\r\n            <AuthRoute exact path=\"/projects\" component={Projects} />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/create-project\"\r\n                component={CreateProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/edit-project:id\"\r\n                component={EditProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/project-add:id\"\r\n                component={AddTicketToProject}\r\n            />\r\n            <AuthRoute path=\"/project-details:id\" component={ProjectDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketComments} />\r\n            <AuthRoute path=\"/edit-ticket:id\" component={EditTicket} />\r\n            <AuthRoute exact path=\"/tickets\" component={Tickets} />\r\n            <AuthRoute exact path=\"/notifications\" component={Notifications} />\r\n            <Route render={() => <Redirect to=\"/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { useGetUserQuery } from \"./generated/graphql\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { Register } from \"./components/auth/Register\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { UI } from \"./components/UI\";\nimport { checkAuth } from \"./clientSideAuth/checkAuth.js\";\nimport { Routes } from \"./routes/Routes\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"./redux/actions/userActions\";\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch();\n    const { data, loading, error } = useGetUserQuery();\n\n    if (loading) {\n        return (\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n            </div>\n        );\n    } else if (!error && data) {\n        const user = data.getUser;\n        if (checkAuth()) {\n            if (user) {\n                dispatch(setUserInfo(user));\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <UI children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/register\" component={Register} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import { User, Project } from \"../RootReducer\";\r\n\r\n\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: 'ADD_USER_INFO', user: user\r\n    }\r\n}\r\n\r\nexport const passProjectInfo = (project: Project) => {\r\n    return {\r\n        type: 'PASS_PROJECT_INFO', project: project\r\n    }\r\n}","import App from \"./App\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport \"./css/dashboard.scss\";\r\nimport \"./css/login.scss\";\r\nimport \"./css/manage.scss\";\r\nimport \"./css/medias.scss\";\r\nimport \"./css/nav.scss\";\r\nimport PageLoader from \"./components/PageLoader\";\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        let tmp = localStorage.getItem(\"refreshToken\") as string;\r\n\r\n        fetch(`${URI}/refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"refreshToken\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        M.AutoInit();\r\n    }, [URI]);\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number,\r\n    email: string,\r\n    role: string,\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport type Project = {\r\n    title: string,\r\n    description: string,\r\n    projectid: number,\r\n}\r\n\r\nexport interface State {\r\n    user?: User\r\n    project?: Project\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: '',\r\n        role: '',\r\n        username: '',\r\n        firstname: '',\r\n        lastname: '',\r\n    },\r\n\r\n    project: {\r\n        title: '',\r\n        description: '',\r\n        projectid: 0,\r\n    }\r\n}\r\n\r\n\r\ntype Actions = {\r\n    user?: any,\r\n    type: string,\r\n    project: Project,\r\n}\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch(action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return {...state, user: action.user};\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return {...state, project: action.project}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { store } from \"./redux/ReduxStore\";\nimport { Provider } from \"react-redux\";\n\nconst cache = new InMemoryCache({});\nvar URI = \"\";\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nif (process.env.NODE_ENV === \"production\") {\n    URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\n} else {\n    URI = \"http://localhost:4000\";\n}\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <AppWrapper />\n            </Provider>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","export const setNavActives = user => {\r\n    const rmvActives = (ids: string[]) => {\r\n        ids.forEach((_val, i) => {\r\n            if (!!document.getElementById(ids[i])) {\r\n                document.getElementById(ids[i])!.classList.remove(\"active\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const addActives = (ids: string[]) => {\r\n        ids.forEach((_val, i) => {\r\n            if (!!document.getElementById(ids[i])) {\r\n                document.getElementById(ids[i])!.classList.add(\"active\");\r\n            }\r\n        });\r\n    };\r\n\r\n    rmvActives([\r\n        \"dashboard\",\r\n        \"mobile-dashboard\",\r\n        \"projects\",\r\n        \"mobile-projects\",\r\n        \"tickets\",\r\n        \"mobile-tickets\",\r\n    ]);\r\n\r\n    if (user.role === \"admin\") {\r\n        rmvActives([\"man-roles\", \"mobile-man-roles\"]);\r\n    }\r\n\r\n    if (user.role === \"project-manager\" || user.role === \"admin\") {\r\n        rmvActives([\"man-projects\", \"mobile-man-projects\"]);\r\n    }\r\n\r\n    let loc: string = `${window.location}`;\r\n    loc = loc.slice(loc.indexOf(\"#\"), loc.length);\r\n\r\n    switch (loc) {\r\n        case \"#/tickets\": {\r\n            addActives([\"tickets\", \"mobile-tickets\"]);\r\n            break;\r\n        }\r\n        case \"#/projects\": {\r\n            addActives([\"projects\", \"mobile-projects\"]);\r\n            break;\r\n        }\r\n        case \"#/manage-projects\": {\r\n            addActives([\"man-projects\", \"mobile-man-projects\"]);\r\n            break;\r\n        }\r\n        case \"#/manage-roles\": {\r\n            addActives([\"man-roles\", \"mobile-man-roles\"]);\r\n            break;\r\n        }\r\n        case \"#/dashboard\": {\r\n            addActives([\"dashboard\", \"mobile-dashboard\"]);\r\n            break;\r\n        }\r\n    }\r\n};\r\n","export const Sorting = () => {\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const sortByTitle = (arr: any, titleSwitch: string) => {\r\n        if (titleSwitch === \"0\") {\r\n            let titles = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                titles[i] = arr[i].title;\r\n                titles[i] = titles[i].toLowerCase();\r\n            });\r\n\r\n            titles.sort();\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].title.toLowerCase() !== titles[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let titles = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                titles[i] = arr[i].title;\r\n                titles[i] = titles[i].toLowerCase();\r\n            });\r\n\r\n            titles.sort();\r\n            titles.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].title.toLowerCase() !== titles[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortBySubmitter = (arr: any, submitterSwitch) => {\r\n        if (submitterSwitch === \"0\") {\r\n            let submitters = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                submitters[i] = arr[i].submitter;\r\n                submitters[i] = submitters[i].toLowerCase();\r\n            });\r\n\r\n            submitters.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].submitter.toLowerCase() !== submitters[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let submitters = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                submitters[i] = arr[i].submitter;\r\n                submitters[i] = submitters[i].toLowerCase();\r\n            });\r\n\r\n            submitters.sort();\r\n            submitters.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].submitter.toLowerCase() !== submitters[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortByDeveloper = (arr: any, developerSwitch) => {\r\n        if (developerSwitch === \"0\") {\r\n            let developers = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                developers[i] = arr[i].developer;\r\n                developers[i] = developers[i].toLowerCase();\r\n            });\r\n\r\n            developers.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].developer.toLowerCase() !== developers[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let developers = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                developers[i] = arr[i].developer;\r\n                developers[i] = developers[i].toLowerCase();\r\n            });\r\n\r\n            developers.sort();\r\n            developers.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].developer.toLowerCase() !== developers[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByPriority = (arr: any, prioritySwitch: string) => {\r\n        if (prioritySwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"high\" &&\r\n                        (arr[j - 1].priority === \"medium\" ||\r\n                            arr[j - 1].priority === \"low\")) ||\r\n                        (arr[j].priority === \"medium\" &&\r\n                            arr[j - 1].priority === \"low\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (prioritySwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"medium\" &&\r\n                        (arr[j - 1].priority === \"low\" ||\r\n                            arr[j - 1].priority === \"high\")) ||\r\n                        (arr[j].priority === \"low\" &&\r\n                            arr[j - 1].priority === \"high\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (prioritySwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"low\" &&\r\n                        (arr[j - 1].priority === \"high\" ||\r\n                            arr[j - 1].priority === \"medium\")) ||\r\n                        (arr[j].priority === \"high\" &&\r\n                            arr[j - 1].priority === \"medium\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByStatus = (arr: any, toggle: string) => {\r\n        if (toggle === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"open\" &&\r\n                        (arr[j - 1].status === \"on-hold\" ||\r\n                            arr[j - 1].status === \"closed\")) ||\r\n                        (arr[j].status === \"on-hold\" &&\r\n                            arr[j - 1].status === \"closed\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (!!arr && toggle === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"on-hold\" &&\r\n                        (arr[j - 1].status === \"closed\" ||\r\n                            arr[j - 1].status === \"open\")) ||\r\n                        (arr[j].status === \"closed\" &&\r\n                            arr[j - 1].status === \"open\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (!!arr && toggle === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"closed\" &&\r\n                        (arr[j - 1].status === \"open\" ||\r\n                            arr[j - 1].status === \"on-hold\")) ||\r\n                        (arr[j].status === \"open\" &&\r\n                            arr[j - 1].status === \"on-hold\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByType = (arr: any) => {\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (\r\n                j > 0 &&\r\n                arr[j].type === \"features\" &&\r\n                arr[j - 1].type === \"bugs/errors\"\r\n            ) {\r\n                let tmp = arr.slice(j - 1, j + 1);\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    const usernameSort = (arr: any, usernameSwitch: string) => {\r\n        if (usernameSwitch === \"0\") {\r\n            let usernames = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                usernames[i] = arr[i].username;\r\n                usernames[i] = usernames[i].toLowerCase();\r\n            });\r\n\r\n            usernames.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].username.toLowerCase() !== usernames[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let usernames = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                usernames[i] = arr[i].username;\r\n                usernames[i] = usernames[i].toLowerCase();\r\n            });\r\n\r\n            usernames.sort();\r\n            usernames.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].username.toLowerCase() !== usernames[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = i;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const emailSort = (arr: any, emailSwitch: string) => {\r\n        if (emailSwitch === \"0\") {\r\n            let emails = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                emails[i] = arr[i].email;\r\n                emails[i] = emails[i].toLowerCase();\r\n            });\r\n\r\n            emails.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].email) {\r\n                    while (arr[i].email.toLowerCase() !== emails[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else if (emailSwitch === \"1\") {\r\n            let emails = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                emails[i] = arr[i].email;\r\n                emails[i] = emails[i].toLowerCase();\r\n            });\r\n\r\n            emails.sort();\r\n            emails.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].email) {\r\n                    while (arr[i].email.toLowerCase() !== emails[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const roleSort = (arr: any, roleSwitch: string) => {\r\n        if (roleSwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"admin\" &&\r\n                        (arr[j - 1].role === \"project-manager\" ||\r\n                            arr[j - 1].role === \"developer\")) ||\r\n                        (arr[j].role === \"project-manager\" &&\r\n                            arr[j - 1].role === \"developer\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (roleSwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"project-manager\" &&\r\n                        (arr[j - 1].role === \"developer\" ||\r\n                            arr[j - 1].role === \"admin\")) ||\r\n                        (arr[j].role === \"developer\" &&\r\n                            arr[j - 1].role === \"admin\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (roleSwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"developer\" &&\r\n                        (arr[j - 1].role === \"admin\" ||\r\n                            arr[j - 1].role === \"project-manager\")) ||\r\n                        (arr[j].role === \"admin\" &&\r\n                            arr[j - 1].role === \"project-manager\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const firstnameSort = (arr: any, fnameSwitch) => {\r\n        if (fnameSwitch === \"0\") {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].firstname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].firstname) {\r\n                    while (arr[i].firstname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].firstname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n            names.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].firstname) {\r\n                    while (arr[i].firstname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const lastnameSort = (arr: any, lnameSwitch) => {\r\n        if (lnameSwitch === \"0\") {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].lastname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].lastname) {\r\n                    while (arr[i].lastname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].lastname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n            names.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].lastname) {\r\n                    while (arr[i].lastname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = i;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        pagination,\r\n        sortByTitle,\r\n        sortBySubmitter,\r\n        sortByDeveloper,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n        usernameSort,\r\n        roleSort,\r\n        emailSort,\r\n        firstnameSort,\r\n        lastnameSort,\r\n    };\r\n};\r\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<ProjectData>;\n  getProjectDataById: Array<ProjectData>;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<TicketData>;\n  getTicketDataById: Array<TicketData>;\n  getUserTickets: Array<UserTicketsPlus>;\n  getTicketProject: Array<ProjectsTickets>;\n  getComments: Array<Comments>;\n  getHistory: Array<History>;\n  getUserNotifications: Array<Notifications>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type QueryGetCommentsArgs = {\n  parentid: Scalars['Float'];\n};\n\n\nexport type QueryGetHistoryArgs = {\n  parentid: Scalars['Float'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type ProjectData = {\n  __typename?: 'ProjectData';\n  projectid?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  id: Scalars['Int'];\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n};\n\nexport type TicketData = {\n  __typename?: 'TicketData';\n  ticketid: Scalars['Int'];\n  priority?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid?: Maybe<Scalars['Int']>;\n  title: Scalars['String'];\n  userid?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectsTickets = {\n  __typename?: 'ProjectsTickets';\n  id: Scalars['Int'];\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Comments = {\n  __typename?: 'Comments';\n  commentid: Scalars['Int'];\n  comment: Scalars['String'];\n  parentid: Scalars['Int'];\n  commenterid: Scalars['Int'];\n  commenter: Scalars['String'];\n  createdAt: Scalars['String'];\n};\n\nexport type History = {\n  __typename?: 'History';\n  id: Scalars['Int'];\n  parentid: Scalars['Int'];\n  propertyChanged: Scalars['String'];\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  dateChanged: Scalars['String'];\n};\n\nexport type Notifications = {\n  __typename?: 'Notifications';\n  notificationId: Scalars['Int'];\n  message: Scalars['String'];\n  read: Scalars['Boolean'];\n  userId: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: AuthResponse;\n  register: AuthResponse;\n  logout: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  demoLogin: AuthResponse;\n  addProject: Scalars['Boolean'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n  addComment: Scalars['Boolean'];\n  deleteComment: Scalars['Boolean'];\n  updateComment: Scalars['Boolean'];\n  addTicketHistory: Scalars['Boolean'];\n  addNotification: Scalars['Boolean'];\n  setRead: Scalars['Boolean'];\n  deleteNotification: Scalars['Boolean'];\n  sendNot_CreateTicket: Scalars['Boolean'];\n  sendNot_CreateComment: Scalars['Boolean'];\n  sendNotificationByUsername: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  userid: Scalars['String'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsTo: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationAddCommentArgs = {\n  parentid: Scalars['Float'];\n  comment: Scalars['String'];\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationUpdateCommentArgs = {\n  updatedMessage: Scalars['String'];\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationAddTicketHistoryArgs = {\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  propertyChanged: Scalars['String'];\n  parentid: Scalars['Float'];\n};\n\n\nexport type MutationAddNotificationArgs = {\n  userId: Scalars['String'];\n  message: Scalars['String'];\n};\n\n\nexport type MutationSetReadArgs = {\n  ids: Scalars['String'];\n};\n\n\nexport type MutationDeleteNotificationArgs = {\n  notificationId: Scalars['Float'];\n};\n\n\nexport type MutationSendNot_CreateTicketArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSendNot_CreateCommentArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSendNotificationByUsernameArgs = {\n  username: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type AddCommentMutationVariables = Exact<{\n  comment: Scalars['String'];\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type AddCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addComment'>\n);\n\nexport type AddNotificationMutationVariables = Exact<{\n  message: Scalars['String'];\n  userId: Scalars['String'];\n}>;\n\n\nexport type AddNotificationMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addNotification'>\n);\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type AddTicketHistoryMutationVariables = Exact<{\n  parentid: Scalars['Float'];\n  propertyChanged: Scalars['String'];\n  newValue: Scalars['String'];\n  oldValue: Scalars['String'];\n}>;\n\n\nexport type AddTicketHistoryMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTicketHistory'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsTo: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n}>;\n\n\nexport type DeleteCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteComment'>\n);\n\nexport type DeleteNotificationMutationVariables = Exact<{\n  notificationId: Scalars['Float'];\n}>;\n\n\nexport type DeleteNotificationMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteNotification'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type GetCommentsQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetCommentsQuery = (\n  { __typename?: 'Query' }\n  & { getComments: Array<(\n    { __typename?: 'Comments' }\n    & Pick<Comments, 'commentid' | 'comment' | 'commenter' | 'createdAt'>\n  )> }\n);\n\nexport type GetHistoryQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetHistoryQuery = (\n  { __typename?: 'Query' }\n  & { getHistory: Array<(\n    { __typename?: 'History' }\n    & Pick<History, 'id' | 'propertyChanged' | 'oldValue' | 'newValue' | 'dateChanged'>\n  )> }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'projectid' | 'description'>\n  )> }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'ProjectsTickets' }\n    & Pick<ProjectsTickets, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )> }\n);\n\nexport type GetUserNotificationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserNotificationsQuery = (\n  { __typename?: 'Query' }\n  & { getUserNotifications: Array<(\n    { __typename?: 'Notifications' }\n    & Pick<Notifications, 'notificationId' | 'message' | 'read' | 'userId'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'title' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SendNot_CreateCommentMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type SendNot_CreateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNot_CreateComment'>\n);\n\nexport type SendNot_CreateTicketMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SendNot_CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNot_CreateTicket'>\n);\n\nexport type SendNotificationByUsernameMutationVariables = Exact<{\n  message: Scalars['String'];\n  username: Scalars['String'];\n}>;\n\n\nexport type SendNotificationByUsernameMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNotificationByUsername'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetReadMutationVariables = Exact<{\n  ids: Scalars['String'];\n}>;\n\n\nexport type SetReadMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setRead'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n  updatedMessage: Scalars['String'];\n}>;\n\n\nexport type UpdateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateComment'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddCommentDocument = gql`\n    mutation addComment($comment: String!, $parentid: Float!) {\n  addComment(comment: $comment, parentid: $parentid)\n}\n    `;\nexport type AddCommentMutationFn = ApolloReactCommon.MutationFunction<AddCommentMutation, AddCommentMutationVariables>;\n\n/**\n * __useAddCommentMutation__\n *\n * To run a mutation, you first call `useAddCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommentMutation, { data, loading, error }] = useAddCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useAddCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommentMutation, AddCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommentMutation, AddCommentMutationVariables>(AddCommentDocument, baseOptions);\n      }\nexport type AddCommentMutationHookResult = ReturnType<typeof useAddCommentMutation>;\nexport type AddCommentMutationResult = ApolloReactCommon.MutationResult<AddCommentMutation>;\nexport type AddCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommentMutation, AddCommentMutationVariables>;\nexport const AddNotificationDocument = gql`\n    mutation addNotification($message: String!, $userId: String!) {\n  addNotification(message: $message, userId: $userId)\n}\n    `;\nexport type AddNotificationMutationFn = ApolloReactCommon.MutationFunction<AddNotificationMutation, AddNotificationMutationVariables>;\n\n/**\n * __useAddNotificationMutation__\n *\n * To run a mutation, you first call `useAddNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNotificationMutation, { data, loading, error }] = useAddNotificationMutation({\n *   variables: {\n *      message: // value for 'message'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useAddNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddNotificationMutation, AddNotificationMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddNotificationMutation, AddNotificationMutationVariables>(AddNotificationDocument, baseOptions);\n      }\nexport type AddNotificationMutationHookResult = ReturnType<typeof useAddNotificationMutation>;\nexport type AddNotificationMutationResult = ApolloReactCommon.MutationResult<AddNotificationMutation>;\nexport type AddNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<AddNotificationMutation, AddNotificationMutationVariables>;\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: String!, $userid: String!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const AddTicketHistoryDocument = gql`\n    mutation addTicketHistory($parentid: Float!, $propertyChanged: String!, $newValue: String!, $oldValue: String!) {\n  addTicketHistory(parentid: $parentid, propertyChanged: $propertyChanged, newValue: $newValue, oldValue: $oldValue)\n}\n    `;\nexport type AddTicketHistoryMutationFn = ApolloReactCommon.MutationFunction<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\n\n/**\n * __useAddTicketHistoryMutation__\n *\n * To run a mutation, you first call `useAddTicketHistoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTicketHistoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTicketHistoryMutation, { data, loading, error }] = useAddTicketHistoryMutation({\n *   variables: {\n *      parentid: // value for 'parentid'\n *      propertyChanged: // value for 'propertyChanged'\n *      newValue: // value for 'newValue'\n *      oldValue: // value for 'oldValue'\n *   },\n * });\n */\nexport function useAddTicketHistoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>(AddTicketHistoryDocument, baseOptions);\n      }\nexport type AddTicketHistoryMutationHookResult = ReturnType<typeof useAddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationResult = ApolloReactCommon.MutationResult<AddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsTo: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsTo: $belongsTo)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsTo: // value for 'belongsTo'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteCommentDocument = gql`\n    mutation deleteComment($commentid: Float!) {\n  deleteComment(commentid: $commentid)\n}\n    `;\nexport type DeleteCommentMutationFn = ApolloReactCommon.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;\n\n/**\n * __useDeleteCommentMutation__\n *\n * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *   },\n * });\n */\nexport function useDeleteCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, baseOptions);\n      }\nexport type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;\nexport type DeleteCommentMutationResult = ApolloReactCommon.MutationResult<DeleteCommentMutation>;\nexport type DeleteCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;\nexport const DeleteNotificationDocument = gql`\n    mutation deleteNotification($notificationId: Float!) {\n  deleteNotification(notificationId: $notificationId)\n}\n    `;\nexport type DeleteNotificationMutationFn = ApolloReactCommon.MutationFunction<DeleteNotificationMutation, DeleteNotificationMutationVariables>;\n\n/**\n * __useDeleteNotificationMutation__\n *\n * To run a mutation, you first call `useDeleteNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteNotificationMutation, { data, loading, error }] = useDeleteNotificationMutation({\n *   variables: {\n *      notificationId: // value for 'notificationId'\n *   },\n * });\n */\nexport function useDeleteNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteNotificationMutation, DeleteNotificationMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteNotificationMutation, DeleteNotificationMutationVariables>(DeleteNotificationDocument, baseOptions);\n      }\nexport type DeleteNotificationMutationHookResult = ReturnType<typeof useDeleteNotificationMutation>;\nexport type DeleteNotificationMutationResult = ApolloReactCommon.MutationResult<DeleteNotificationMutation>;\nexport type DeleteNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteNotificationMutation, DeleteNotificationMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: String!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($userid: String!) {\n  deleteUser(userid: $userid)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetCommentsDocument = gql`\n    query getComments($parentid: Float!) {\n  getComments(parentid: $parentid) {\n    commentid\n    comment\n    commenter\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetCommentsQuery__\n *\n * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCommentsQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n      }\nexport function useGetCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n        }\nexport type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;\nexport type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;\nexport type GetCommentsQueryResult = ApolloReactCommon.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;\nexport const GetHistoryDocument = gql`\n    query getHistory($parentid: Float!) {\n  getHistory(parentid: $parentid) {\n    id\n    propertyChanged\n    oldValue\n    newValue\n    dateChanged\n  }\n}\n    `;\n\n/**\n * __useGetHistoryQuery__\n *\n * To run a query within a React component, call `useGetHistoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetHistoryQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetHistoryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n      }\nexport function useGetHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n        }\nexport type GetHistoryQueryHookResult = ReturnType<typeof useGetHistoryQuery>;\nexport type GetHistoryLazyQueryHookResult = ReturnType<typeof useGetHistoryLazyQuery>;\nexport type GetHistoryQueryResult = ApolloReactCommon.QueryResult<GetHistoryQuery, GetHistoryQueryVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($id: String!) {\n  getTicketDataById(id: $id) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserNotificationsDocument = gql`\n    query getUserNotifications {\n  getUserNotifications {\n    notificationId\n    message\n    read\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetUserNotificationsQuery__\n *\n * To run a query within a React component, call `useGetUserNotificationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserNotificationsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserNotificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>(GetUserNotificationsDocument, baseOptions);\n      }\nexport function useGetUserNotificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>(GetUserNotificationsDocument, baseOptions);\n        }\nexport type GetUserNotificationsQueryHookResult = ReturnType<typeof useGetUserNotificationsQuery>;\nexport type GetUserNotificationsLazyQueryHookResult = ReturnType<typeof useGetUserNotificationsLazyQuery>;\nexport type GetUserNotificationsQueryResult = ApolloReactCommon.QueryResult<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    title\n    userid\n    id\n    priority\n    type\n    status\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: String!, $projectid: String!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SendNot_CreateCommentDocument = gql`\n    mutation sendNot_CreateComment($ticketid: String!) {\n  sendNot_CreateComment(ticketid: $ticketid)\n}\n    `;\nexport type SendNot_CreateCommentMutationFn = ApolloReactCommon.MutationFunction<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>;\n\n/**\n * __useSendNot_CreateCommentMutation__\n *\n * To run a mutation, you first call `useSendNot_CreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNot_CreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotCreateCommentMutation, { data, loading, error }] = useSendNot_CreateCommentMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useSendNot_CreateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>(SendNot_CreateCommentDocument, baseOptions);\n      }\nexport type SendNot_CreateCommentMutationHookResult = ReturnType<typeof useSendNot_CreateCommentMutation>;\nexport type SendNot_CreateCommentMutationResult = ApolloReactCommon.MutationResult<SendNot_CreateCommentMutation>;\nexport type SendNot_CreateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>;\nexport const SendNot_CreateTicketDocument = gql`\n    mutation sendNot_CreateTicket($projectid: String!) {\n  sendNot_CreateTicket(projectid: $projectid)\n}\n    `;\nexport type SendNot_CreateTicketMutationFn = ApolloReactCommon.MutationFunction<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>;\n\n/**\n * __useSendNot_CreateTicketMutation__\n *\n * To run a mutation, you first call `useSendNot_CreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNot_CreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotCreateTicketMutation, { data, loading, error }] = useSendNot_CreateTicketMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSendNot_CreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>(SendNot_CreateTicketDocument, baseOptions);\n      }\nexport type SendNot_CreateTicketMutationHookResult = ReturnType<typeof useSendNot_CreateTicketMutation>;\nexport type SendNot_CreateTicketMutationResult = ApolloReactCommon.MutationResult<SendNot_CreateTicketMutation>;\nexport type SendNot_CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>;\nexport const SendNotificationByUsernameDocument = gql`\n    mutation sendNotificationByUsername($message: String!, $username: String!) {\n  sendNotificationByUsername(message: $message, username: $username)\n}\n    `;\nexport type SendNotificationByUsernameMutationFn = ApolloReactCommon.MutationFunction<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>;\n\n/**\n * __useSendNotificationByUsernameMutation__\n *\n * To run a mutation, you first call `useSendNotificationByUsernameMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNotificationByUsernameMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotificationByUsernameMutation, { data, loading, error }] = useSendNotificationByUsernameMutation({\n *   variables: {\n *      message: // value for 'message'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useSendNotificationByUsernameMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>(SendNotificationByUsernameDocument, baseOptions);\n      }\nexport type SendNotificationByUsernameMutationHookResult = ReturnType<typeof useSendNotificationByUsernameMutation>;\nexport type SendNotificationByUsernameMutationResult = ApolloReactCommon.MutationResult<SendNotificationByUsernameMutation>;\nexport type SendNotificationByUsernameMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetReadDocument = gql`\n    mutation setRead($ids: String!) {\n  setRead(ids: $ids)\n}\n    `;\nexport type SetReadMutationFn = ApolloReactCommon.MutationFunction<SetReadMutation, SetReadMutationVariables>;\n\n/**\n * __useSetReadMutation__\n *\n * To run a mutation, you first call `useSetReadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetReadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setReadMutation, { data, loading, error }] = useSetReadMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useSetReadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetReadMutation, SetReadMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetReadMutation, SetReadMutationVariables>(SetReadDocument, baseOptions);\n      }\nexport type SetReadMutationHookResult = ReturnType<typeof useSetReadMutation>;\nexport type SetReadMutationResult = ApolloReactCommon.MutationResult<SetReadMutation>;\nexport type SetReadMutationOptions = ApolloReactCommon.BaseMutationOptions<SetReadMutation, SetReadMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateCommentDocument = gql`\n    mutation updateComment($commentid: Float!, $updatedMessage: String!) {\n  updateComment(commentid: $commentid, updatedMessage: $updatedMessage)\n}\n    `;\nexport type UpdateCommentMutationFn = ApolloReactCommon.MutationFunction<UpdateCommentMutation, UpdateCommentMutationVariables>;\n\n/**\n * __useUpdateCommentMutation__\n *\n * To run a mutation, you first call `useUpdateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCommentMutation, { data, loading, error }] = useUpdateCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *      updatedMessage: // value for 'updatedMessage'\n *   },\n * });\n */\nexport function useUpdateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCommentMutation, UpdateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument, baseOptions);\n      }\nexport type UpdateCommentMutationHookResult = ReturnType<typeof useUpdateCommentMutation>;\nexport type UpdateCommentMutationResult = ApolloReactCommon.MutationResult<UpdateCommentMutation>;\nexport type UpdateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCommentMutation, UpdateCommentMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let UsersArray = data.getUsers;\r\n        return UsersArray;\r\n    }\r\n};\r\n","export const JsFooterStyling = () => {\r\n    if( window.innerWidth !== undefined ) {\r\n        if(window.innerWidth < 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.add('hide');\r\n                document!.getElementById('deleteBtn')!.classList.remove('center');\r\n                document!.getElementById('deleteBtn')!.classList.add('left');\r\n                document!.getElementById('deleteBtn')!.classList.add('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.add('btn-ex-40');\r\n            }\r\n\r\n        }\r\n        if(window.innerWidth > 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.remove('hide');\r\n                document!.getElementById('deleteBtn')!.classList.add('center');\r\n                document!.getElementById('deleteBtn')!.classList.remove('left');\r\n                document!.getElementById('deleteBtn')!.classList.remove('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.remove('btn-ex-40');\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/unnamed.a812fbf5.webp\";","import React, { useState } from \"react\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport M from \"materialize-css\";\r\nimport {\r\n    useAddCommentMutation,\r\n    useGetCommentsQuery,\r\n    useDeleteCommentMutation,\r\n    useUpdateCommentMutation,\r\n    useSendNot_CreateCommentMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst TicketComments: React.FC = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n\r\n    const [ADD_COMMENT] = useAddCommentMutation();\r\n    const [DELETE_COMMENT] = useDeleteCommentMutation();\r\n    const [UPDATE_COMMENT] = useUpdateCommentMutation();\r\n    const [SEND_NOTIFICATION] = useSendNot_CreateCommentMutation();\r\n    const { data, loading } = useGetCommentsQuery({ variables: { parentid } });\r\n    const [comment, setComment] = useState(\"\");\r\n    const addComment = async () => {\r\n        if (comment.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await ADD_COMMENT({\r\n                variables: {\r\n                    comment,\r\n                    parentid,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                try {\r\n                    await SEND_NOTIFICATION({\r\n                        variables: {\r\n                            ticketid: `${parentid}`,\r\n                        },\r\n                    });\r\n                    M.toast({ html: \"Comment added successfully\" });\r\n                    M.toast({ html: \"Reloading\" });\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                    }, 1000);\r\n                } catch {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteComment = async (commentid: number) => {\r\n        if (!!commentid) {\r\n            let tmp = await DELETE_COMMENT({ variables: { commentid } });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Deleted Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n    const updateComment = async (commentid: number, updatedMessage: string) => {\r\n        if (updatedMessage.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await UPDATE_COMMENT({\r\n                variables: {\r\n                    commentid,\r\n                    updatedMessage,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Updated Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let comments: any = data?.getComments;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            Comments for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Commenter</th>\r\n                                    <th>Comment</th>\r\n                                    <th className=\"nonessen\">Created At</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n\r\n                                {comments.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].commenter}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].comment}\r\n                                            </td>\r\n                                            <td className=\"capitalize nonessen\">\r\n                                                {comments[i].createdAt}\r\n                                            </td>\r\n                                            <td>\r\n                                                <i\r\n                                                    className=\"material-icons red-text\"\r\n                                                    onClick={() =>\r\n                                                        deleteComment(\r\n                                                            comments[i]\r\n                                                                .commentid\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    delete\r\n                                                </i>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"comment\"\r\n                                    type=\"text\"\r\n                                    value={comment}\r\n                                    onChange={e => setComment(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"comment\">Add A Comment</label>\r\n                                <button\r\n                                    className=\"btn btn-ex safe-btn center footerBtn\"\r\n                                    onClick={() => addComment()}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketComments;\r\n"],"sourceRoot":""}