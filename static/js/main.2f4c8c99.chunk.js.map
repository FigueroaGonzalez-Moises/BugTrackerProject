{"version":3,"sources":["components/manage/ManRoles.tsx","accessToken.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/Sidenav.tsx","components/MobileSideNav.tsx","components/UI.tsx","clientSideAuth/checkAuth.js","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabs.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/Dashboard.tsx","components/manage/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/tickets/TicDetailsSubCom.tsx","components/tickets/Tickets.tsx","components/GetLocation.ts","components/project/ProjectTickets.tsx","components/project/ProjectAssigned.tsx","components/project/ProjectDetails.tsx","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAss.tsx","components/project/edit-project/EditPTTable.tsx","css/JsStyling.ts","components/project/EditProject.tsx","components/tickets/edit-ticket/DevSub.tsx","components/tickets/edit-ticket/ProjectDD.tsx","components/tickets/edit-ticket/ProjectDDWrapper.tsx","components/tickets/edit-ticket/AssignProject.tsx","components/tickets/edit-ticket/EditTicket.tsx","components/tickets/useGetUsers.tsx","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","routes/pmRoute.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","generated/graphql.tsx","img/unnamed.webp"],"names":["ManageRoles","useGetUsersQuery","data","loading","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","useState","paginationLower","paginationUpper","limit","state","setState","useEffect","elems","document","querySelectorAll","M","Sidenav","init","className","setRole","e","i","a","target","role","value","id","getUsers","variables","window","location","reload","pagination","els","getElementsByClassName","el","classList","remove","getElementById","add","deleteUser","userid","name","toast","html","map","_val","eval","key","username","email","disabled","selected","onClick","firstname","lastname","type","min","max","onChange","length","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","useLoginMutation","login","useDemoLoginMutation","demoLogin","URI","Dropdown","submitForm","preventDefault","fetch","method","credentials","then","res","status","noCookies","response2","localStorage","setItem","refreshToken","console","log","demoUser","response","htmlFor","data-error","href","data-target","Register","history","setUsername","setFirstname","setLastname","useRegisterMutation","register","push","N","user","useSelector","loc","pathname","src","UserImage","alt","MobileSideNav","UI","children","useLogoutMutation","LOGOUT","client","hover","logout","resetStore","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","AdminRoute","error","changeIndicatorC","color","t","changeIndicatorT","subt","subt2","DashboardTabs","LStitle","getItem","split","title","setTitle","chart","chartData","userTickets","useGetUserTicketsQuery","getUserTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","tmp","val","labels","datasets","label","backgroundColor","borderWidth","JSON","stringify","myTicketsByP","h","m","l","priority","myTicketsByS","o","c","TicketsByP","TicketsByS","TicketsByT","Dashboard","LSname","LSchart","LSdata","parse","Cards","setChart","AutoInit","FloatingActionButton","hoverEnabled","Tooltip","position","setChartType","data-postion","data-tooltip","style","backgroundImage","temp","t1","concat","AddCard","options","responsive","ManageProjects","useGetProjectDataQuery","getProjectData","projectId","projectid","description","DetailsSubCom","useGetProjectDataByIdQuery","keyprop","getProjectDataById","Projects","useGetUserProjectsQuery","getUserProjects","TicDetailsSubCom","useGetTicketDataByIdQuery","UserTickets","ticketid","getTicketDataById","developer","Tickets","arr","j","slice","reverse","sortTicketsByPriority","GetLocation","useLocation","ProjectTickets","useGetProjectTicketsQuery","getProjectTickets","submitter","ProjectAssigned","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","useHistory","goBack","TicketDetails","ticket","belongsto","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","PROJECT_ID","assigned","FormSelect","modPersonnel","EditAss","EditPTTable","JsFooterStyling","undefined","innerWidth","EditProject","pTitle","pDesc","useSetProjectDescMutation","setDesc","useSetProjectTitleMutation","useDeleteProjectMutation","delProj","Modal","onresize","updateProject","deleteProject","DevSub","useSetTicketDeveloperMutation","setDeveloper","dev","setDev","ProjectDD","ProjectDDWrapper","useGetTicketProjectQuery","getTicketProject","AssignProject","useSetTicketProjectMutation","SetTicketProject","project","setProject","EditTicket","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","useSetTicketDescMutation","useSetTicketPriorityMutation","setPriority","useDeleteTicketMutation","DeleteThisTicket","new","setTicketStatus","setTicketType","setTicketPriority","updateTicket","desc","deleteTicket","replace","useGetUsers","UsersArray","AddTicketToProject","useCreateTicketMutation","Submit","handleSubmit","toggle","belongsTo","SetTicketDev","CreateProject","useAddProjectMutation","SUBMIT","userids","usernames","userString","tmp2","indexOf","shift","q","q2","tmp3","PmRoute","Routes","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","headers","json","catch","err","initState","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","AddProjectDocument","gql","baseOptions","ApolloReactHooks","AddProjectUserDocument","CreateTicketDocument","DeleteProjectDocument","DeleteTicketDocument","DeleteUserDocument","DemoLoginDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTicketDataByIdDocument","GetTicketProjectDocument","GetTicketsDocument","GetUserDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","LogoutDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SetProjectDescDocument","SetProjectTitleDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateRoleDocument","GetUsersDocument","module","exports"],"mappings":"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","file":"static/js/main.2f4c8c99.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useGetUsersQuery, useUpdateRoleMutation, useDeleteUserMutation } from '../../generated/graphql';\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const {data, loading } = useGetUsersQuery();\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n    const [state, setState] = useState({\r\n        paginationLower: '1',\r\n        paginationUpper: '1', \r\n        limit: '4'\r\n    })\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if( loading || !data) {\r\n        return (\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    } \r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n        if(!id || !role) {\r\n\r\n        } else {\r\n\r\n            await updateRole({\r\n                variables: {\r\n                    role,\r\n                    id\r\n                }\r\n            });\r\n\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName('pag-active')\r\n        for( const el of els as unknown as any[] ) {\r\n            el.classList.remove('active');\r\n            el.classList.remove('pag-active');\r\n        }\r\n        if(!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add('active');\r\n            document.getElementById(`${id}li`)!.classList.add('pag-active');\r\n        }\r\n        setState({ ...state, paginationLower: id, paginationUpper: id });\r\n    }\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let userid = target.name;\r\n        let tmp = await DELETEUSER({\r\n            variables: {\r\n                userid\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: 'Error occurred while deleting user'});\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text\">Manage Roles</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>UserName</th>\r\n                                <th className = \"nonessen\">Email</th>\r\n                                <th className = \"nonessen\">Role</th> \r\n                                <th className = \"nonessen\">First Name</th>\r\n                                <th className = \"nonessen\">Last Name</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            { data!.getUsers!.map( (_val, i: number ) => {\r\n                                if( eval(`(${state.paginationLower} - 1) *${state.limit}`) < i && i <= eval(`${state.paginationUpper}*${state.limit}`)) {\r\n                                    return(\r\n                                        <tr key = {i}>\r\n                                            <td>{data!.getUsers![i].username}</td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].email}</td>\r\n                                            <td>\r\n                                                <div className=\"input-field col s12\">\r\n                                                    <select className = \"browser-default capitalize\">\r\n                                                        <option value=\"\" className = \"capitalize\" disabled selected>{data!.getUsers![i].role}</option>\r\n                                                        <option value = {`admin`} onClick = { (e) => { setRole(e, i) } }>  Admin </option>\r\n                                                        <option value = {`developer`} onClick = { (e) => { setRole(e, i) } }>  Developer </option>\r\n                                                        <option value = {`project-manager`} onClick = { (e) => { setRole(e, i) } }>  Project-manager </option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].firstname}</td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].lastname}</td>\r\n                                            <td><button name = {`${data!.getUsers![i].id}`}onClick = { (e) => { deleteUser(e)} }>Delete</button></td>\r\n                                        </tr>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        null\r\n                                    );\r\n                                }\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                        Page Limit:\r\n                        <input className = \"browser-default pagination-input\" id=\"email_inline\" type=\"number\" min = \"1\" max = \"100\" value = {state.limit} onChange = { (e) => { setState({...state, limit: e.target.value }) } }/>\r\n                    <ul className = \"pagination noselect\">\r\n                        { data.getUsers!.map( (_val, i) => {\r\n                            if( i - 1 < eval(`${data.getUsers!.length}/${state.limit}`) ) {\r\n                                if(i === 1) {\r\n                                    return(\r\n                                        <li key = {i} className = 'active pag-active' id = {`${i}li`}>\r\n                                            <a id = {`${i}`} onClick = { (e) => { pagination(e) } }>{i}</a>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                                if(i !== 0) {\r\n                                    return(\r\n                                        <li key = {i} id = {`${i}li`}>\r\n                                            <a id = {`${i}`} onClick = { (e) => { pagination(e) } }>{i}</a>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            } else {\r\n                                return(\r\n                                    <>\r\n                                    </>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useLoginMutation,\r\n    useDemoLoginMutation,\r\n} from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { getAccessToken, setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Login: React.FC<RouteComponentProps> = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async (e: any) => {\r\n        e.preventDefault();\r\n        try {\r\n            if (email.length > 1 && password.length > 1) {\r\n                // const response = await login({\r\n                //     variables: {\r\n                //         email,\r\n                //         password,\r\n                //     },\r\n                // });\r\n\r\n                // if (response && response.data) {\r\n                //     setAccessToken(response.data.login.accessToken);\r\n                // }\r\n\r\n                // if (getAccessToken() !== \"\") {\r\n                await fetch(`${URI}/check-refresh=token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                }).then(async res => {\r\n                    if (res.status === 499) {\r\n                        const response2 = await login({\r\n                            variables: {\r\n                                email: email,\r\n                                password: password,\r\n                                noCookies: true,\r\n                            },\r\n                        });\r\n\r\n                        if (response2 && response2.data) {\r\n                            setAccessToken(response2.data.login.accessToken);\r\n                            localStorage.setItem(\r\n                                \"refreshToken\",\r\n                                response2.data.login.refreshToken\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n                // }\r\n                window.location.reload();\r\n            } else if (password.length < 1 && email.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            } else if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n        } catch (error) {\r\n            console.log(\"error :>> \", error);\r\n        }\r\n    };\r\n\r\n    const demoUser = async (e: React.SyntheticEvent, role: string) => {\r\n        e.preventDefault();\r\n        const response = await demoLogin({\r\n            variables: {\r\n                role,\r\n            },\r\n        });\r\n\r\n        if (response && response.data) {\r\n            setAccessToken(response.data.demoLogin.accessToken);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                    onClick={e => submitForm(e)}\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </a>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"dd\")!\r\n                                        .classList.remove(\"hide\");\r\n                                }}\r\n                            >\r\n                                Demo User\r\n                            </button>\r\n                            <span\r\n                                className=\"dropdown-trigger btn stretched manage-dropdown hide\"\r\n                                id=\"dd\"\r\n                                data-target=\"dropdownRole\"\r\n                            >\r\n                                Role\r\n                            </span>\r\n                            <ul id=\"dropdownRole\" className=\"dropdown-content\">\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"admin\");\r\n                                        }}\r\n                                    >\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"developer\");\r\n                                        }}\r\n                                    >\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"project-manager\");\r\n                                        }}\r\n                                    >\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <span className=\"centered\">\r\n                                <div>\r\n                                    <u>\r\n                                        <a href=\"#/register\">Sign Up Here</a>\r\n                                    </u>\r\n                                </div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useRegisterMutation } from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { getAccessToken, setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [register] = useRegisterMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async () => {\r\n        if (\r\n            email.length > 1 &&\r\n            password.length > 1 &&\r\n            username.length > 1 &&\r\n            firstname.length > 1 &&\r\n            lastname.length > 1\r\n        ) {\r\n            let response = await register({\r\n                variables: {\r\n                    email,\r\n                    password,\r\n                    username,\r\n                    role,\r\n                    firstname,\r\n                    lastname,\r\n                },\r\n            });\r\n\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.register.accessToken);\r\n            }\r\n\r\n            if (getAccessToken() !== \"\") {\r\n                await fetch(`${URI}/check-refresh-token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                }).then(async res => {\r\n                    if (res.status === 499) {\r\n                        const response2 = await register({\r\n                            variables: {\r\n                                email,\r\n                                password,\r\n                                username,\r\n                                role,\r\n                                firstname,\r\n                                lastname,\r\n                                noCookies: true,\r\n                            },\r\n                        });\r\n\r\n                        if (response2 && response2.data) {\r\n                            setAccessToken(response2.data.register.accessToken);\r\n                            localStorage.setItem(\r\n                                \"refreshToken\",\r\n                                response2.data.register.refreshToken\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            history.push(\"/\");\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById(\"username\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById(\"firstname\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById(\"lastname\")!.classList.add(\"invalid\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Sign Up</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"username\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={username}\r\n                                    onChange={e => setUsername(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a username\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span\r\n                                    className=\"dropdown-trigger btn manage-dropdown\"\r\n                                    id=\"roleDD\"\r\n                                    data-target=\"dropdownRole\"\r\n                                >\r\n                                    Role\r\n                                </span>\r\n                                <ul\r\n                                    id=\"dropdownRole\"\r\n                                    className=\"dropdown-content\"\r\n                                >\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"admin\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Admin\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"developer\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Developer\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"project-manager\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Project Manager\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"firstname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={firstname}\r\n                                    onChange={e => setFirstname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your first name\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"lastname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your last name \"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={e => submitForm()}\r\n                            >\r\n                                Register\r\n                            </button>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                >\r\n                                    Login Here\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport UserImage from '../img/unnamed.webp';\r\n\r\nexport const Sidenav = () => {\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n\r\n    useEffect( () => {\r\n            let loc = window.location.pathname;\r\n            document.getElementById('tickets')!.classList.remove('active');\r\n            document.getElementById('projects')!.classList.remove('active');\r\n            if(user.role === 'project-manager' || user.role === 'admin') {document.getElementById('man-projects')!.classList.remove('active')}\r\n            if(user.role === 'admin') {document.getElementById('man-roles')!.classList.remove('active')}\r\n            document.getElementById('dashboard')!.classList.remove('active');\r\n            switch(loc) {\r\n                case \"/tickets\": {\r\n                    document.getElementById('tickets')!.classList.add('active');\r\n                    document.getElementById('mobile-tickets')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/projects\": {\r\n                    document.getElementById('projects')!.classList.add('active');\r\n                    document.getElementById('mobile-projects')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/manage-projects\": {\r\n                    document.getElementById('man-projects')!.classList.add('active');\r\n                    document.getElementById('mobile-man-projects')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/manage-roles\": {\r\n                    document.getElementById('man-roles')!.classList.add('active');\r\n                    document.getElementById('mobile-man-roles')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/dashboard\": {\r\n                    document.getElementById('dashboard')!.classList.add('active');\r\n                    document.getElementById('mobile-dashboard')!.classList.add('active');\r\n                    break;\r\n                }\r\n            }\r\n    });\r\n    return(\r\n        <>\r\n            <ul className = \"collection\">\r\n                <li className = \"collection-item avatar\">\r\n                    <img src = { UserImage } className = \"circle noselect\" alt = \"\"/>\r\n                        <span className = \"title noselect\"><b>Welcome, { user.username }</b></span>\r\n                    <p> { user.email } <br />\r\n                        <span className = \"noselect capitalize\">Current Role: { user.role }</span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className = \"divider\"></div>\r\n            \r\n            <li className = \"btnli\"><a href = \"#/dashboard\" className = \"navLink\" id = \"dashboard\"><button className = \"btn\"> <i className = \"left material-icons\">dashboard</i> <span className = \"left\">Dashboard</span></button></a></li>\r\n            { user.role === 'admin' ? \r\n                <li className = \"btnli\"><a href = \"#/manage-roles\" className = \"navLink\" id = \"man-roles\"><button className = \"btn\"> <i className = \"left material-icons\">people_outline</i><span className = \"left\">Manage Roles</span></button></a></li>\r\n            : null}\r\n            { user.role === 'admin' || user.role === 'project-manager' ? \r\n                <li className = \"btnli\"><a href = \"#/manage-projects\" className = \"navLink\" id = \"man-projects\"><button className = \"btn\"> <i className = \"left material-icons\">people</i><span className = \"left\">Manage Projects</span></button></a></li>\r\n            : null}\r\n            <li className = \"btnli\"><a href = \"#/projects\" className = \"navLink\" id = \"projects\"><button className = \"btn\"> <i className = \"left material-icons\">widgets</i><span className = \"left\">My Projects</span></button></a></li>\r\n            <li className = \"btnli\"><a href = \"#/tickets\" className = \"navLink\" id = \"tickets\"><button className = \"btn\"> <i className = \"left material-icons\">local_offer</i><span className = \"left\">My Tickets</span></button></a></li>\r\n        </>\r\n    );\r\n}","import UserImage from '../img/unnamed.webp';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { State, User } from '../redux/RootReducer';\r\n\r\nexport const MobileSideNav = () => {\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    return(\r\n        <>\r\n            <ul className = \"collection\">\r\n                <li className = \"collection-item avatar\">\r\n                    <img src = { UserImage } className = \"circle noselect\" alt = \"\"/>\r\n                        <span className = \"title noselect\"><b>Welcome, { user.username }</b></span>\r\n                    <p> { user.email } <br />\r\n                        <span className = \"noselect capitalize\">Current Role: { user.role }</span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className = \"divider\"></div>\r\n            \r\n            <li className = \"btnli\"><a href = \"#/dashboard\" className = \"navLink\" id = \"mobile-dashboard\"><button className = \"btn\"> <i className = \"left material-icons\">dashboard</i> <span className = \"left\">Dashboard</span></button></a></li>\r\n            { user.role === 'admin' ? \r\n                <li className = \"btnli\"><a href = \"#/manage-roles\" className = \"navLink\" id = \"mobile-man-roles\"><button className = \"btn\"> <i className = \"left material-icons\">people_outline</i><span className = \"left\">Manage Roles</span></button></a></li>\r\n            : null}\r\n            { user.role === 'admin' || user.role === 'project-manager' ? \r\n                <li className = \"btnli\"><a href = \"#/manage-projects\" className = \"navLink\" id = \"mobile-man-projects\"><button className = \"btn\"> <i className = \"left material-icons\">people</i><span className = \"left\">Manage Projects</span></button></a></li>\r\n            : null}\r\n            <li className = \"btnli\"><a href = \"#/projects\" className = \"navLink\" id = \"mobile-projects\"><button className = \"btn\"> <i className = \"left material-icons\">widgets</i><span className = \"left\">My Projects</span></button></a></li>\r\n            <li className = \"btnli\"><a href = \"#/tickets\" className = \"navLink\" id = \"mobile-tickets\"><button className = \"btn\"> <i className = \"left material-icons\">local_offer</i><span className = \"left\">My Tickets</span></button></a></li>\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useLogoutMutation } from '../generated/graphql';\r\nimport { setAccessToken } from '../accessToken';\r\nimport { Sidenav } from './Sidenav';\r\nimport { MobileSideNav } from './MobileSideNav';\r\n\r\ninterface Props {\r\n    children?: any\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems, {\r\n            hover: true,\r\n        });\r\n    })\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <ul id=\"user-actions\" className=\"dropdown-content\">\r\n                    <li>\r\n                        <a onClick={() => { logout(); }}>\r\n                            Logout\r\n                            <i className=\"material-icons\">exit_to_app</i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul id=\"notifications\" className=\"dropdown-content\">\r\n                    <li></li>\r\n                </ul>\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#!\" className=\"brand-logo\"><i className=\"material-icons\">bug_report</i> <b>Bug Tracker</b></a>\r\n\r\n                        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n                        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                            <li>\r\n                                <a className=\"dropdown-trigger\" data-target=\"user-actions\">\r\n                                    USER ACTIONS <i className=\"material-icons right\">arrow_drop_down</i>\r\n                                </a>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">\r\n                {children ? children : null}\r\n            </span>\r\n        </div>\r\n    );\r\n}","import { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default checkAuth();","import React, { FC } from \"react\";\r\nimport { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: FC<IAuthRouteProps> = ({ component: Component, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthRoute;\r\n","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AdminRoute;","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove('indicator-pink');\r\n    t?.classList.remove('indicator-darkblue');\r\n    t?.classList.remove('indicator-cyan');\r\n    switch (color) {\r\n        case 'pink': {\r\n            t?.classList.add('indicator-pink');\r\n            break;\r\n        }\r\n        case 'dark-blue': {\r\n            t?.classList.add('indicator-darkblue');\r\n            break;\r\n        }\r\n        case 'cyan': {\r\n            t?.classList.add('indicator-cyan');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove('indicator-blue')\r\n    t?.classList.remove('indicator-yellow')\r\n    switch (color) {\r\n        case 'yellow': {\r\n            t?.classList.add('indicator-yellow');\r\n            subt?.classList.add('indicator-blue');\r\n            break;\r\n        }\r\n        case 'blue': {\r\n            t?.classList.add('indicator-blue');\r\n            subt2?.classList.add('indicator-yellow');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// export const changeIndicatorP = (i: string, color: string) => {\r\n//     let t = document.getElementById(`ul3${i}`)\r\n//     let subt = document.getElementById(`sub-tab3${i}`);\r\n//     let subt2 = document.getElementById(`sub-tab3.1${i}`);\r\n//     t?.classList.remove('indicator-orange');\r\n//     t?.classList.remove('indicator-blue');\r\n//     switch (color) {\r\n//         case 'orange': {\r\n//             t?.classList.add('indicator-orange');\r\n//             subt?.classList.add('indicator-blue');\r\n//             break;\r\n//         }\r\n//         case 'blue': {\r\n//             t?.classList.add('indicator-blue');\r\n//             subt2?.classList.add('indicator-orange');\r\n//             break;\r\n//         }\r\n//     }\r\n// }","import { useState } from \"react\";\r\nimport { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabs = () => {\r\n    let LStitle: any = localStorage.getItem('title');\r\n    if (!!LStitle) { LStitle = LStitle!.split(','); }\r\n    const [title, setTitle] = useState({ title: LStitle || [] as string[] });\r\n    const [chartData, setChartData] = useState({ chart: [{}] })\r\n    const userTickets = useGetUserTickets() as [{ priority: string, status: string, type: string }];\r\n    const tickets = useGetTickets() as [{ priority: string, status: string, type: string }];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0, f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case 'features': {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case 'bugs/errors': {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Bugs/Erros', 'Features'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Type';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0, m = 0, l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case 'high': {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case 'medium': {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case 'low': {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['High', 'Medium', 'Low'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Priority';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0, m = 0, l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case 'high': {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case 'medium': {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case 'low': {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['High', 'Medium', 'Low'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Priority';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0, c = 0, h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case 'open': {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case 'closed': {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case 'on-hold': {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Open', 'Closed', 'On Hold'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Status';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0, c = 0, h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case 'open': {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case 'closed': {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case 'on-hold': {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Open', 'Closed', 'On Hold'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Status';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0, f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case 'features': {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case 'bugs/errors': {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Bugs/Erros', 'Features'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Type';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n\r\n    return {\r\n        title,\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT\r\n    }\r\n}","import { useGetUserTicketsQuery } from \"../../generated/graphql\"\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getUserTickets;\r\n}","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getTickets\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport M from \"materialize-css\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabs } from \"./DashboardTabs\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    let LSname: any = localStorage.getItem('chartType');\r\n    if (!!LSname) { LSname = LSname!.split(','); }\r\n    let LSchart: any = localStorage.getItem('chart');\r\n    if (!!LSchart) { LSchart = LSchart.split(','); }\r\n    let LSdata: any = localStorage.getItem('data');\r\n    if (!!LSdata) { LSdata = JSON.parse(LSdata); }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || [] as string[] });\r\n    const {title, myTicketsByS, myTicketsByP, myTicketsByT, TicketsByP, TicketsByS, TicketsByT} = DashboardTabs();\r\n    \r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        var elems = document.querySelectorAll('.fixed-action-btn');\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false\r\n        });\r\n        elems = document.querySelectorAll('.tooltipped');\r\n        M.Tooltip.init(elems, {\r\n            position: 'left'\r\n        });\r\n    })\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat(temp! += 1);\r\n        setState({ ...state, Cards: state.Cards.concat(temp! += 1) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat('')\r\n        })\r\n        localStorage.setItem('chart', `${t1}`);\r\n    }\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp\r\n            });\r\n            localStorage.setItem('chartType', `${tmp}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <div className=\"fixed-action-btn\">\r\n                <a className=\"btn-floating tooltipped btn-large\" data-postion=\"left\" data-tooltip=\"ADD A CHART\" style={{ backgroundImage: 'linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)' }} onClick={() => { AddCard() }}><i className=\"material-icons\">insert_chart</i></a>\r\n\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                {state.Cards.map(function (_val: any, i: any) {\r\n                    return (\r\n                        <div className=\"col s11 m6 chart-lengthen\" key={i}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <span className=\"card-title center\">\r\n                                            {title!.title[i]}\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div className=\"row row-verticle-center\">\r\n                                        <div className=\"col l12 m12 s12 centered\">\r\n                                            {chart.name[i] === 'Donut' && !!LSdata ? <Doughnut data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                            {chart.name[i] === 'Bar' && !!LSdata ? <Bar data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                            {chart.name[i] === 'Pie' && !!LSdata ? <Pie data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card-tabs\">\r\n                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                        <li className=\"tab\"><a className=\"active\" href={`#tab${i}`}>Chart Type</a></li>\r\n                                        <li className=\"tab\"><a href={`#tab2${i}`}>Tickets </a></li>\r\n                                        {/* <li className=\"tab\"><a href={`#tab3${i}`}>Projects</a></li> */}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className=\"card-content grey lighten-4\">\r\n                                    <div id={`tab${i}`}>\r\n                                        <div className=\"card-tabs\">\r\n                                            <ul id={`ul${i}`} className=\"tabs tabs-fixed-width\">\r\n                                                <li className=\"tab\">\r\n                                                    <a className=\"active\" onClick={() => { changeIndicatorC(`${i}`, 'pink') }}>\r\n                                                        <button className=\"card-opt\" key={i} name={`Donut`} onClick={(e) => setChartType(e, i)}>  Donut </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li className=\"tab\" onClick={() => { changeIndicatorC(`${i}`, 'dark-blue') }}>\r\n                                                    <a>\r\n                                                        <button className=\"card-opt\" key={i} name={`Pie`} onClick={(e) => { setChartType(e, i) }}>  Pie </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li className=\"tab\" onClick={() => { changeIndicatorC(`${i}`, 'cyan') }}>\r\n                                                    <a>\r\n                                                        <button className=\"card-opt\" key={i} name={`Bar`} onClick={(e) => { setChartType(e, i) }}>  Bar </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div id={`tab2${i}`}>\r\n                                        <ul id={`ul2${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab my-tickets\"><a className=\"active\" onClick={() => changeIndicatorT(`${i}`, 'yellow')} href={`#sub-tab2${i}`}>My Tickets</a></li>\r\n                                            <li className=\"tab all-tickets\"><a href={`#sub-tab2.1${i}`} onClick={() => changeIndicatorT(`${i}`, 'blue')}>All Tickets</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab2${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul id={`ul2${i}`} className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active yellow-text\">\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByP!(i) }}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByS!(i) }}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByT!(i) }}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab2.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByP!(i)}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByS!(i)}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByT!(i)}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                    {/* <div id={`tab3${i}`}>\r\n                                        <ul id={`ul3${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab\"><a className=\"active\" href={`#sub-tab3${i}`} onClick={() => changeIndicatorP(`${i}`, 'orange')}>My Projects</a></li>\r\n                                            <li className=\"tab\"><a href={`#sub-tab3.1${i}`} onClick={() => changeIndicatorP(`${i}`, 'blue')}>All Projects</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab3${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab3.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </span>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectDataQuery } from \"../../generated/graphql\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data , loading } = useGetProjectDataQuery();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Manage Projects</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><b>Project Name</b></th>\r\n                                <th className = \"nonessen\"><b>Description</b></th>\r\n                                <th><b>Users Assigned</b></th>\r\n                                <th className = \"noselect\"><b>Edit/Details</b></th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            { !!data.getProjectData.map ? data.getProjectData.map( (_val, i, getProjectData) => {\r\n                                let projectId = getProjectData[i].projectid;\r\n                                return(\r\n                                    <tr key = {i}>\r\n                                        <td> { getProjectData[i].title } </td>\r\n                                        <td className = \"nonessen\"> { getProjectData[i].description } </td>\r\n                                        <td> { getProjectData[i].projectid } </td>\r\n                                        <td> <a href = { `#/edit-project:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">edit</i>\r\n                                            </a> \r\n                                            <br /> \r\n                                            <a href = {`#/project-details:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">details</i>\r\n                                            </a>\r\n                                        </td> \r\n                                    </tr>\r\n                                );\r\n                            })\r\n                            :\r\n                                <tr></tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className = \"poormans-divider\"></div>\r\n                    <a href = \"#/create-project\"><button className = \"btn btn-ex safe-btn center footerBtn\">Add Project</button></a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number,\r\n    keyprop: number,\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${props.projectid}` }});\r\n\r\n    if (loading || !data) {\r\n        return(\r\n            <tr><td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td></tr>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.keyprop}>\r\n            <td>\r\n                { data.getProjectDataById[0].title }\r\n            </td>\r\n\r\n            <td className = \"nonessen\">\r\n                { data.getProjectDataById[0].description }\r\n            </td>\r\n\r\n            <td>\r\n                <a href = {`#/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading } = useGetUserProjectsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">My Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUserProjects!.map ? data!.getUserProjects!.map((_val, i, getUserProjects): JSX.Element => {\r\n                                return (\r\n                                    <DetailsSubCom projectid={getUserProjects[i].projectid} key={i} keyprop={i} />\r\n                                );\r\n                            })\r\n                                :\r\n                                <tr></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    UserTickets: any,\r\n    i: number\r\n}\r\n\r\nexport const TicDetailsSubCom: React.FC<Props> = (props) => {\r\n\r\n    const { data, loading } = useGetTicketDataByIdQuery( { \r\n        variables: { \r\n            id: `${props.UserTickets[props.i].ticketid}`\r\n        }})\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    <div className = \"progress\">\r\n                        <div className = \"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.i}>\r\n            { data.getTicketDataById.length !== 0 ? \r\n                <>\r\n                    <td>{ data.getTicketDataById[0].title }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].developer }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].priority }</td>\r\n                    <td>{ data.getTicketDataById[0].status }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].type }</td>\r\n                    <td className = \"noselect\"><a href = {`#/ticket-details:${props.UserTickets[props.i].ticketid}`}>Details</a></td>\r\n                </>\r\n                : null\r\n            }\r\n        </tr>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { TicDetailsSubCom } from \"./TicDetailsSubCom\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    const [state, setState] = useState({\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const sortTicketsByPriority = () => {\r\n        let arr = data.getUserTickets;\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (j > 0 && (((arr[j].priority === 'high' && ((arr[j - 1].priority === 'medium' || arr[j - 1].priority === 'low')) || (arr[j].priority === 'medium' && arr[j - 1].priority === 'low'))))) {\r\n                let tmp = arr.slice(j - 1, j + 1)\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n        setState({ arr });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Tickets</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th className=\"nonessen\">Developer Assigned</th>\r\n                                <th className=\"nonessen\">Ticket Priority<i className=\"material-icons noselect\" onClick={() => sortTicketsByPriority()}>swap_vert</i></th>\r\n                                <th>Ticket Status</th>\r\n                                <th className=\"nonessen\">Ticket Type</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getUserTickets.map ?\r\n                                data.getUserTickets.map((_val, i) => {\r\n                                    return (\r\n                                        <TicDetailsSubCom key={i} UserTickets={data.getUserTickets} i={i} />\r\n                                    );\r\n                                })\r\n                                :\r\n                                <tr>\r\n\r\n                                </tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const GetLocation = () => {\r\n    let location = useLocation();\r\n    let id = location.pathname;\r\n    let tmp: any = id.split(':');\r\n    id = tmp[1];\r\n    return id;\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectTickets: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({ variables: { id: `${id}` } });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectTickets!.map((_val, i, getProjectTickets): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectTickets[i].title} </td>\r\n                        <td className=\"capitalize nonessen\"> {getProjectTickets[i].submitter} </td>\r\n                        <td className=\"capitalize nonessen\"> {getProjectTickets[i].developer} </td>\r\n                        <td className=\"capitalize\"> {getProjectTickets[i].status} </td>\r\n                        <td> <a className=\"noselect\" href={`#/ticket-details:${getProjectTickets[i].ticketid}`}>Details</a> </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectAssigned: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data , loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className = \"progress\">\r\n                            <div className = \"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tbody>\r\n            { data!.getProjectUsersById!.map( (_val, i, getProjectUsersById): JSX.Element => { \r\n\r\n            return (\r\n                <tr key = {i}>\r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].username } </td> \r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].email } </td> \r\n                    <td className = \"capitalize\"> { getProjectUsersById[i].role } </td> \r\n                </tr>\r\n            );\r\n            })}\r\n        </tbody>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\nimport { ProjectTickets } from \"./ProjectTickets\";\r\nimport { ProjectAssigned } from \"./ProjectAssigned\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\n\r\nexport const ProjectDetails: React.FC = () => {\r\n    let history: any = useHistory();\r\n    let id = GetLocation();\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <span>\r\n            {data.getProjectDataById.length === 0 ? (\r\n                <Redirect to=\"#/dashboard\" />\r\n            ) : (\r\n                <div className=\"detailsWrapper container-fluid\">\r\n                    <div className=\"center-align table-wrapper\">\r\n                        <span className=\"table-header z-depth-2\">\r\n                            <h2 className=\"white-text\">\r\n                                Details for Project #{id}\r\n                            </h2>\r\n                        </span>\r\n\r\n                        <span className=\"table-body z-depth-1\">\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Project Name</th>\r\n                                        <th>Project Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {data.getProjectDataById[0].title}\r\n                                        </td>\r\n                                        <td>\r\n                                            {\r\n                                                data.getProjectDataById[0]\r\n                                                    .description\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row\">\r\n                                <span className=\"col s5 m5 l5 xl5\">\r\n                                    <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Assigned Personnel\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>User Name</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Email</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Role</b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <ProjectAssigned />\r\n                                    </table>\r\n                                </span>\r\n\r\n                                <span className=\"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                                    <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Tickets for Project #{id}\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>Title</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Submitter</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Developer</b>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <b>Status</b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <ProjectTickets />\r\n                                    </table>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n\r\n                            <button\r\n                                className=\"btn left footerBtn\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                Go Back\r\n                            </button>\r\n                            {user.role === \"developer\" ? null : (\r\n                                <a href={`#/edit-project:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const TicketDetails: React.FC = () => {\r\n    const history = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data) {\r\n        return <span>no data</span>;\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n\r\n    return (\r\n        <span>\r\n            {ticket.length === 0 ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                <div className=\"detailsWrapper container-fluid\">\r\n                    <div className=\"center-align table-wrapper\">\r\n                        <span className=\"table-header z-depth-2\">\r\n                            <h2 className=\"white-text noselect\">\r\n                                Details For Ticket #{id}\r\n                            </h2>\r\n                        </span>\r\n\r\n                        <span className=\"table-body z-depth-1\">\r\n                            <table className=\"striped responsive\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th>TITLE</th>\r\n                                        <th>DESCRIPTION</th>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].title}\r\n                                        </td>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].description || \"NONE\"}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <th>ASSIGNED DEVELOPER</th>\r\n                                        <th>SUBMITTER</th>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].developer}\r\n                                        </td>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].submitter}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <th>BELONGS TO PROJECT</th>\r\n                                        <th>TICKET PRIORITY</th>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td>#{ticket[0].belongsto}</td>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].priority}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <th>TICKET STATUS</th>\r\n                                        <th>TICKET TYPE</th>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].status}\r\n                                        </td>\r\n                                        <td className=\"capitalize\">\r\n                                            {ticket[0].type || \"NONE\"}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"divider\"></div>\r\n\r\n                            <button\r\n                                className=\"btn left footerBtn\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                Go Back\r\n                            </button>\r\n                            <a href={`#/edit-ticket:${id}`}>\r\n                                <button className=\"btn right footerBtn\">\r\n                                    Edit\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","\r\nexport const CheckIfInProject = (id: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers\r\n    for(let x = 0; x < users.length; x++) {\r\n        if(users[x].id === id) {\r\n            tmp = true\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n}","import { useGetUsersQuery, useAddProjectUserMutation, useRemoveProjectUserMutation } from \"../../../generated/graphql\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const USERS = (projectUsers: any) => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n    const PROJECT_ID = GetLocation();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({\r\n        assigned: projectUsers,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('select');\r\n        M.FormSelect.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const modPersonnel = async (i: number) => {\r\n        if(CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            await removeUser({ \r\n                variables: {\r\n                    userid: `${data!.getUsers![i].id}`,\r\n                    projectid: `${PROJECT_ID}`\r\n                }\r\n            });\r\n            M.toast({html: `Removed ${data!.getUsers![i].username}`});\r\n        } else {\r\n            await addUser({ \r\n                variables: {\r\n                    projectid: `${PROJECT_ID}`,\r\n                    userid: `${data!.getUsers![i].id}`\r\n                }\r\n            });\r\n            M.toast({html: `Added ${data!.getUsers![i].username}`});\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select className = \"browser-default\">\r\n                    <option value=\"\" disabled selected>Click to add/remove</option>\r\n                    { data!.getUsers!.map( ( _val, i, getUsers ) => {\r\n                        return(\r\n                            <option key={ i } onClick = { () => { modPersonnel(i) } }>  { getUsers[i].username } </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\n\r\n\r\nexport const EditAss: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` } });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectUsersById!.map((_val, i, getProjectUsersById): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].username} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].email} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].role} </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n\r\n            <tr>\r\n                <USERS projectUsers={data.getProjectUsersById} />\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${id}`,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {!!data ? (\r\n                data!.getProjectTickets.map((_val, i, getProjectTickets) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td> {getProjectTickets[i].title} </td>\r\n                            <td> {getProjectTickets[i].submitter} </td>\r\n                            <td> {getProjectTickets[i].developer} </td>\r\n                            <td> {getProjectTickets[i].status} </td>\r\n                            <td>\r\n                                <a\r\n                                    href={`#/edit-ticket:${getProjectTickets[i].ticketid}`}\r\n                                >\r\n                                    EDIT\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            ) : (\r\n                <tr></tr>\r\n            )}\r\n            <tr>\r\n                <td>\r\n                    <a href={`#/project-add:${id}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            Add Ticket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","export const JsFooterStyling = () => {\r\n    if( window.innerWidth !== undefined ) {\r\n        if(window.innerWidth < 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.add('hide');\r\n                document!.getElementById('deleteBtn')!.classList.remove('center');\r\n                document!.getElementById('deleteBtn')!.classList.add('left');\r\n                document!.getElementById('deleteBtn')!.classList.add('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.add('btn-ex-40');\r\n            }\r\n\r\n        }\r\n        if(window.innerWidth > 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.remove('hide');\r\n                document!.getElementById('deleteBtn')!.classList.add('center');\r\n                document!.getElementById('deleteBtn')!.classList.remove('left');\r\n                document!.getElementById('deleteBtn')!.classList.remove('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.remove('btn-ex-40');\r\n            }\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery, useSetProjectDescMutation, useSetProjectTitleMutation, useDeleteProjectMutation } from \"../../generated/graphql\";\r\nimport { EditAss } from \"./edit-project/EditAss\";\r\nimport { EditPTTable } from \"./edit-project/EditPTTable\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { JsFooterStyling } from \"../../css/JsStyling\";\r\n\r\nexport const EditProject: React.FC = () => {\r\n    const history: any = useHistory(); \r\n    const [state, setState] = useState({\r\n        pTitle: '',\r\n        pDesc: '',\r\n    });\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${id}` }});\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getProjectDataById.length === 0) {\r\n        return(\r\n            <Redirect to = '/manage-projects' />\r\n        )\r\n    }\r\n\r\n    const updateProject = async () => {\r\n        if(state.pDesc !== '' || state.pTitle !== '') {\r\n            if(state.pTitle !== '') {\r\n                setTitle({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        title: `${state.pTitle}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Title Successfully Changed'});\r\n            }\r\n            if(state.pDesc !== '') {\r\n                setDesc({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        description: `${state.pDesc}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Description Successfully Changed'});\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteProject = async () => {\r\n        let tmp = await delProj({\r\n            variables: {\r\n                projectid: `${id}`\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({html: 'An Error Occured while deleting project'});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"detailsWrapper container-fluid\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    \r\n                    <h2 className = \"white-text\">Edit Project #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"responsive-table striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-name\" value = { state.pTitle } onChange = { (e) => setState({ ...state, pTitle: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-name\">{state.pTitle !== '' ? <span>{state.pTitle}</span> : data.getProjectDataById[0].title }</label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-desc\" value = { state.pDesc } onChange = { (e) => setState({ ...state, pDesc: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-desc\">{state.pDesc !== '' ? <span>{state.pDesc}</span> : data.getProjectDataById[0].description}</label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"row\">\r\n                        <span className = \"col s5 m5 l5 xl5\">\r\n                            <span className = 'personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                <h3 className = \"white-text\">Assigned Personnel</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>User Name</b></th>\r\n                                        <th><b>Email</b></th>\r\n                                        <th><b>Role</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAss />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className = \"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className = \"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className = \"white-text\">Tickets for Project #{id}</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>Title</b></th>\r\n                                        <th><b>Submitter</b></th>\r\n                                        <th><b>Developer</b></th>\r\n                                        <th><b>Status</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => {updateProject()} }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE PROJECT #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteProject() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useSetTicketDeveloperMutation } from \"../../../generated/graphql\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\ninterface Props {\r\n    developer: string\r\n    submitter: string;\r\n}\r\n\r\nexport const DevSub: React.FC<Props> = (props) => {\r\n    let id = GetLocation();\r\n    let developer = props.developer;\r\n    let submitter = props.submitter;\r\n    const [setDeveloper] = useSetTicketDeveloperMutation();\r\n    const [state, setState] = useState({\r\n        dev: '',\r\n    })\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n    })\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    const setDev = async (e: React.SyntheticEvent) => {\r\n        if(user.role === 'admin' || user.role === 'project-manager' ) {\r\n            let target = e.target as HTMLButtonElement;\r\n            let dev = target.name; \r\n            setState({...state, dev });\r\n            let tmp = await setDeveloper({\r\n                variables: {\r\n                    ticketid: `${id}`,\r\n                    developer: `${dev}`\r\n                }\r\n            });\r\n            if(tmp) {\r\n                M.toast({html: 'Ticket Developer successfully changed'});\r\n            }\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <tr>\r\n            <td>\r\n                {user.role === 'admin' || user.role === 'project-manager' ? \r\n                    <span>\r\n                        <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowndev'>{state.dev !== '' ? <span>{state.dev}</span> : <span>{ developer }</span> || <span>No Status</span>}</a>\r\n                        <ul id='dropdowndev' className='dropdown-content'>\r\n                            { data!.getUsers!.map( (_val, i, getUsers) => {\r\n                                return(\r\n                                    <li key = { i }>\r\n                                        <button className = \"btnDropdown\" name = {`${getUsers[i].username}`} onClick = { (e) => setDev(e) }>{ getUsers[i].username }</button>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </span>\r\n                    :\r\n                    <span>{ developer }</span>\r\n                }\r\n            </td>\r\n            <td>\r\n                <span>{ submitter }</span>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import { useGetProjectDataByIdQuery } from \"../../../generated/graphql\"\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n    projectid: string\r\n}\r\n\r\nexport const ProjectDD: React.FC<Props> = (props) => {\r\n    \r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: props.projectid }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            { data.getProjectDataById[0].title }\r\n        </span>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketProjectQuery } from \"../../../generated/graphql\"\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { ProjectDD } from \"./ProjectDD\";\r\n\r\nexport const ProjectDDWrapper: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetTicketProjectQuery({ variables: { \r\n        ticketid: `${id}`\r\n    }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            <ProjectDD projectid = {`${data.getTicketProject[0].projectid}`} />\r\n        </span>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useGetProjectDataQuery, useSetTicketProjectMutation } from '../../../generated/graphql';\r\nimport { ProjectDDWrapper } from './ProjectDDWrapper';\r\nimport { GetLocation } from '../../GetLocation';\r\ninterface Props {\r\n    title: string,\r\n    id: string\r\n}\r\n\r\nexport const AssignProject: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n    const [SetTicketProject] = useSetTicketProjectMutation();\r\n    const [state, setState] = useState({\r\n        project: '',\r\n    })\r\n    let ticketid = GetLocation();\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    \r\n    const setProject = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let projectid = target.name;\r\n        setState({...state, project: `${projectid}`})\r\n        await SetTicketProject({\r\n            variables: {\r\n                ticketid,\r\n                projectid \r\n            }\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <td>\r\n            {/* eslint-disable-next-line */}\r\n            <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownassign'>{state.project !== '' ? <span>{state.project}</span> : <ProjectDDWrapper />}</a>\r\n            <ul id='dropdownassign' className='dropdown-content'>\r\n                { data.getProjectData.map( ( _val, i, getProjectData ) => {\r\n                    return(\r\n                        <li key = {i}><button className = \"btnDropdown\" onClick = { (e) => setProject(e)} name = { `${getProjectData[i].projectid}` }>{ getProjectData[i].title }</button></li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </td>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { useGetTicketDataByIdQuery, useSetTicketStatusMutation, useSetTicketTypeMutation, useSetTicketTitleMutation, useSetTicketDescMutation, useSetTicketPriorityMutation, useDeleteTicketMutation } from \"../../../generated/graphql\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport { DevSub } from \"./DevSub\";\r\nimport { AssignProject } from \"./AssignProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from '../../../css/JsStyling';\r\n\r\nexport const EditTicket: React.FC = () => {\r\n    const history: any = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({ variables: { id: `${id}` } });\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    const [setStatus] = useSetTicketStatusMutation();\r\n    const [setType] = useSetTicketTypeMutation();\r\n    const [setTitle] = useSetTicketTitleMutation();\r\n    const [setDesc] = useSetTicketDescMutation();\r\n    const [setPriority] = useSetTicketPriorityMutation();\r\n    const [DeleteThisTicket] = useDeleteTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        new: false,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n        \r\n        JsFooterStyling();\r\n    })\r\n    \r\n    \r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getTicketDataById.length === 0) {\r\n        return(\r\n            <Redirect to = \"#/manage-projects\" />\r\n        )\r\n    }\r\n\r\n    const setTicketStatus = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n        await setStatus({ \r\n            variables: {\r\n                ticketid: `${id}`,\r\n                status: `${status}`\r\n            }\r\n        })\r\n        M.toast({html: 'Ticket Status successfully changed'});\r\n    }\r\n    \r\n    const setTicketType = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n        await setType({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                type: `${type}`\r\n            }\r\n        });\r\n        M.toast({html: 'Ticket Type successfully changed'});\r\n    }\r\n\r\n    const setTicketPriority = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority });\r\n        await setPriority({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                priority: `${priority}`\r\n            }\r\n        });\r\n        M.toast({html: 'Ticket Priority successfully changed'});\r\n    }\r\n\r\n    const updateTicket = async () => {\r\n        if(state.title === '' && state.description === '') {\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({html: 'Not Enough Data Provided'});\r\n        } else  {\r\n            setState({...state, new: true});\r\n            if(state.title !== '') {\r\n                await setTitle({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        title: `${state.title}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Ticket Title successfully changed'});\r\n            }\r\n            \r\n            if(state.description !== '') {\r\n                await setDesc({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        desc: `${state.description}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Ticket Description successfully changed'});\r\n            }\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const deleteTicket = async () => {\r\n        await DeleteThisTicket({ variables: {\r\n            ticketid: `${id}`\r\n        }});\r\n        window.location.replace('#/dashboard');\r\n    }\r\n    \r\n    return(\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Edit Ticket #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">{state.new ? <span>{state.title}</span> : data.getTicketDataById[0].title || <span>No Title</span> }</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n                                \r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">{state.new ? <span>{state.description}</span> : data.getTicketDataById[0].description || <span>No description</span> }</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <DevSub developer = {`${data.getTicketDataById[0].developer}`} submitter = {`${data.getTicketDataById[0].submitter}`}/>\r\n                            \r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n                            \r\n                            <tr>\r\n                                { user.role === 'developer' ? \r\n                                    <td>{data.getTicketDataById[0].title}</td>\r\n                                    :   \r\n                                    <AssignProject title = {`${data.getTicketDataById[0].title}`} id = { id }/>\r\n                                }\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : data.getTicketDataById[0].priority || <span>No Status</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e) }>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e) }>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e) }>High</button></li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{state.status !== '' ? <span>{state.status}</span> : data.getTicketDataById[0].status || <span>No Status</span>}</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                </td>\r\n                                <td>\r\n                                        <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{state.type !== '' ? <span>{state.type}</span>:  data.getTicketDataById[0].type || <span>No Type</span>}</a>\r\n                                        <ul id='dropdowntype' className='dropdown-content'>\r\n                                            <li><button className = \"btnDropdown\" name = \"bugs/errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                            <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                        </ul>\r\n                                </td>\r\n                            </tr> \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => updateTicket() }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE TICKET #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteTicket() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    \r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n\r\n    } else {\r\n        let UsersArray = data.getUsers\r\n        return {\r\n            UsersArray\r\n        }\r\n    }\r\n\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../tickets/useGetUsers\";\r\nimport { useCreateTicketMutation } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const AddTicketToProject: React.FC = () => {\r\n    const UsersArray = useGetUsers();\r\n    const history = useHistory();\r\n    const id = GetLocation();\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',})\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        dev: '',\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if(!UsersArray) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if(state.status === '' || state.type === '' || state.title === '' || state.description === '' || state.priority === '') {\r\n            M.toast({html: 'Missing Data'});\r\n            document.getElementById('dev-hpr-br')?.classList.add('hide');\r\n            document.getElementById('dev-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('status-hpr-br')?.classList.add('hide');\r\n            document.getElementById('status-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('type-hpr-br')?.classList.add('hide');\r\n            document.getElementById('type-hpr')?.classList.add('hide');\r\n\r\n            document.getElementById('pri-hpr-br')?.classList.add('hide');\r\n            document.getElementById('pri-hpr')?.classList.add('hide');\r\n\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.type === '') {\r\n                document.getElementById('type-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('type-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.status === '') {\r\n                document.getElementById('status-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('status-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.dev === '') {\r\n                document.getElementById('dev-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('dev-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.priority === '') {\r\n                document.getElementById('pri-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('pri-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n        } else {\r\n            await Submit({\r\n                variables: {\r\n                    title: state.title,\r\n                    description: state.description,\r\n                    belongsTo: `${id}`,\r\n                    developer: state.dev,\r\n                    priority: state.priority,\r\n                    status: state.status,\r\n                    submitter: user.username,\r\n                    type: state.type\r\n                }\r\n            })\r\n            history.push({ pathname: '#/manage' })   \r\n        }\r\n    }\r\n\r\n    const setTicketType = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n    }\r\n    \r\n    const setTicketStatus = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n    }\r\n\r\n    const SetTicketDev = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let dev = target.name;\r\n        setState({...state, dev});\r\n    }\r\n\r\n    const setTicketPriority = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority});\r\n    }\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Create Ticket</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">ADD A TITLE</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">ADD A DESCRIPTION</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownDev'>{ state.dev !== '' ? <span>{ state.dev }</span> : <span>Assign a Developer</span>}</a>\r\n                                    <ul id='dropdownDev' className='dropdown-content'>\r\n                                        { UsersArray!.UsersArray!.map((_val, i, UsersArray) => {\r\n                                            return(\r\n                                                <li key = {i}><button className = \"btnDropdown\" name = {`${UsersArray[i].username}`} onClick = { (e) => SetTicketDev(e) }>{UsersArray[i].username}</button></li>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"dev-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"dev-hpr\">Please Assign a Developer</span>\r\n                                </td>\r\n                                <td>{ user.username } (YOU)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    #{id}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : <span>Ticket Priority</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e)}>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e)}>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e)}>High</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"pri-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"pri-hpr\">Please Assign a Ticket Priority</span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{ state.status !== '' ? <span>{ state.status }</span> : <span>Set Ticket Status</span> }</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"status-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"status-hpr\">Please Select a Ticket Status</span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{ state.type !== '' ? <span>{ state.type }</span> : <span>Set Ticket Type</span> }</a>\r\n                                    <ul id='dropdowntype' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"bugs-errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"type-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"type-hpr\">Please Select a Ticket Type</span>\r\n                                </td>\r\n\r\n                            </tr> \r\n                            \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n\r\n                    <div className = \"row\">\r\n                        <button className = \"btn left footerBtn modal-trigger\" data-target = \"cancelModal\">Back</button>\r\n                        <button className = \"btn right safe-btn\" onClick = { () => handleSubmit()}>Submit</button>\r\n                    </div>\r\n\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                        <button className  = \"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                        <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => history.goBack() }>CANCEL</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useAddProjectMutation } from \"../../../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../tickets/useGetUsers\";\r\n\r\nexport const CreateProject: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const history = useHistory();\r\n    const UsersArray = useGetUsers();\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [state, setState] = useState({\r\n        title: '',\r\n        description: '',\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n\r\n    if (loading || !data || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === '' || state.description === '') {\r\n            if (state.title === '') {\r\n                document.getElementById('title')?.classList.add('invalid');\r\n            }\r\n            if (state.description === '') {\r\n                document.getElementById('desc')?.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({ html: 'Missing Data' });\r\n        } else {\r\n            await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users: state.userString\r\n                }\r\n            })\r\n            M.toast({ html: 'Project added successfully' });\r\n            window.location.replace('/manage-projects');\r\n        }\r\n    }\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n        setState({ ...state, userids: tmp, usernames: tmp2 });\r\n        setState({ ...state, userString: tmp3 });\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">Create Project</h2>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input type=\"text\" id=\"title\" className=\"validate\" value={state.title} onChange={(e) => setState({ ...state, title: e.target.value })} />\r\n                                            <label htmlFor=\"title\">ADD A TITLE</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input type=\"text\" id=\"desc\" className=\"validate\" value={state.description} onChange={(e) => setState({ ...state, description: e.target.value })} />\r\n                                                <label htmlFor=\"desc\">ADD A DESCRIPTION</label>\r\n                                                <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className='personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                    <h3 className=\"white-text\">Assign Personnel</h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map((_val, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    {state.usernames[i]}\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n\r\n\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>Click to add/remove</option>\r\n                                        {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                            return (\r\n                                                <option key={i} onClick={() => { addUser(getUsers[i].id, getUsers[i].username) }}>  {getUsers[i].username} </option>\r\n                                            );\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn left footerBtn modal-trigger modal-trigger\" data-target=\"cancelModal\">Back</button>\r\n                            <button className=\"btn right safe-btn\" onClick={() => handleSubmit()}>Submit</button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                            <button className=\"modal-close red white-text waves-effect waves-red btn-flat\" onClick={() => history.goBack()}>CANCEL</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'project-manager' || user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    } \r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PmRoute;","import AuthRoute from \"./authRoute\";\r\nimport AdminRoute from \"./adminRoute\";\r\nimport React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport { Dashboard } from \"../components/Dashboard/Dashboard\";\r\nimport { ManageRoles } from \"../components/manage/ManRoles\";\r\nimport { ManageProjects } from \"../components/manage/ManProjects\";\r\nimport { Projects } from \"../components/project/Projects\";\r\nimport { Tickets } from \"../components/tickets/Tickets\";\r\nimport { ProjectDetails } from \"../components/project/ProjectDetails\";\r\nimport { TicketDetails } from \"../components/tickets/TicketDetails\";\r\nimport { EditProject } from \"../components/project/EditProject\";\r\nimport { EditTicket } from \"../components/tickets/edit-ticket/EditTicket\";\r\nimport { AddTicketToProject } from \"../components/project/AddTicketToProject\";\r\nimport { CreateProject } from \"../components/project/create-project/CreateProject\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport PmRoute from \"./pmRoute\";\r\n\r\nexport const Routes: React.FC = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <AdminRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-roles\"\r\n                component={ManageRoles}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-projects\"\r\n                component={ManageProjects}\r\n            />\r\n            <AuthRoute exact path=\"/projects\" component={Projects} />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/create-project\"\r\n                component={CreateProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/edit-project:id\"\r\n                component={EditProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/project-add:id\"\r\n                component={AddTicketToProject}\r\n            />\r\n            <AuthRoute path=\"/project-details:id\" component={ProjectDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketDetails} />\r\n            <AuthRoute path=\"/edit-ticket:id\" component={EditTicket} />\r\n            <AuthRoute exact path=\"/tickets\" component={Tickets} />\r\n            <Route render={() => <Redirect to=\"/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { useGetUserQuery } from \"./generated/graphql\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { Register } from \"./components/auth/Register\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { UI } from \"./components/UI\";\nimport { checkAuth } from \"./clientSideAuth/checkAuth.js\";\nimport { Routes } from \"./routes/Routes\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"./redux/actions/userActions\";\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch();\n    const { data, loading, error } = useGetUserQuery();\n\n    if (loading) {\n        return (\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n            </div>\n        );\n    } else if (!error && data) {\n        const user = data.getUser;\n        if (checkAuth()) {\n            if (user) {\n                dispatch(setUserInfo(user));\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <UI children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/register\" component={Register} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import { User, Project } from \"../RootReducer\";\r\n\r\n\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: 'ADD_USER_INFO', user: user\r\n    }\r\n}\r\n\r\nexport const passProjectInfo = (project: Project) => {\r\n    return {\r\n        type: 'PASS_PROJECT_INFO', project: project\r\n    }\r\n}","import App from \"./App\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport \"./css/dashboard.scss\";\r\nimport \"./css/login.scss\";\r\nimport \"./css/manage.scss\";\r\nimport \"./css/medias.scss\";\r\nimport \"./css/nav.scss\";\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        let tmp = localStorage.getItem(\"refreshToken\");\r\n        if (!tmp) {\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n            })\r\n                .then(async i => {\r\n                    const { accessToken } = await i.json();\r\n                    setAccessToken(accessToken);\r\n                    setLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"err :>> \", err);\r\n                });\r\n        } else {\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    refreshToken: tmp,\r\n                    noCookies: \"true\",\r\n                },\r\n            }).then(async res => {\r\n                const { accessToken, refreshToken } = await res.json();\r\n                setAccessToken(accessToken);\r\n                localStorage.setItem(\"refreshToken\", refreshToken);\r\n                setLoading(false);\r\n            });\r\n        }\r\n\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number,\r\n    email: string,\r\n    role: string,\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport type Project = {\r\n    title: string,\r\n    description: string,\r\n    projectid: number,\r\n}\r\n\r\nexport interface State {\r\n    user?: User\r\n    project?: Project\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: '',\r\n        role: '',\r\n        username: '',\r\n        firstname: '',\r\n        lastname: '',\r\n    },\r\n\r\n    project: {\r\n        title: '',\r\n        description: '',\r\n        projectid: 0,\r\n    }\r\n}\r\n\r\n\r\ntype Actions = {\r\n    user?: any,\r\n    type: string,\r\n    project: Project,\r\n}\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch(action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return {...state, user: action.user};\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return {...state, project: action.project}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { store } from \"./redux/ReduxStore\";\nimport { Provider } from \"react-redux\";\n\nconst cache = new InMemoryCache({});\nvar URI = \"\";\nconsole.log(\"test\");\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nif (process.env.NODE_ENV === \"production\") {\n    URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\n} else {\n    URI = \"http://localhost:4000\";\n}\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <AppWrapper />\n            </Provider>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<ProjectData>;\n  getProjectDataById: Array<ProjectData>;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<TicketData>;\n  getTicketDataById: Array<TicketData>;\n  getUserTickets: Array<UserTicketsPlus>;\n  getTicketProject: Array<ProjectsTickets>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type ProjectData = {\n  __typename?: 'ProjectData';\n  projectid?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  id: Scalars['Int'];\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n};\n\nexport type TicketData = {\n  __typename?: 'TicketData';\n  ticketid: Scalars['Int'];\n  priority?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid?: Maybe<Scalars['Int']>;\n  userid?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectsTickets = {\n  __typename?: 'ProjectsTickets';\n  id: Scalars['Int'];\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: AuthResponse;\n  register: AuthResponse;\n  logout: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  demoLogin: AuthResponse;\n  addProject: Scalars['Boolean'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  noCookies?: Maybe<Scalars['Boolean']>;\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  noCookies?: Maybe<Scalars['Boolean']>;\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  userid: Scalars['String'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsTo: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsTo: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken'>\n  ) }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'projectid' | 'description'>\n  )> }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'ProjectsTickets' }\n    & Pick<ProjectsTickets, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  noCookies?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n  noCookies?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: String!, $userid: String!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsTo: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsTo: $belongsTo)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsTo: // value for 'belongsTo'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: String!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($userid: String!) {\n  deleteUser(userid: $userid)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($id: String!) {\n  getTicketDataById(id: $id) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    userid\n    id\n    priority\n    type\n    status\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!, $noCookies: Boolean) {\n  login(email: $email, password: $password, noCookies: $noCookies) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      noCookies: // value for 'noCookies'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!, $noCookies: Boolean) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname, noCookies: $noCookies) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *      noCookies: // value for 'noCookies'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: String!, $projectid: String!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;","module.exports = __webpack_public_path__ + \"static/media/unnamed.a812fbf5.webp\";"],"sourceRoot":""}