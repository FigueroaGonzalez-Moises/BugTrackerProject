{"version":3,"sources":["components/manage/ManRoles.tsx","components/tickets/TicketHistory.tsx","components/tickets/edit-ticket/EditTicket.tsx","components/tickets/edit-ticket/DevSub.tsx","components/tickets/edit-ticket/ProjectDD.tsx","components/tickets/edit-ticket/ProjectDDWrapper.tsx","components/tickets/edit-ticket/AssignProject.tsx","components/GetLocation.ts","accessToken.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/Sidenav.tsx","components/MobileSideNav.tsx","components/UI.tsx","clientSideAuth/checkAuth.js","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabs.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/Dashboard.tsx","components/manage/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/tickets/TicDetailsSubCom.tsx","components/tickets/Tickets.tsx","components/project/ProjectTickets.tsx","components/project/ProjectAssigned.tsx","components/project/ProjectDetails.tsx","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAss.tsx","components/project/edit-project/EditPTTable.tsx","components/project/EditProject.tsx","components/tickets/useGetUsers.tsx","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","routes/pmRoute.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","css/JsStyling.ts","generated/graphql.tsx","img/unnamed.webp","components/tickets/TicketComments.tsx"],"names":["ManageRoles","useGetUsersQuery","data","loading","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","useState","paginationLower","paginationUpper","limit","state","setState","useEffect","elems","document","querySelectorAll","M","Sidenav","init","className","setRole","e","i","a","target","role","value","id","getUsers","variables","window","location","reload","pagination","els","getElementsByClassName","el","classList","remove","getElementById","add","deleteUser","userid","name","toast","html","map","_val","eval","key","username","email","disabled","selected","onClick","firstname","lastname","type","min","max","onChange","length","TicketHistory","parentid","GetLocation","useGetHistoryQuery","console","log","getHistory","propertyChanged","oldValue","newValue","dateChanged","EditTicket","history","useHistory","useGetTicketDataByIdQuery","user","useSelector","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","setTitle","useSetTicketDescMutation","setDesc","useSetTicketPriorityMutation","setPriority","useDeleteTicketMutation","DeleteThisTicket","useAddTicketHistoryMutation","addHistory","status","title","description","priority","new","Dropdown","Modal","JsFooterStyling","onresize","getTicketDataById","to","setTicketStatus","ticketid","setTicketType","setTicketPriority","updateTicket","desc","deleteTicket","replace","htmlFor","data-error","developer","submitter","href","data-target","goBack","DevSub","props","useSetTicketDeveloperMutation","setDeveloper","dev","setDev","ProjectDD","useGetProjectDataByIdQuery","projectid","getProjectDataById","ProjectDDWrapper","useGetTicketProjectQuery","getTicketProject","AssignProject","useGetProjectDataQuery","useSetTicketProjectMutation","SetTicketProject","project","setProject","getProjectData","useLocation","pathname","tmp","split","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","useLoginMutation","login","useDemoLoginMutation","demoLogin","URI","submitForm","preventDefault","fetch","method","credentials","then","res","response2","localStorage","setItem","refreshToken","demoUser","response","Register","setUsername","setFirstname","setLastname","useRegisterMutation","register","push","N","loc","src","UserImage","alt","MobileSideNav","UI","children","useLogoutMutation","LOGOUT","client","hover","logout","resetStore","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","AdminRoute","error","changeIndicatorC","color","t","changeIndicatorT","subt","subt2","DashboardTabs","LStitle","getItem","chart","chartData","userTickets","useGetUserTicketsQuery","getUserTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","val","labels","datasets","label","backgroundColor","borderWidth","JSON","stringify","myTicketsByP","h","m","l","myTicketsByS","o","c","TicketsByP","TicketsByS","TicketsByT","Dashboard","LSname","LSchart","LSdata","parse","Cards","setChart","AutoInit","FloatingActionButton","hoverEnabled","Tooltip","position","setChartType","data-postion","data-tooltip","style","backgroundImage","temp","t1","concat","AddCard","options","responsive","ManageProjects","projectId","DetailsSubCom","keyprop","Projects","useGetUserProjectsQuery","getUserProjects","TicDetailsSubCom","UserTickets","Tickets","arr","j","slice","reverse","sortTicketsByPriority","ProjectTickets","useGetProjectTicketsQuery","getProjectTickets","ProjectAssigned","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","TicketDetails","ticket","belongsto","TicketComments","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","PROJECT_ID","assigned","FormSelect","modPersonnel","EditAss","EditPTTable","EditProject","pTitle","pDesc","useSetProjectDescMutation","useSetProjectTitleMutation","useDeleteProjectMutation","delProj","updateProject","deleteProject","useGetUsers","UsersArray","AddTicketToProject","useCreateTicketMutation","Submit","handleSubmit","toggle","belongsTo","SetTicketDev","CreateProject","useAddProjectMutation","SUBMIT","userids","usernames","userString","tmp2","indexOf","shift","q","q2","tmp3","PmRoute","Routes","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","headers","json","initState","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","undefined","innerWidth","AddCommentDocument","gql","useAddCommentMutation","baseOptions","ApolloReactHooks","AddProjectDocument","AddProjectUserDocument","AddTicketHistoryDocument","CreateTicketDocument","DeleteCommentDocument","useDeleteCommentMutation","DeleteProjectDocument","DeleteTicketDocument","DeleteUserDocument","DemoLoginDocument","GetCommentsDocument","useGetCommentsQuery","GetHistoryDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTicketDataByIdDocument","GetTicketProjectDocument","GetTicketsDocument","GetUserDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","LogoutDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SetProjectDescDocument","SetProjectTitleDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateCommentDocument","useUpdateCommentMutation","UpdateRoleDocument","GetUsersDocument","module","exports","ADD_COMMENT","DELETE_COMMENT","UPDATE_COMMENT","comment","setComment","addComment","setTimeout","deleteComment","commentid","updateComment","updatedMessage","comments","getComments","commenter","createdAt"],"mappings":"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","file":"static/js/main.f628425b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useGetUsersQuery,\r\n    useUpdateRoleMutation,\r\n    useDeleteUserMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n    const [state, setState] = useState({\r\n        paginationLower: \"1\",\r\n        paginationUpper: \"1\",\r\n        limit: \"4\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n        if (!id || !role) {\r\n        } else {\r\n            await updateRole({\r\n                variables: {\r\n                    role,\r\n                    id,\r\n                },\r\n            });\r\n\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n        setState({ ...state, paginationLower: id, paginationUpper: id });\r\n    };\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let userid = target.name;\r\n        let tmp = await DELETEUSER({\r\n            variables: {\r\n                userid,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: \"Error occurred while deleting user\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Manage Roles</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>UserName</th>\r\n                                <th className=\"nonessen\">Email</th>\r\n                                <th>Role</th>\r\n                                <th className=\"nonessen\">First Name</th>\r\n                                <th className=\"nonessen\">Last Name</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {data!.getUsers!.map((_val, i: number) => {\r\n                                if (\r\n                                    // eslint-disable-next-line\r\n                                    eval(\r\n                                        `(${state.paginationLower} - 1) *${state.limit}`\r\n                                    ) < i &&\r\n                                    i <=\r\n                                        // eslint-disable-next-line\r\n                                        eval(\r\n                                            `${state.paginationUpper}*${state.limit}`\r\n                                        )\r\n                                ) {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>\r\n                                                {data!.getUsers![i].username}\r\n                                            </td>\r\n                                            <td className=\"nonessen\">\r\n                                                {data!.getUsers![i].email}\r\n                                            </td>\r\n                                            <td>\r\n                                                <div className=\"input-field col s12\">\r\n                                                    <select className=\"browser-default capitalize\">\r\n                                                        <option\r\n                                                            value=\"\"\r\n                                                            className=\"capitalize\"\r\n                                                            disabled\r\n                                                            selected\r\n                                                        >\r\n                                                            {\r\n                                                                data!.getUsers![\r\n                                                                    i\r\n                                                                ].role\r\n                                                            }\r\n                                                        </option>\r\n                                                        <option\r\n                                                            value={`admin`}\r\n                                                            onClick={e => {\r\n                                                                setRole(e, i);\r\n                                                            }}\r\n                                                        >\r\n                                                            Admin\r\n                                                        </option>\r\n                                                        <option\r\n                                                            value={`developer`}\r\n                                                            onClick={e => {\r\n                                                                setRole(e, i);\r\n                                                            }}\r\n                                                        >\r\n                                                            Developer\r\n                                                        </option>\r\n                                                        <option\r\n                                                            value={`project-manager`}\r\n                                                            onClick={e => {\r\n                                                                setRole(e, i);\r\n                                                            }}\r\n                                                        >\r\n                                                            Project-manager\r\n                                                        </option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"nonessen\">\r\n                                                {data!.getUsers![i].firstname}\r\n                                            </td>\r\n                                            <td className=\"nonessen\">\r\n                                                {data!.getUsers![i].lastname}\r\n                                            </td>\r\n                                            <td>\r\n                                                <button\r\n                                                    name={`${\r\n                                                        data!.getUsers![i].id\r\n                                                    }`}\r\n                                                    onClick={e => {\r\n                                                        deleteUser(e);\r\n                                                    }}\r\n                                                    className=\"btn red\"\r\n                                                >\r\n                                                    Delete\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                    Page Limit:\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        max=\"100\"\r\n                        value={state.limit}\r\n                        onChange={e => {\r\n                            setState({ ...state, limit: e.target.value });\r\n                        }}\r\n                    />\r\n                    <ul className=\"pagination noselect\">\r\n                        {data.getUsers!.map((_val, i) => {\r\n                            if (\r\n                                i - 1 <\r\n                                // eslint-disable-next-line\r\n                                eval(`${data.getUsers!.length}/${state.limit}`)\r\n                            ) {\r\n                                if (i === 1) {\r\n                                    return (\r\n                                        <li\r\n                                            key={i}\r\n                                            className=\"active pag-active\"\r\n                                            id={`${i}li`}\r\n                                        >\r\n                                            {/* eslint-disable-next-line */}\r\n                                            <a\r\n                                                id={`${i}`}\r\n                                                onClick={e => {\r\n                                                    pagination(e);\r\n                                                }}\r\n                                            >\r\n                                                {i}\r\n                                            </a>\r\n                                        </li>\r\n                                    );\r\n                                }\r\n                                if (i !== 0) {\r\n                                    return (\r\n                                        <li key={i} id={`${i}li`}>\r\n                                            {/* eslint-disable-next-line */}\r\n                                            <a\r\n                                                id={`${i}`}\r\n                                                onClick={e => {\r\n                                                    pagination(e);\r\n                                                }}\r\n                                            >\r\n                                                {i}\r\n                                            </a>\r\n                                        </li>\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                return <></>;\r\n                            }\r\n                            return <></>;\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetHistoryQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst TicketHistory = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n    const { data, loading } = useGetHistoryQuery({ variables: { parentid } });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            History for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Property</th>\r\n                                    <th>Old Value</th>\r\n                                    <th>New Value</th>\r\n                                    <th>Date Changed</th>\r\n                                </tr>\r\n\r\n                                {!data || !data.getHistory.map ? (\r\n                                    <tr></tr>\r\n                                ) : (\r\n                                    data.getHistory.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .propertyChanged\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .oldValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .newValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .dateChanged\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketHistory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetTicketDataByIdQuery,\r\n    useSetTicketStatusMutation,\r\n    useSetTicketTypeMutation,\r\n    useSetTicketTitleMutation,\r\n    useSetTicketDescMutation,\r\n    useSetTicketPriorityMutation,\r\n    useDeleteTicketMutation,\r\n    useAddTicketHistoryMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport M from \"materialize-css\";\r\nimport { DevSub } from \"./DevSub\";\r\nimport { AssignProject } from \"./AssignProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from \"../../../css/JsStyling\";\r\n\r\nexport const EditTicket: React.FC = () => {\r\n    const history: any = useHistory();\r\n    let id = GetLocation();\r\n    // eslint-disable-next-line\r\n    var parentid = eval(id);\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const [setStatus] = useSetTicketStatusMutation();\r\n    const [setType] = useSetTicketTypeMutation();\r\n    const [setTitle] = useSetTicketTitleMutation();\r\n    const [setDesc] = useSetTicketDescMutation();\r\n    const [setPriority] = useSetTicketPriorityMutation();\r\n    const [DeleteThisTicket] = useDeleteTicketMutation();\r\n    const [addHistory] = useAddTicketHistoryMutation();\r\n    const [state, setState] = useState({\r\n        status: \"\",\r\n        type: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"\",\r\n        new: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (data.getTicketDataById.length === 0) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    const setTicketStatus = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].status!;\r\n        setState({ ...state, status });\r\n        let tmp = await setStatus({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                status: `${status}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Status successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketStatus\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: status,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const setTicketType = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].type!;\r\n        setState({ ...state, type });\r\n        let tmp = await setType({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                type: `${type}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Type successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketType\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: type,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const setTicketPriority = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].priority!;\r\n        setState({ ...state, priority });\r\n        let tmp = await setPriority({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                priority: `${priority}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Priority successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketPriority\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: priority,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const updateTicket = async () => {\r\n        if (state.title === \"\" && state.description === \"\") {\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            M.toast({ html: \"Not Enough Data Provided\" });\r\n        } else {\r\n            let oldValue: string = data.getTicketDataById[0].title!;\r\n            setState({ ...state, new: true });\r\n            if (state.title !== \"\") {\r\n                let tmp = await setTitle({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        title: `${state.title}`,\r\n                    },\r\n                });\r\n                if (tmp) {\r\n                    M.toast({ html: \"Ticket Title successfully changed\" });\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketTitle\",\r\n                            newValue: state.title,\r\n                            oldValue,\r\n                            parentid,\r\n                        },\r\n                    });\r\n                } else {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            }\r\n\r\n            if (state.description !== \"\") {\r\n                let tmp = await setDesc({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        desc: `${state.description}`,\r\n                    },\r\n                });\r\n                if (tmp) {\r\n                    M.toast({\r\n                        html: \"Ticket Description successfully changed\",\r\n                    });\r\n                } else {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            }\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    const deleteTicket = async () => {\r\n        await DeleteThisTicket({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n            },\r\n        });\r\n        window.location.replace(\"#/dashboard\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">Edit Ticket #{id}</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            {state.new ? (\r\n                                                <span>{state.title}</span>\r\n                                            ) : (\r\n                                                data.getTicketDataById[0]\r\n                                                    .title || (\r\n                                                    <span>No Title</span>\r\n                                                )\r\n                                            )}\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                {state.new ? (\r\n                                                    <span>\r\n                                                        {state.description}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    data.getTicketDataById[0]\r\n                                                        .description || (\r\n                                                        <span>\r\n                                                            No description\r\n                                                        </span>\r\n                                                    )\r\n                                                )}\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <DevSub\r\n                                developer={`${data.getTicketDataById[0].developer}`}\r\n                                submitter={`${data.getTicketDataById[0].submitter}`}\r\n                            />\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {user.role === \"developer\" ? (\r\n                                    <td>{data.getTicketDataById[0].title}</td>\r\n                                ) : (\r\n                                    <AssignProject\r\n                                        title={`${data.getTicketDataById[0].title}`}\r\n                                        id={id}\r\n                                    />\r\n                                )}\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        {state.priority !== \"\" ? (\r\n                                            <span>{state.priority}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .priority || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"low\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"medium\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"high\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .status || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"open\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"closed\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"on-hold\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        {state.type !== \"\" ? (\r\n                                            <span>{state.type}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0].type || (\r\n                                                <span>No Type</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"bugs/errors\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"features\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => updateTicket()}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE TICKET #{id}</h4>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteTicket()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useGetUsersQuery,\r\n    useSetTicketDeveloperMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\ninterface Props {\r\n    developer: string;\r\n    submitter: string;\r\n}\r\n\r\nexport const DevSub: React.FC<Props> = props => {\r\n    let id = GetLocation();\r\n    let developer = props.developer;\r\n    let submitter = props.submitter;\r\n    const [setDeveloper] = useSetTicketDeveloperMutation();\r\n    const [state, setState] = useState({\r\n        dev: \"\",\r\n    });\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <div className=\"progress\">\r\n                        <div className=\"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n    const setDev = async (e: React.SyntheticEvent) => {\r\n        if (user.role === \"admin\" || user.role === \"project-manager\") {\r\n            let target = e.target as HTMLButtonElement;\r\n            let dev = target.name;\r\n            setState({ ...state, dev });\r\n            let tmp = await setDeveloper({\r\n                variables: {\r\n                    ticketid: `${id}`,\r\n                    developer: `${dev}`,\r\n                },\r\n            });\r\n            if (tmp) {\r\n                M.toast({ html: \"Ticket Developer successfully changed\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                    <span>\r\n                        <a\r\n                            className=\"dropdown-trigger btn manage-dropdown\"\r\n                            href=\"#!\"\r\n                            data-target=\"dropdowndev\"\r\n                        >\r\n                            {state.dev !== \"\" ? (\r\n                                <span>{state.dev}</span>\r\n                            ) : (\r\n                                <span>{developer}</span> || (\r\n                                    <span>No Status</span>\r\n                                )\r\n                            )}\r\n                        </a>\r\n                        <ul id=\"dropdowndev\" className=\"dropdown-content\">\r\n                            {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                return (\r\n                                    <li key={i}>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name={`${getUsers[i].username}`}\r\n                                            onClick={e => setDev(e)}\r\n                                        >\r\n                                            {getUsers[i].username}\r\n                                        </button>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </span>\r\n                ) : (\r\n                    <span>{developer}</span>\r\n                )}\r\n            </td>\r\n            <td>\r\n                <span>{submitter}</span>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n","import { useGetProjectDataByIdQuery } from \"../../../generated/graphql\"\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n    projectid: string\r\n}\r\n\r\nexport const ProjectDD: React.FC<Props> = (props) => {\r\n    \r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: props.projectid }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            { data.getProjectDataById[0].title }\r\n        </span>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketProjectQuery } from \"../../../generated/graphql\"\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { ProjectDD } from \"./ProjectDD\";\r\n\r\nexport const ProjectDDWrapper: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetTicketProjectQuery({ variables: { \r\n        ticketid: `${id}`\r\n    }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            <ProjectDD projectid = {`${data.getTicketProject[0].projectid}`} />\r\n        </span>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useGetProjectDataQuery, useSetTicketProjectMutation } from '../../../generated/graphql';\r\nimport { ProjectDDWrapper } from './ProjectDDWrapper';\r\nimport { GetLocation } from '../../GetLocation';\r\ninterface Props {\r\n    title: string,\r\n    id: string\r\n}\r\n\r\nexport const AssignProject: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n    const [SetTicketProject] = useSetTicketProjectMutation();\r\n    const [state, setState] = useState({\r\n        project: '',\r\n    })\r\n    let ticketid = GetLocation();\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    \r\n    const setProject = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let projectid = target.name;\r\n        setState({...state, project: `${projectid}`})\r\n        await SetTicketProject({\r\n            variables: {\r\n                ticketid,\r\n                projectid \r\n            }\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <td>\r\n            {/* eslint-disable-next-line */}\r\n            <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownassign'>{state.project !== '' ? <span>{state.project}</span> : <ProjectDDWrapper />}</a>\r\n            <ul id='dropdownassign' className='dropdown-content'>\r\n                { data.getProjectData.map( ( _val, i, getProjectData ) => {\r\n                    return(\r\n                        <li key = {i}><button className = \"btnDropdown\" onClick = { (e) => setProject(e)} name = { `${getProjectData[i].projectid}` }>{ getProjectData[i].title }</button></li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </td>\r\n    );\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const GetLocation = () => {\r\n    let location = useLocation();\r\n    let id = location.pathname;\r\n    let tmp: any = id.split(':');\r\n    id = tmp[1];\r\n    return id;\r\n}","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useLoginMutation,\r\n    useDemoLoginMutation,\r\n} from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Login: React.FC<RouteComponentProps> = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async (e: any) => {\r\n        e.preventDefault();\r\n        try {\r\n            if (email.length > 1 && password.length > 1) {\r\n                await fetch(`${URI}/check-refresh-token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                }).then(async res => {\r\n                    if (res.status === 499) {\r\n                        const response2 = await login({\r\n                            variables: {\r\n                                email: email,\r\n                                password: password,\r\n                            },\r\n                        });\r\n\r\n                        if (response2 && response2.data) {\r\n                            setAccessToken(response2.data.login.accessToken);\r\n                            localStorage.setItem(\r\n                                \"refreshToken\",\r\n                                response2.data.login.refreshToken\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n                window.location.reload();\r\n            } else if (password.length < 1 && email.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            } else if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n        } catch (error) {\r\n            console.log(\"error :>> \", error);\r\n        }\r\n    };\r\n\r\n    const demoUser = async (e: React.SyntheticEvent, role: string) => {\r\n        e.preventDefault();\r\n        const response = await demoLogin({\r\n            variables: {\r\n                role,\r\n            },\r\n        });\r\n\r\n        if (response && response.data) {\r\n            setAccessToken(response.data.demoLogin.accessToken);\r\n            localStorage.setItem(\r\n                \"refreshToken\",\r\n                response.data.demoLogin.refreshToken\r\n            );\r\n        }\r\n\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                    onClick={e => submitForm(e)}\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </a>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"dd\")!\r\n                                        .classList.remove(\"hide\");\r\n                                }}\r\n                            >\r\n                                Demo User\r\n                            </button>\r\n                            <span\r\n                                className=\"dropdown-trigger btn stretched manage-dropdown hide\"\r\n                                id=\"dd\"\r\n                                data-target=\"dropdownRole\"\r\n                            >\r\n                                Role\r\n                            </span>\r\n                            <ul id=\"dropdownRole\" className=\"dropdown-content\">\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"admin\");\r\n                                        }}\r\n                                    >\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"developer\");\r\n                                        }}\r\n                                    >\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"project-manager\");\r\n                                        }}\r\n                                    >\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <span className=\"centered\">\r\n                                <div>\r\n                                    <u>\r\n                                        <a href=\"#/register\">Sign Up Here</a>\r\n                                    </u>\r\n                                </div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useRegisterMutation } from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [register] = useRegisterMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async () => {\r\n        if (\r\n            email.length > 1 &&\r\n            password.length > 1 &&\r\n            username.length > 1 &&\r\n            firstname.length > 1 &&\r\n            lastname.length > 1\r\n        ) {\r\n            await fetch(`${URI}/check-refresh-token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n            }).then(async res => {\r\n                if (res.status === 499) {\r\n                    const response2 = await register({\r\n                        variables: {\r\n                            email,\r\n                            password,\r\n                            username,\r\n                            role,\r\n                            firstname,\r\n                            lastname,\r\n                        },\r\n                    });\r\n\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.register.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.register.refreshToken\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById(\"username\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById(\"firstname\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById(\"lastname\")!.classList.add(\"invalid\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Sign Up</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"username\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={username}\r\n                                    onChange={e => setUsername(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a username\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span\r\n                                    className=\"dropdown-trigger btn manage-dropdown\"\r\n                                    id=\"roleDD\"\r\n                                    data-target=\"dropdownRole\"\r\n                                >\r\n                                    Role\r\n                                </span>\r\n                                <ul\r\n                                    id=\"dropdownRole\"\r\n                                    className=\"dropdown-content\"\r\n                                >\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"admin\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Admin\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"developer\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Developer\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"project-manager\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Project Manager\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"firstname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={firstname}\r\n                                    onChange={e => setFirstname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your first name\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"lastname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your last name \"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={e => submitForm()}\r\n                            >\r\n                                Register\r\n                            </button>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                >\r\n                                    Login Here\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport UserImage from \"../img/unnamed.webp\";\r\n\r\nexport const Sidenav = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        let loc = window.location.pathname;\r\n        document.getElementById(\"tickets\")!.classList.remove(\"active\");\r\n        document.getElementById(\"projects\")!.classList.remove(\"active\");\r\n        if (user.role === \"project-manager\" || user.role === \"admin\") {\r\n            document.getElementById(\"man-projects\")!.classList.remove(\"active\");\r\n        }\r\n        if (user.role === \"admin\") {\r\n            document.getElementById(\"man-roles\")!.classList.remove(\"active\");\r\n        }\r\n        document.getElementById(\"dashboard\")!.classList.remove(\"active\");\r\n        switch (loc) {\r\n            case \"/tickets\": {\r\n                document.getElementById(\"tickets\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-tickets\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/projects\": {\r\n                document.getElementById(\"projects\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-projects\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/manage-projects\": {\r\n                document\r\n                    .getElementById(\"man-projects\")!\r\n                    .classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-man-projects\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/manage-roles\": {\r\n                document.getElementById(\"man-roles\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-man-roles\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/dashboard\": {\r\n                document.getElementById(\"dashboard\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-dashboard\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n        }\r\n    });\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a href=\"#/manage-roles\" className=\"navLink\" id=\"man-roles\">\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import UserImage from \"../img/unnamed.webp\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\n\r\nexport const MobileSideNav = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {\" \"}\r\n                        {user.email} <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"mobile-dashboard\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-roles\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-roles\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            {\" \"}\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            {\" \"}\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"mobile-projects\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"mobile-tickets\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useLogoutMutation } from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { Sidenav } from \"./Sidenav\";\r\nimport { MobileSideNav } from \"./MobileSideNav\";\r\n\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems, {\r\n            hover: true,\r\n        });\r\n    });\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <ul id=\"user-actions\" className=\"dropdown-content\">\r\n                    <li>\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            onClick={() => {\r\n                                logout();\r\n                            }}\r\n                        >\r\n                            Logout\r\n                            <i className=\"material-icons\">exit_to_app</i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul id=\"notifications\" className=\"dropdown-content\">\r\n                    <li></li>\r\n                </ul>\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a href=\"#!\" className=\"brand-logo\">\r\n                            <i className=\"material-icons\">bug_report</i>{\" \"}\r\n                            <b>Bug Tracker</b>\r\n                        </a>\r\n\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            href=\"#\"\r\n                            data-target=\"slide-out\"\r\n                            className=\"sidenav-trigger\"\r\n                        >\r\n                            <i className=\"material-icons\">menu</i>\r\n                        </a>\r\n                        <ul\r\n                            id=\"nav-mobile\"\r\n                            className=\"right hide-on-med-and-down\"\r\n                        >\r\n                            <li>\r\n                                {/* eslint-disable-next-line */}\r\n                                <a\r\n                                    className=\"dropdown-trigger\"\r\n                                    data-target=\"user-actions\"\r\n                                >\r\n                                    USER ACTIONS{\" \"}\r\n                                    <i className=\"material-icons right\">\r\n                                        arrow_drop_down\r\n                                    </i>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">{children ? children : null}</span>\r\n        </div>\r\n    );\r\n};\r\n","import { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default checkAuth();","import React, { FC } from \"react\";\r\nimport { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: FC<IAuthRouteProps> = ({ component: Component, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthRoute;\r\n","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AdminRoute;","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove('indicator-pink');\r\n    t?.classList.remove('indicator-darkblue');\r\n    t?.classList.remove('indicator-cyan');\r\n    switch (color) {\r\n        case 'pink': {\r\n            t?.classList.add('indicator-pink');\r\n            break;\r\n        }\r\n        case 'dark-blue': {\r\n            t?.classList.add('indicator-darkblue');\r\n            break;\r\n        }\r\n        case 'cyan': {\r\n            t?.classList.add('indicator-cyan');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove('indicator-blue')\r\n    t?.classList.remove('indicator-yellow')\r\n    switch (color) {\r\n        case 'yellow': {\r\n            t?.classList.add('indicator-yellow');\r\n            subt?.classList.add('indicator-blue');\r\n            break;\r\n        }\r\n        case 'blue': {\r\n            t?.classList.add('indicator-blue');\r\n            subt2?.classList.add('indicator-yellow');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// export const changeIndicatorP = (i: string, color: string) => {\r\n//     let t = document.getElementById(`ul3${i}`)\r\n//     let subt = document.getElementById(`sub-tab3${i}`);\r\n//     let subt2 = document.getElementById(`sub-tab3.1${i}`);\r\n//     t?.classList.remove('indicator-orange');\r\n//     t?.classList.remove('indicator-blue');\r\n//     switch (color) {\r\n//         case 'orange': {\r\n//             t?.classList.add('indicator-orange');\r\n//             subt?.classList.add('indicator-blue');\r\n//             break;\r\n//         }\r\n//         case 'blue': {\r\n//             t?.classList.add('indicator-blue');\r\n//             subt2?.classList.add('indicator-orange');\r\n//             break;\r\n//         }\r\n//     }\r\n// }","import { useState } from \"react\";\r\nimport { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabs = () => {\r\n    let LStitle: any = localStorage.getItem(\"title\");\r\n    if (!!LStitle) {\r\n        LStitle = LStitle!.split(\",\");\r\n    }\r\n    const [title, setTitle] = useState({ title: LStitle || ([] as string[]) });\r\n    // eslint-disable-next-line\r\n    const [chartData, setChartData] = useState({ chart: [{}] });\r\n    const userTickets = useGetUserTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n    const tickets = useGetTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {};\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    return {\r\n        title,\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    };\r\n};\r\n","import { useGetUserTicketsQuery } from \"../../generated/graphql\"\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getUserTickets;\r\n}","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getTickets\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from \"react-chartjs-2\";\r\nimport M from \"materialize-css\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabs } from \"./DashboardTabs\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    let LSname: any = localStorage.getItem(\"chartType\");\r\n    if (!!LSname) {\r\n        LSname = LSname!.split(\",\");\r\n    }\r\n    let LSchart: any = localStorage.getItem(\"chart\");\r\n    if (!!LSchart) {\r\n        LSchart = LSchart.split(\",\");\r\n    }\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || ([] as string[]) });\r\n    const {\r\n        title,\r\n        myTicketsByS,\r\n        myTicketsByP,\r\n        myTicketsByT,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    } = DashboardTabs();\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        var elems = document.querySelectorAll(\".fixed-action-btn\");\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false,\r\n        });\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems, {\r\n            position: \"left\",\r\n        });\r\n    });\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat((temp! += 1));\r\n        setState({ ...state, Cards: state.Cards.concat((temp! += 1)) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat(\"\"),\r\n        });\r\n        localStorage.setItem(\"chart\", `${t1}`);\r\n    };\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp,\r\n            });\r\n            localStorage.setItem(\"chartType\", `${tmp}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <span>\r\n            <div className=\"fixed-action-btn\">\r\n                {/* eslint-disable-next-line */}\r\n                <a\r\n                    className=\"btn-floating tooltipped btn-large\"\r\n                    data-postion=\"left\"\r\n                    data-tooltip=\"ADD A CHART\"\r\n                    style={{\r\n                        backgroundImage:\r\n                            \"linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)\",\r\n                    }}\r\n                    onClick={() => {\r\n                        AddCard();\r\n                    }}\r\n                >\r\n                    <i className=\"material-icons\">insert_chart</i>\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                {state.Cards.map(function (_val: any, i: any) {\r\n                    return (\r\n                        <div className=\"col s11 m6 chart-lengthen\" key={i}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <span className=\"card-title center\">\r\n                                            {title!.title[i]}\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div className=\"row row-verticle-center\">\r\n                                        <div className=\"col l12 m12 s12 centered\">\r\n                                            {chart.name[i] === \"Donut\" &&\r\n                                            !!LSdata ? (\r\n                                                <Doughnut\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Bar\" &&\r\n                                            !!LSdata ? (\r\n                                                <Bar\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Pie\" &&\r\n                                            !!LSdata ? (\r\n                                                <Pie\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card-tabs\">\r\n                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                        <li className=\"tab\">\r\n                                            <a\r\n                                                className=\"active\"\r\n                                                href={`#tab${i}`}\r\n                                            >\r\n                                                Chart Type\r\n                                            </a>\r\n                                        </li>\r\n                                        <li className=\"tab\">\r\n                                            <a href={`#tab2${i}`}>Tickets </a>\r\n                                        </li>\r\n                                        {/* <li className=\"tab\"><a href={`#tab3${i}`}>Projects</a></li> */}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className=\"card-content grey lighten-4\">\r\n                                    <div id={`tab${i}`}>\r\n                                        <div className=\"card-tabs\">\r\n                                            <ul\r\n                                                id={`ul${i}`}\r\n                                                className=\"tabs tabs-fixed-width\"\r\n                                            >\r\n                                                <li className=\"tab\">\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a\r\n                                                        className=\"active\"\r\n                                                        onClick={() => {\r\n                                                            changeIndicatorC(\r\n                                                                `${i}`,\r\n                                                                \"pink\"\r\n                                                            );\r\n                                                        }}\r\n                                                    >\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Donut`}\r\n                                                            onClick={e =>\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Donut{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"dark-blue\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Pie`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Pie{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"cyan\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Bar`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Bar{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div id={`tab2${i}`}>\r\n                                        <ul\r\n                                            id={`ul2${i}`}\r\n                                            className=\"tabs tabs-fixed-width\"\r\n                                        >\r\n                                            <li className=\"tab my-tickets\">\r\n                                                <a\r\n                                                    className=\"active\"\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"yellow\"\r\n                                                        )\r\n                                                    }\r\n                                                    href={`#sub-tab2${i}`}\r\n                                                >\r\n                                                    My Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                            <li className=\"tab all-tickets\">\r\n                                                <a\r\n                                                    href={`#sub-tab2.1${i}`}\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"blue\"\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    All Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab2${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul\r\n                                                        id={`ul2${i}`}\r\n                                                        className=\"tabs tabs-fixed-width\"\r\n                                                    >\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active yellow-text\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByP!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Priority{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByS!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Status{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByT!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Type{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab2.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByP!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Priority{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByS!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Status{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByT!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Type{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* <div id={`tab3${i}`}>\r\n                                        <ul id={`ul3${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab\"><a className=\"active\" href={`#sub-tab3${i}`} onClick={() => changeIndicatorP(`${i}`, 'orange')}>My Projects</a></li>\r\n                                            <li className=\"tab\"><a href={`#sub-tab3.1${i}`} onClick={() => changeIndicatorP(`${i}`, 'blue')}>All Projects</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab3${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab3.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </span>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGetProjectDataQuery } from \"../../generated/graphql\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data , loading } = useGetProjectDataQuery();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Manage Projects</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><b>Project Name</b></th>\r\n                                <th className = \"nonessen\"><b>Description</b></th>\r\n                                <th><b>Users Assigned</b></th>\r\n                                <th className = \"noselect\"><b>Edit/Details</b></th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            { !!data.getProjectData.map ? data.getProjectData.map( (_val, i, getProjectData) => {\r\n                                let projectId = getProjectData[i].projectid;\r\n                                return(\r\n                                    <tr key = {i}>\r\n                                        <td> { getProjectData[i].title } </td>\r\n                                        <td className = \"nonessen\"> { getProjectData[i].description } </td>\r\n                                        <td> { getProjectData[i].projectid } </td>\r\n                                        <td> <a href = { `#/edit-project:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">edit</i>\r\n                                            </a> \r\n                                            <br /> \r\n                                            <a href = {`#/project-details:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">details</i>\r\n                                            </a>\r\n                                        </td> \r\n                                    </tr>\r\n                                );\r\n                            })\r\n                            :\r\n                                <tr></tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className = \"poormans-divider\"></div>\r\n                    <a href = \"#/create-project\"><button className = \"btn btn-ex safe-btn center footerBtn\">Add Project</button></a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number,\r\n    keyprop: number,\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${props.projectid}` }});\r\n\r\n    if (loading || !data) {\r\n        return(\r\n            <tr><td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td></tr>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.keyprop}>\r\n            <td>\r\n                { data.getProjectDataById[0].title }\r\n            </td>\r\n\r\n            <td className = \"nonessen\">\r\n                { data.getProjectDataById[0].description }\r\n            </td>\r\n\r\n            <td>\r\n                <a href = {`#/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading } = useGetUserProjectsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">My Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUserProjects!.map ? data!.getUserProjects!.map((_val, i, getUserProjects): JSX.Element => {\r\n                                return (\r\n                                    <DetailsSubCom projectid={getUserProjects[i].projectid} key={i} keyprop={i} />\r\n                                );\r\n                            })\r\n                                :\r\n                                <tr></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    UserTickets: any,\r\n    i: number\r\n}\r\n\r\nexport const TicDetailsSubCom: React.FC<Props> = (props) => {\r\n\r\n    const { data, loading } = useGetTicketDataByIdQuery( { \r\n        variables: { \r\n            id: `${props.UserTickets[props.i].ticketid}`\r\n        }})\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    <div className = \"progress\">\r\n                        <div className = \"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.i}>\r\n            { data.getTicketDataById.length !== 0 ? \r\n                <>\r\n                    <td>{ data.getTicketDataById[0].title }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].developer }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].priority }</td>\r\n                    <td>{ data.getTicketDataById[0].status }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].type }</td>\r\n                    <td className = \"noselect\"><a href = {`#/ticket-details:${props.UserTickets[props.i].ticketid}`}>Details</a></td>\r\n                </>\r\n                : null\r\n            }\r\n        </tr>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { TicDetailsSubCom } from \"./TicDetailsSubCom\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({});\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const sortTicketsByPriority = () => {\r\n        let arr = data.getUserTickets;\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (\r\n                j > 0 &&\r\n                ((arr[j].priority === \"high\" &&\r\n                    (arr[j - 1].priority === \"medium\" ||\r\n                        arr[j - 1].priority === \"low\")) ||\r\n                    (arr[j].priority === \"medium\" &&\r\n                        arr[j - 1].priority === \"low\"))\r\n            ) {\r\n                let tmp = arr.slice(j - 1, j + 1);\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n        setState({ arr });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Tickets</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th className=\"nonessen\">Developer Assigned</th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Priority\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => sortTicketsByPriority()}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>Ticket Status</th>\r\n                                <th className=\"nonessen\">Ticket Type</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getUserTickets.map ? (\r\n                                data.getUserTickets.map((_val, i) => {\r\n                                    return (\r\n                                        <TicDetailsSubCom\r\n                                            key={i}\r\n                                            UserTickets={data.getUserTickets}\r\n                                            i={i}\r\n                                        />\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectTickets: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({ variables: { id: `${id}` } });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectTickets!.map((_val, i, getProjectTickets): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectTickets[i].title} </td>\r\n                        <td className=\"capitalize nonessen\"> {getProjectTickets[i].submitter} </td>\r\n                        <td className=\"capitalize nonessen\"> {getProjectTickets[i].developer} </td>\r\n                        <td className=\"capitalize\"> {getProjectTickets[i].status} </td>\r\n                        <td> <a className=\"noselect\" href={`#/ticket-details:${getProjectTickets[i].ticketid}`}>Details</a> </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectAssigned: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data , loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className = \"progress\">\r\n                            <div className = \"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tbody>\r\n            { data!.getProjectUsersById!.map( (_val, i, getProjectUsersById): JSX.Element => { \r\n\r\n            return (\r\n                <tr key = {i}>\r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].username } </td> \r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].email } </td> \r\n                    <td className = \"capitalize\"> { getProjectUsersById[i].role } </td> \r\n                </tr>\r\n            );\r\n            })}\r\n        </tbody>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\nimport { ProjectTickets } from \"./ProjectTickets\";\r\nimport { ProjectAssigned } from \"./ProjectAssigned\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\n\r\nexport const ProjectDetails: React.FC = () => {\r\n    let history: any = useHistory();\r\n    let id = GetLocation();\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <span>\r\n            {data.getProjectDataById.length === 0 ? (\r\n                <Redirect to=\"#/dashboard\" />\r\n            ) : (\r\n                <div className=\"detailsWrapper container-fluid\">\r\n                    <div className=\"center-align table-wrapper\">\r\n                        <span className=\"table-header z-depth-2\">\r\n                            <h2 className=\"white-text\">\r\n                                Details for Project #{id}\r\n                            </h2>\r\n                        </span>\r\n\r\n                        <span className=\"table-body z-depth-1\">\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Project Name</th>\r\n                                        <th>Project Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {data.getProjectDataById[0].title}\r\n                                        </td>\r\n                                        <td>\r\n                                            {\r\n                                                data.getProjectDataById[0]\r\n                                                    .description\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row\">\r\n                                <span className=\"col s5 m5 l5 xl5\">\r\n                                    <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Assigned Personnel\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>User Name</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Email</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Role</b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <ProjectAssigned />\r\n                                    </table>\r\n                                </span>\r\n\r\n                                <span className=\"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                                    <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Tickets for Project #{id}\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>Title</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Submitter</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Developer</b>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <b>Status</b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <ProjectTickets />\r\n                                    </table>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n\r\n                            <button\r\n                                className=\"btn left footerBtn\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                Go Back\r\n                            </button>\r\n                            {user.role === \"developer\" ? null : (\r\n                                <a href={`#/edit-project:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useEffect } from \"react\";\r\nimport TicketComments from \"./TicketComments\";\r\nimport TicketHistory from \"./TicketHistory\";\r\n\r\nexport const TicketDetails: React.FC = () => {\r\n    const history = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data) {\r\n        return <span>no data</span>;\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n\r\n    return (\r\n        <span>\r\n            {ticket.length === 0 ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                <>\r\n                    <div className=\"detailsWrapper container-fluid\">\r\n                        <div className=\"center-align table-wrapper\">\r\n                            <span className=\"table-header z-depth-2\">\r\n                                <h2 className=\"white-text noselect\">\r\n                                    Details For Ticket #{id}\r\n                                </h2>\r\n                            </span>\r\n\r\n                            <span className=\"table-body z-depth-1\">\r\n                                <table className=\"striped responsive\">\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>TITLE</th>\r\n                                            <th>DESCRIPTION</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].title}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].description ||\r\n                                                    \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>ASSIGNED DEVELOPER</th>\r\n                                            <th>SUBMITTER</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].developer}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].submitter}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>BELONGS TO PROJECT</th>\r\n                                            <th>TICKET PRIORITY</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td>#{ticket[0].belongsto}</td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].priority}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>TICKET STATUS</th>\r\n                                            <th>TICKET TYPE</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].status}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].type || \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                                <div className=\"divider\"></div>\r\n\r\n                                <button\r\n                                    className=\"btn left footerBtn\"\r\n                                    onClick={() => history.goBack()}\r\n                                >\r\n                                    Go Back\r\n                                </button>\r\n                                <a href={`#/edit-ticket:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TicketComments />\r\n                    <TicketHistory />\r\n                </>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","\r\nexport const CheckIfInProject = (id: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers\r\n    for(let x = 0; x < users.length; x++) {\r\n        if(users[x].id === id) {\r\n            tmp = true\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n}","import { useGetUsersQuery, useAddProjectUserMutation, useRemoveProjectUserMutation } from \"../../../generated/graphql\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const USERS = (projectUsers: any) => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n    const PROJECT_ID = GetLocation();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({\r\n        assigned: projectUsers,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('select');\r\n        M.FormSelect.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const modPersonnel = async (i: number) => {\r\n        if(CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            await removeUser({ \r\n                variables: {\r\n                    userid: `${data!.getUsers![i].id}`,\r\n                    projectid: `${PROJECT_ID}`\r\n                }\r\n            });\r\n            M.toast({html: `Removed ${data!.getUsers![i].username}`});\r\n        } else {\r\n            await addUser({ \r\n                variables: {\r\n                    projectid: `${PROJECT_ID}`,\r\n                    userid: `${data!.getUsers![i].id}`\r\n                }\r\n            });\r\n            M.toast({html: `Added ${data!.getUsers![i].username}`});\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select className = \"browser-default\">\r\n                    <option value=\"\" disabled selected>Click to add/remove</option>\r\n                    { data!.getUsers!.map( ( _val, i, getUsers ) => {\r\n                        return(\r\n                            <option key={ i } onClick = { () => { modPersonnel(i) } }>  { getUsers[i].username } </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\n\r\n\r\nexport const EditAss: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` } });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectUsersById!.map((_val, i, getProjectUsersById): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].username} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].email} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].role} </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n\r\n            <tr>\r\n                <USERS projectUsers={data.getProjectUsersById} />\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${id}`,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {!!data ? (\r\n                data!.getProjectTickets.map((_val, i, getProjectTickets) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td> {getProjectTickets[i].title} </td>\r\n                            <td> {getProjectTickets[i].submitter} </td>\r\n                            <td> {getProjectTickets[i].developer} </td>\r\n                            <td> {getProjectTickets[i].status} </td>\r\n                            <td>\r\n                                <a\r\n                                    href={`#/edit-ticket:${getProjectTickets[i].ticketid}`}\r\n                                >\r\n                                    EDIT\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            ) : (\r\n                <tr></tr>\r\n            )}\r\n            <tr>\r\n                <td>\r\n                    <a href={`#/project-add:${id}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            Add Ticket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery, useSetProjectDescMutation, useSetProjectTitleMutation, useDeleteProjectMutation } from \"../../generated/graphql\";\r\nimport { EditAss } from \"./edit-project/EditAss\";\r\nimport { EditPTTable } from \"./edit-project/EditPTTable\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { JsFooterStyling } from \"../../css/JsStyling\";\r\n\r\nexport const EditProject: React.FC = () => {\r\n    const history: any = useHistory(); \r\n    const [state, setState] = useState({\r\n        pTitle: '',\r\n        pDesc: '',\r\n    });\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${id}` }});\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getProjectDataById.length === 0) {\r\n        return(\r\n            <Redirect to = '/manage-projects' />\r\n        )\r\n    }\r\n\r\n    const updateProject = async () => {\r\n        if(state.pDesc !== '' || state.pTitle !== '') {\r\n            if(state.pTitle !== '') {\r\n                setTitle({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        title: `${state.pTitle}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Title Successfully Changed'});\r\n            }\r\n            if(state.pDesc !== '') {\r\n                setDesc({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        description: `${state.pDesc}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Description Successfully Changed'});\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteProject = async () => {\r\n        let tmp = await delProj({\r\n            variables: {\r\n                projectid: `${id}`\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({html: 'An Error Occured while deleting project'});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"detailsWrapper container-fluid\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    \r\n                    <h2 className = \"white-text\">Edit Project #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"responsive-table striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-name\" value = { state.pTitle } onChange = { (e) => setState({ ...state, pTitle: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-name\">{state.pTitle !== '' ? <span>{state.pTitle}</span> : data.getProjectDataById[0].title }</label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-desc\" value = { state.pDesc } onChange = { (e) => setState({ ...state, pDesc: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-desc\">{state.pDesc !== '' ? <span>{state.pDesc}</span> : data.getProjectDataById[0].description}</label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"row\">\r\n                        <span className = \"col s5 m5 l5 xl5\">\r\n                            <span className = 'personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                <h3 className = \"white-text\">Assigned Personnel</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>User Name</b></th>\r\n                                        <th><b>Email</b></th>\r\n                                        <th><b>Role</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAss />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className = \"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className = \"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className = \"white-text\">Tickets for Project #{id}</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>Title</b></th>\r\n                                        <th><b>Submitter</b></th>\r\n                                        <th><b>Developer</b></th>\r\n                                        <th><b>Status</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => {updateProject()} }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE PROJECT #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteProject() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    \r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n\r\n    } else {\r\n        let UsersArray = data.getUsers\r\n        return {\r\n            UsersArray\r\n        }\r\n    }\r\n\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../tickets/useGetUsers\";\r\nimport { useCreateTicketMutation } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const AddTicketToProject: React.FC = () => {\r\n    const UsersArray = useGetUsers();\r\n    const history = useHistory();\r\n    const id = GetLocation();\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',})\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        dev: '',\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if(!UsersArray) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if(state.status === '' || state.type === '' || state.title === '' || state.description === '' || state.priority === '') {\r\n            M.toast({html: 'Missing Data'});\r\n            document.getElementById('dev-hpr-br')?.classList.add('hide');\r\n            document.getElementById('dev-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('status-hpr-br')?.classList.add('hide');\r\n            document.getElementById('status-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('type-hpr-br')?.classList.add('hide');\r\n            document.getElementById('type-hpr')?.classList.add('hide');\r\n\r\n            document.getElementById('pri-hpr-br')?.classList.add('hide');\r\n            document.getElementById('pri-hpr')?.classList.add('hide');\r\n\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.type === '') {\r\n                document.getElementById('type-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('type-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.status === '') {\r\n                document.getElementById('status-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('status-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.dev === '') {\r\n                document.getElementById('dev-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('dev-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.priority === '') {\r\n                document.getElementById('pri-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('pri-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n        } else {\r\n            await Submit({\r\n                variables: {\r\n                    title: state.title,\r\n                    description: state.description,\r\n                    belongsTo: `${id}`,\r\n                    developer: state.dev,\r\n                    priority: state.priority,\r\n                    status: state.status,\r\n                    submitter: user.username,\r\n                    type: state.type\r\n                }\r\n            })\r\n            history.push({ pathname: '#/manage' })   \r\n        }\r\n    }\r\n\r\n    const setTicketType = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n    }\r\n    \r\n    const setTicketStatus = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n    }\r\n\r\n    const SetTicketDev = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let dev = target.name;\r\n        setState({...state, dev});\r\n    }\r\n\r\n    const setTicketPriority = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority});\r\n    }\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Create Ticket</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">ADD A TITLE</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">ADD A DESCRIPTION</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownDev'>{ state.dev !== '' ? <span>{ state.dev }</span> : <span>Assign a Developer</span>}</a>\r\n                                    <ul id='dropdownDev' className='dropdown-content'>\r\n                                        { UsersArray!.UsersArray!.map((_val, i, UsersArray) => {\r\n                                            return(\r\n                                                <li key = {i}><button className = \"btnDropdown\" name = {`${UsersArray[i].username}`} onClick = { (e) => SetTicketDev(e) }>{UsersArray[i].username}</button></li>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"dev-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"dev-hpr\">Please Assign a Developer</span>\r\n                                </td>\r\n                                <td>{ user.username } (YOU)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    #{id}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : <span>Ticket Priority</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e)}>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e)}>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e)}>High</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"pri-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"pri-hpr\">Please Assign a Ticket Priority</span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{ state.status !== '' ? <span>{ state.status }</span> : <span>Set Ticket Status</span> }</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"status-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"status-hpr\">Please Select a Ticket Status</span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{ state.type !== '' ? <span>{ state.type }</span> : <span>Set Ticket Type</span> }</a>\r\n                                    <ul id='dropdowntype' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"bugs-errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"type-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"type-hpr\">Please Select a Ticket Type</span>\r\n                                </td>\r\n\r\n                            </tr> \r\n                            \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n\r\n                    <div className = \"row\">\r\n                        <button className = \"btn left footerBtn modal-trigger\" data-target = \"cancelModal\">Back</button>\r\n                        <button className = \"btn right safe-btn\" onClick = { () => handleSubmit()}>Submit</button>\r\n                    </div>\r\n\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                        <button className  = \"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                        <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => history.goBack() }>CANCEL</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useAddProjectMutation } from \"../../../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../tickets/useGetUsers\";\r\n\r\nexport const CreateProject: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const history = useHistory();\r\n    const UsersArray = useGetUsers();\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [state, setState] = useState({\r\n        title: '',\r\n        description: '',\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n\r\n    if (loading || !data || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === '' || state.description === '') {\r\n            if (state.title === '') {\r\n                document.getElementById('title')?.classList.add('invalid');\r\n            }\r\n            if (state.description === '') {\r\n                document.getElementById('desc')?.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({ html: 'Missing Data' });\r\n        } else {\r\n            await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users: state.userString\r\n                }\r\n            })\r\n            M.toast({ html: 'Project added successfully' });\r\n            window.location.replace('/manage-projects');\r\n        }\r\n    }\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n        setState({ ...state, userids: tmp, usernames: tmp2 });\r\n        setState({ ...state, userString: tmp3 });\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">Create Project</h2>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input type=\"text\" id=\"title\" className=\"validate\" value={state.title} onChange={(e) => setState({ ...state, title: e.target.value })} />\r\n                                            <label htmlFor=\"title\">ADD A TITLE</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input type=\"text\" id=\"desc\" className=\"validate\" value={state.description} onChange={(e) => setState({ ...state, description: e.target.value })} />\r\n                                                <label htmlFor=\"desc\">ADD A DESCRIPTION</label>\r\n                                                <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className='personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                    <h3 className=\"white-text\">Assign Personnel</h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map((_val, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    {state.usernames[i]}\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n\r\n\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>Click to add/remove</option>\r\n                                        {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                            return (\r\n                                                <option key={i} onClick={() => { addUser(getUsers[i].id, getUsers[i].username) }}>  {getUsers[i].username} </option>\r\n                                            );\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn left footerBtn modal-trigger modal-trigger\" data-target=\"cancelModal\">Back</button>\r\n                            <button className=\"btn right safe-btn\" onClick={() => handleSubmit()}>Submit</button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                            <button className=\"modal-close red white-text waves-effect waves-red btn-flat\" onClick={() => history.goBack()}>CANCEL</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'project-manager' || user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    } \r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PmRoute;","import AuthRoute from \"./authRoute\";\r\nimport AdminRoute from \"./adminRoute\";\r\nimport React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport { Dashboard } from \"../components/Dashboard/Dashboard\";\r\nimport { ManageRoles } from \"../components/manage/ManRoles\";\r\nimport { ManageProjects } from \"../components/manage/ManProjects\";\r\nimport { Projects } from \"../components/project/Projects\";\r\nimport { Tickets } from \"../components/tickets/Tickets\";\r\nimport { ProjectDetails } from \"../components/project/ProjectDetails\";\r\nimport { TicketDetails } from \"../components/tickets/TicketDetails\";\r\nimport { EditProject } from \"../components/project/EditProject\";\r\nimport { EditTicket } from \"../components/tickets/edit-ticket/EditTicket\";\r\nimport { AddTicketToProject } from \"../components/project/AddTicketToProject\";\r\nimport { CreateProject } from \"../components/project/create-project/CreateProject\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport PmRoute from \"./pmRoute\";\r\nimport TicketComments from \"../components/tickets/TicketComments\";\r\n\r\nexport const Routes: React.FC = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <AdminRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-roles\"\r\n                component={ManageRoles}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-projects\"\r\n                component={ManageProjects}\r\n            />\r\n            <AuthRoute exact path=\"/projects\" component={Projects} />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/create-project\"\r\n                component={CreateProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/edit-project:id\"\r\n                component={EditProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/project-add:id\"\r\n                component={AddTicketToProject}\r\n            />\r\n            <AuthRoute path=\"/project-details:id\" component={ProjectDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketComments} />\r\n            <AuthRoute path=\"/edit-ticket:id\" component={EditTicket} />\r\n            <AuthRoute exact path=\"/tickets\" component={Tickets} />\r\n            <Route render={() => <Redirect to=\"/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { useGetUserQuery } from \"./generated/graphql\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { Register } from \"./components/auth/Register\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { UI } from \"./components/UI\";\nimport { checkAuth } from \"./clientSideAuth/checkAuth.js\";\nimport { Routes } from \"./routes/Routes\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"./redux/actions/userActions\";\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch();\n    const { data, loading, error } = useGetUserQuery();\n\n    if (loading) {\n        return (\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n            </div>\n        );\n    } else if (!error && data) {\n        const user = data.getUser;\n        if (checkAuth()) {\n            if (user) {\n                dispatch(setUserInfo(user));\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <UI children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/register\" component={Register} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import { User, Project } from \"../RootReducer\";\r\n\r\n\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: 'ADD_USER_INFO', user: user\r\n    }\r\n}\r\n\r\nexport const passProjectInfo = (project: Project) => {\r\n    return {\r\n        type: 'PASS_PROJECT_INFO', project: project\r\n    }\r\n}","import App from \"./App\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport \"./css/dashboard.scss\";\r\nimport \"./css/login.scss\";\r\nimport \"./css/manage.scss\";\r\nimport \"./css/medias.scss\";\r\nimport \"./css/nav.scss\";\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        let tmp = localStorage.getItem(\"refreshToken\") as string;\r\n\r\n        fetch(`${URI}/refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"refreshToken\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        M.AutoInit();\r\n    }, [URI]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"preloader-wrapper big active\">\r\n                ...loading\r\n                <div className=\"spinner-layer spinner-blue\">\r\n                    <div className=\"circle-clipper left\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                    <div className=\"gap-patch\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                    <div className=\"circle-clipper right\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number,\r\n    email: string,\r\n    role: string,\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport type Project = {\r\n    title: string,\r\n    description: string,\r\n    projectid: number,\r\n}\r\n\r\nexport interface State {\r\n    user?: User\r\n    project?: Project\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: '',\r\n        role: '',\r\n        username: '',\r\n        firstname: '',\r\n        lastname: '',\r\n    },\r\n\r\n    project: {\r\n        title: '',\r\n        description: '',\r\n        projectid: 0,\r\n    }\r\n}\r\n\r\n\r\ntype Actions = {\r\n    user?: any,\r\n    type: string,\r\n    project: Project,\r\n}\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch(action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return {...state, user: action.user};\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return {...state, project: action.project}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { store } from \"./redux/ReduxStore\";\nimport { Provider } from \"react-redux\";\n\nconst cache = new InMemoryCache({});\nvar URI = \"\";\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nif (process.env.NODE_ENV === \"production\") {\n    URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\n} else {\n    URI = \"http://localhost:4000\";\n}\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <AppWrapper />\n            </Provider>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","export const JsFooterStyling = () => {\r\n    if( window.innerWidth !== undefined ) {\r\n        if(window.innerWidth < 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.add('hide');\r\n                document!.getElementById('deleteBtn')!.classList.remove('center');\r\n                document!.getElementById('deleteBtn')!.classList.add('left');\r\n                document!.getElementById('deleteBtn')!.classList.add('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.add('btn-ex-40');\r\n            }\r\n\r\n        }\r\n        if(window.innerWidth > 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.remove('hide');\r\n                document!.getElementById('deleteBtn')!.classList.add('center');\r\n                document!.getElementById('deleteBtn')!.classList.remove('left');\r\n                document!.getElementById('deleteBtn')!.classList.remove('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.remove('btn-ex-40');\r\n            }\r\n        }\r\n    }\r\n}","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<ProjectData>;\n  getProjectDataById: Array<ProjectData>;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<TicketData>;\n  getTicketDataById: Array<TicketData>;\n  getUserTickets: Array<UserTicketsPlus>;\n  getTicketProject: Array<ProjectsTickets>;\n  getComments: Array<Comments>;\n  getHistory: Array<History>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type QueryGetCommentsArgs = {\n  parentid: Scalars['Float'];\n};\n\n\nexport type QueryGetHistoryArgs = {\n  parentid: Scalars['Float'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type ProjectData = {\n  __typename?: 'ProjectData';\n  projectid?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  id: Scalars['Int'];\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n};\n\nexport type TicketData = {\n  __typename?: 'TicketData';\n  ticketid: Scalars['Int'];\n  priority?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid?: Maybe<Scalars['Int']>;\n  userid?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectsTickets = {\n  __typename?: 'ProjectsTickets';\n  id: Scalars['Int'];\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Comments = {\n  __typename?: 'Comments';\n  commentid: Scalars['Int'];\n  comment: Scalars['String'];\n  parentid: Scalars['Int'];\n  commenterid: Scalars['Int'];\n  commenter: Scalars['String'];\n  createdAt: Scalars['String'];\n};\n\nexport type History = {\n  __typename?: 'History';\n  id: Scalars['Int'];\n  parentid: Scalars['Int'];\n  propertyChanged: Scalars['String'];\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  dateChanged: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: AuthResponse;\n  register: AuthResponse;\n  logout: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  demoLogin: AuthResponse;\n  addProject: Scalars['Boolean'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n  addComment: Scalars['Boolean'];\n  deleteComment: Scalars['Boolean'];\n  updateComment: Scalars['Boolean'];\n  addTicketHistory: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  userid: Scalars['String'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsTo: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationAddCommentArgs = {\n  parentid: Scalars['Float'];\n  comment: Scalars['String'];\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationUpdateCommentArgs = {\n  updatedMessage: Scalars['String'];\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationAddTicketHistoryArgs = {\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  propertyChanged: Scalars['String'];\n  parentid: Scalars['Float'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type AddCommentMutationVariables = Exact<{\n  comment: Scalars['String'];\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type AddCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addComment'>\n);\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type AddTicketHistoryMutationVariables = Exact<{\n  parentid: Scalars['Float'];\n  propertyChanged: Scalars['String'];\n  newValue: Scalars['String'];\n  oldValue: Scalars['String'];\n}>;\n\n\nexport type AddTicketHistoryMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTicketHistory'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsTo: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n}>;\n\n\nexport type DeleteCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteComment'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type GetCommentsQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetCommentsQuery = (\n  { __typename?: 'Query' }\n  & { getComments: Array<(\n    { __typename?: 'Comments' }\n    & Pick<Comments, 'commentid' | 'comment' | 'commenter' | 'createdAt'>\n  )> }\n);\n\nexport type GetHistoryQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetHistoryQuery = (\n  { __typename?: 'Query' }\n  & { getHistory: Array<(\n    { __typename?: 'History' }\n    & Pick<History, 'id' | 'propertyChanged' | 'oldValue' | 'newValue' | 'dateChanged'>\n  )> }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'projectid' | 'description'>\n  )> }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'ProjectsTickets' }\n    & Pick<ProjectsTickets, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n  updatedMessage: Scalars['String'];\n}>;\n\n\nexport type UpdateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateComment'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddCommentDocument = gql`\n    mutation addComment($comment: String!, $parentid: Float!) {\n  addComment(comment: $comment, parentid: $parentid)\n}\n    `;\nexport type AddCommentMutationFn = ApolloReactCommon.MutationFunction<AddCommentMutation, AddCommentMutationVariables>;\n\n/**\n * __useAddCommentMutation__\n *\n * To run a mutation, you first call `useAddCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommentMutation, { data, loading, error }] = useAddCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useAddCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommentMutation, AddCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommentMutation, AddCommentMutationVariables>(AddCommentDocument, baseOptions);\n      }\nexport type AddCommentMutationHookResult = ReturnType<typeof useAddCommentMutation>;\nexport type AddCommentMutationResult = ApolloReactCommon.MutationResult<AddCommentMutation>;\nexport type AddCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommentMutation, AddCommentMutationVariables>;\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: String!, $userid: String!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const AddTicketHistoryDocument = gql`\n    mutation addTicketHistory($parentid: Float!, $propertyChanged: String!, $newValue: String!, $oldValue: String!) {\n  addTicketHistory(parentid: $parentid, propertyChanged: $propertyChanged, newValue: $newValue, oldValue: $oldValue)\n}\n    `;\nexport type AddTicketHistoryMutationFn = ApolloReactCommon.MutationFunction<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\n\n/**\n * __useAddTicketHistoryMutation__\n *\n * To run a mutation, you first call `useAddTicketHistoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTicketHistoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTicketHistoryMutation, { data, loading, error }] = useAddTicketHistoryMutation({\n *   variables: {\n *      parentid: // value for 'parentid'\n *      propertyChanged: // value for 'propertyChanged'\n *      newValue: // value for 'newValue'\n *      oldValue: // value for 'oldValue'\n *   },\n * });\n */\nexport function useAddTicketHistoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>(AddTicketHistoryDocument, baseOptions);\n      }\nexport type AddTicketHistoryMutationHookResult = ReturnType<typeof useAddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationResult = ApolloReactCommon.MutationResult<AddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsTo: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsTo: $belongsTo)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsTo: // value for 'belongsTo'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteCommentDocument = gql`\n    mutation deleteComment($commentid: Float!) {\n  deleteComment(commentid: $commentid)\n}\n    `;\nexport type DeleteCommentMutationFn = ApolloReactCommon.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;\n\n/**\n * __useDeleteCommentMutation__\n *\n * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *   },\n * });\n */\nexport function useDeleteCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, baseOptions);\n      }\nexport type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;\nexport type DeleteCommentMutationResult = ApolloReactCommon.MutationResult<DeleteCommentMutation>;\nexport type DeleteCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: String!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($userid: String!) {\n  deleteUser(userid: $userid)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetCommentsDocument = gql`\n    query getComments($parentid: Float!) {\n  getComments(parentid: $parentid) {\n    commentid\n    comment\n    commenter\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetCommentsQuery__\n *\n * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCommentsQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n      }\nexport function useGetCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n        }\nexport type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;\nexport type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;\nexport type GetCommentsQueryResult = ApolloReactCommon.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;\nexport const GetHistoryDocument = gql`\n    query getHistory($parentid: Float!) {\n  getHistory(parentid: $parentid) {\n    id\n    propertyChanged\n    oldValue\n    newValue\n    dateChanged\n  }\n}\n    `;\n\n/**\n * __useGetHistoryQuery__\n *\n * To run a query within a React component, call `useGetHistoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetHistoryQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetHistoryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n      }\nexport function useGetHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n        }\nexport type GetHistoryQueryHookResult = ReturnType<typeof useGetHistoryQuery>;\nexport type GetHistoryLazyQueryHookResult = ReturnType<typeof useGetHistoryLazyQuery>;\nexport type GetHistoryQueryResult = ApolloReactCommon.QueryResult<GetHistoryQuery, GetHistoryQueryVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($id: String!) {\n  getTicketDataById(id: $id) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    userid\n    id\n    priority\n    type\n    status\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: String!, $projectid: String!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateCommentDocument = gql`\n    mutation updateComment($commentid: Float!, $updatedMessage: String!) {\n  updateComment(commentid: $commentid, updatedMessage: $updatedMessage)\n}\n    `;\nexport type UpdateCommentMutationFn = ApolloReactCommon.MutationFunction<UpdateCommentMutation, UpdateCommentMutationVariables>;\n\n/**\n * __useUpdateCommentMutation__\n *\n * To run a mutation, you first call `useUpdateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCommentMutation, { data, loading, error }] = useUpdateCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *      updatedMessage: // value for 'updatedMessage'\n *   },\n * });\n */\nexport function useUpdateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCommentMutation, UpdateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument, baseOptions);\n      }\nexport type UpdateCommentMutationHookResult = ReturnType<typeof useUpdateCommentMutation>;\nexport type UpdateCommentMutationResult = ApolloReactCommon.MutationResult<UpdateCommentMutation>;\nexport type UpdateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCommentMutation, UpdateCommentMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;","module.exports = __webpack_public_path__ + \"static/media/unnamed.a812fbf5.webp\";","import React, { useState } from \"react\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport M from \"materialize-css\";\r\nimport {\r\n    useAddCommentMutation,\r\n    useGetCommentsQuery,\r\n    useDeleteCommentMutation,\r\n    useUpdateCommentMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst TicketComments: React.FC = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n\r\n    const [ADD_COMMENT] = useAddCommentMutation();\r\n    const [DELETE_COMMENT] = useDeleteCommentMutation();\r\n    const [UPDATE_COMMENT] = useUpdateCommentMutation();\r\n    const { data, loading } = useGetCommentsQuery({ variables: { parentid } });\r\n    const [comment, setComment] = useState(\"\");\r\n    const addComment = async () => {\r\n        if (comment.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await ADD_COMMENT({\r\n                variables: {\r\n                    comment,\r\n                    parentid,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment added successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteComment = async (commentid: number) => {\r\n        if (!!commentid) {\r\n            let tmp = await DELETE_COMMENT({ variables: { commentid } });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Deleted Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateComment = async (commentid: number, updatedMessage: string) => {\r\n        if (updatedMessage.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await UPDATE_COMMENT({\r\n                variables: {\r\n                    commentid,\r\n                    updatedMessage,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Updated Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let comments: any = data?.getComments;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            Comments for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Commenter</th>\r\n                                    <th>Comment</th>\r\n                                    <th className=\"nonessen\">Created At</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n\r\n                                {comments.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].commenter}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].comment}\r\n                                            </td>\r\n                                            <td className=\"capitalize nonessen\">\r\n                                                {comments[i].createdAt}\r\n                                            </td>\r\n                                            <td>\r\n                                                <i\r\n                                                    className=\"material-icons red-text\"\r\n                                                    onClick={() =>\r\n                                                        deleteComment(\r\n                                                            comments[i]\r\n                                                                .commentid\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    delete\r\n                                                </i>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"comment\"\r\n                                    type=\"text\"\r\n                                    value={comment}\r\n                                    onChange={e => setComment(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"comment\">Add A Comment</label>\r\n                                <button\r\n                                    className=\"btn btn-ex safe-btn center footerBtn\"\r\n                                    onClick={() => addComment()}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketComments;\r\n"],"sourceRoot":""}