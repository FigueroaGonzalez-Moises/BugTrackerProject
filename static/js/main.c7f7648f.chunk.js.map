{"version":3,"sources":["components/manage/ManRoles.tsx","accessToken.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/Sidenav.tsx","components/MobileSideNav.tsx","components/UI.tsx","clientSideAuth/checkAuth.js","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabs.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/Dashboard.tsx","components/manage/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/tickets/TicDetailsSubCom.tsx","components/tickets/Tickets.tsx","components/GetLocation.ts","components/project/ProjectTickets.tsx","components/project/ProjectAssigned.tsx","components/project/ProjectDetails.tsx","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAss.tsx","components/project/edit-project/EditPTTable.tsx","css/JsStyling.ts","components/project/EditProject.tsx","components/tickets/edit-ticket/DevSub.tsx","components/tickets/edit-ticket/ProjectDD.tsx","components/tickets/edit-ticket/ProjectDDWrapper.tsx","components/tickets/edit-ticket/AssignProject.tsx","components/tickets/edit-ticket/EditTicket.tsx","components/tickets/useGetUsers.tsx","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","routes/pmRoute.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","generated/graphql.tsx","img/unnamed.webp"],"names":["ManageRoles","useGetUsersQuery","data","loading","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","useState","paginationLower","paginationUpper","limit","state","setState","useEffect","elems","document","querySelectorAll","M","Sidenav","init","className","setRole","e","i","a","target","role","value","id","getUsers","variables","window","location","reload","pagination","els","getElementsByClassName","el","classList","remove","getElementById","add","deleteUser","userid","name","toast","html","map","_val","eval","key","username","email","disabled","selected","onClick","firstname","lastname","type","min","max","onChange","length","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","useLoginMutation","login","useDemoLoginMutation","demoLogin","Dropdown","submitForm","preventDefault","response","demoUser","htmlFor","data-error","href","data-target","Register","history","setUsername","setFirstname","setLastname","useRegisterMutation","register","push","N","user","useSelector","loc","pathname","src","UserImage","alt","MobileSideNav","UI","children","useLogoutMutation","LOGOUT","client","hover","logout","resetStore","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","AdminRoute","error","console","log","changeIndicatorC","color","t","changeIndicatorT","subt","subt2","DashboardTabs","LStitle","localStorage","getItem","split","title","setTitle","chart","chartData","userTickets","useGetUserTicketsQuery","getUserTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","tmp","val","labels","datasets","label","backgroundColor","borderWidth","setItem","JSON","stringify","myTicketsByP","h","m","l","priority","myTicketsByS","o","c","status","TicketsByP","TicketsByS","TicketsByT","Dashboard","LSname","LSchart","LSdata","parse","Cards","setChart","AutoInit","FloatingActionButton","hoverEnabled","Tooltip","position","setChartType","data-postion","data-tooltip","style","backgroundImage","temp","t1","concat","AddCard","options","responsive","ManageProjects","useGetProjectDataQuery","getProjectData","projectId","projectid","description","DetailsSubCom","useGetProjectDataByIdQuery","keyprop","getProjectDataById","Projects","useGetUserProjectsQuery","getUserProjects","TicDetailsSubCom","useGetTicketDataByIdQuery","UserTickets","ticketid","getTicketDataById","developer","Tickets","arr","j","slice","reverse","sortTicketsByPriority","GetLocation","useLocation","ProjectTickets","useGetProjectTicketsQuery","getProjectTickets","submitter","ProjectAssigned","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","useHistory","goBack","TicketDetails","ticket","belongsto","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","PROJECT_ID","assigned","FormSelect","modPersonnel","EditAss","EditPTTable","JsFooterStyling","undefined","innerWidth","EditProject","pTitle","pDesc","useSetProjectDescMutation","setDesc","useSetProjectTitleMutation","useDeleteProjectMutation","delProj","Modal","onresize","updateProject","deleteProject","DevSub","useSetTicketDeveloperMutation","setDeveloper","dev","setDev","ProjectDD","ProjectDDWrapper","useGetTicketProjectQuery","getTicketProject","AssignProject","useSetTicketProjectMutation","SetTicketProject","project","setProject","EditTicket","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","useSetTicketDescMutation","useSetTicketPriorityMutation","setPriority","useDeleteTicketMutation","DeleteThisTicket","new","setTicketStatus","setTicketType","setTicketPriority","updateTicket","desc","deleteTicket","replace","useGetUsers","UsersArray","AddTicketToProject","useCreateTicketMutation","Submit","handleSubmit","toggle","belongsTo","SetTicketDev","CreateProject","useAddProjectMutation","SUBMIT","userids","usernames","userString","tmp2","indexOf","shift","q","q2","tmp3","PmRoute","Routes","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","fetch","method","credentials","then","json","catch","err","initState","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","headers","authorization","subscribe","next","bind","complete","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","AddProjectDocument","gql","baseOptions","ApolloReactHooks","AddProjectUserDocument","CreateTicketDocument","DeleteProjectDocument","DeleteTicketDocument","DeleteUserDocument","DemoLoginDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTicketDataByIdDocument","GetTicketProjectDocument","GetTicketsDocument","GetUserDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","LogoutDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SetProjectDescDocument","SetProjectTitleDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateRoleDocument","GetUsersDocument","module","exports"],"mappings":"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","file":"static/js/main.c7f7648f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useGetUsersQuery, useUpdateRoleMutation, useDeleteUserMutation } from '../../generated/graphql';\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const {data, loading } = useGetUsersQuery();\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n    const [state, setState] = useState({\r\n        paginationLower: '1',\r\n        paginationUpper: '1', \r\n        limit: '4'\r\n    })\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if( loading || !data) {\r\n        return (\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    } \r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n        if(!id || !role) {\r\n\r\n        } else {\r\n\r\n            await updateRole({\r\n                variables: {\r\n                    role,\r\n                    id\r\n                }\r\n            });\r\n\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName('pag-active')\r\n        for( const el of els as unknown as any[] ) {\r\n            el.classList.remove('active');\r\n            el.classList.remove('pag-active');\r\n        }\r\n        if(!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add('active');\r\n            document.getElementById(`${id}li`)!.classList.add('pag-active');\r\n        }\r\n        setState({ ...state, paginationLower: id, paginationUpper: id });\r\n    }\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let userid = target.name;\r\n        let tmp = await DELETEUSER({\r\n            variables: {\r\n                userid\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: 'Error occurred while deleting user'});\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text\">Manage Roles</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>UserName</th>\r\n                                <th className = \"nonessen\">Email</th>\r\n                                <th className = \"nonessen\">Role</th> \r\n                                <th className = \"nonessen\">First Name</th>\r\n                                <th className = \"nonessen\">Last Name</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            { data!.getUsers!.map( (_val, i: number ) => {\r\n                                if( eval(`(${state.paginationLower} - 1) *${state.limit}`) < i && i <= eval(`${state.paginationUpper}*${state.limit}`)) {\r\n                                    return(\r\n                                        <tr key = {i}>\r\n                                            <td>{data!.getUsers![i].username}</td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].email}</td>\r\n                                            <td>\r\n                                                <div className=\"input-field col s12\">\r\n                                                    <select className = \"browser-default capitalize\">\r\n                                                        <option value=\"\" className = \"capitalize\" disabled selected>{data!.getUsers![i].role}</option>\r\n                                                        <option value = {`admin`} onClick = { (e) => { setRole(e, i) } }>  Admin </option>\r\n                                                        <option value = {`developer`} onClick = { (e) => { setRole(e, i) } }>  Developer </option>\r\n                                                        <option value = {`project-manager`} onClick = { (e) => { setRole(e, i) } }>  Project-manager </option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].firstname}</td>\r\n                                            <td className = \"nonessen\">{data!.getUsers![i].lastname}</td>\r\n                                            <td><button name = {`${data!.getUsers![i].id}`}onClick = { (e) => { deleteUser(e)} }>Delete</button></td>\r\n                                        </tr>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        null\r\n                                    );\r\n                                }\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                        Page Limit:\r\n                        <input className = \"browser-default pagination-input\" id=\"email_inline\" type=\"number\" min = \"1\" max = \"100\" value = {state.limit} onChange = { (e) => { setState({...state, limit: e.target.value }) } }/>\r\n                    <ul className = \"pagination noselect\">\r\n                        { data.getUsers!.map( (_val, i) => {\r\n                            if( i - 1 < eval(`${data.getUsers!.length}/${state.limit}`) ) {\r\n                                if(i === 1) {\r\n                                    return(\r\n                                        <li key = {i} className = 'active pag-active' id = {`${i}li`}>\r\n                                            <a id = {`${i}`} onClick = { (e) => { pagination(e) } }>{i}</a>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                                if(i !== 0) {\r\n                                    return(\r\n                                        <li key = {i} id = {`${i}li`}>\r\n                                            <a id = {`${i}`} onClick = { (e) => { pagination(e) } }>{i}</a>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            } else {\r\n                                return(\r\n                                    <>\r\n                                    </>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useLoginMutation, useDemoLoginMutation } from '../../generated/graphql';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { setAccessToken } from '../../accessToken';\r\n\r\nexport const Login: React.FC<RouteComponentProps> = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n    })\r\n\r\n    const submitForm = async (e: any) => {\r\n        e.preventDefault();\r\n        if (email.length > 1 && password.length > 1) {\r\n            const response = await login({\r\n                variables: {\r\n                    email,\r\n                    password\r\n                }\r\n            })\r\n\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.login.accessToken);\r\n            }\r\n            window.location.reload();\r\n        } else if (password.length < 1 && email.length < 1) {\r\n            document.getElementById('password')!.classList.add('invalid');\r\n            document.getElementById('email')!.classList.add('invalid');\r\n        } else if (password.length < 1) {\r\n            document.getElementById('password')!.classList.add('invalid');\r\n        }\r\n    }\r\n\r\n    const demoUser = async (e: React.SyntheticEvent, role: string) => {\r\n        e.preventDefault();\r\n        const response = await demoLogin({\r\n            variables: {\r\n                role\r\n            }\r\n        })\r\n\r\n        if (response && response.data) {\r\n            setAccessToken(response.data.demoLogin.accessToken);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input id=\"email\" type=\"email\" className=\"validate\" value={email} onChange={e => setEmail(e.target.value)} />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter a valid email\"></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input id=\"password\" type=\"password\" className=\"validate\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter a valid password\"></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"/login\"><button type=\"button\" className=\"btn stretched mb authAction\" onClick={(e) => submitForm(e)}>Login</button></a>\r\n                            <span className=\"centered mb\"><span>OR</span></span>\r\n                            <button type=\"submit\" className=\"btn stretched mb authAction\" onClick={() => { document.getElementById('dd')!.classList.remove('hide') }}>Demo User</button>\r\n                            <span className='dropdown-trigger btn stretched manage-dropdown hide' id=\"dd\" data-target='dropdownRole'>Role</span>\r\n                            <ul id='dropdownRole' className='dropdown-content'>\r\n                                <li>\r\n                                    <button className=\"btnDropdown\"\r\n                                        onClick={(e) => {\r\n                                            setEmail('demo@demo.com');\r\n                                            setPassword('demoPassword');\r\n                                            demoUser(e, 'admin');\r\n                                        }}>\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button className=\"btnDropdown\"\r\n                                        onClick={(e) => {\r\n                                            setEmail('demo@demo.com');\r\n                                            setPassword('demoPassword');\r\n                                            demoUser(e, 'developer');\r\n                                        }}>\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button className=\"btnDropdown\"\r\n                                        onClick={(e) => {\r\n                                            setEmail('demo@demo.com');\r\n                                            setPassword('demoPassword');\r\n                                            demoUser(e, 'project-manager');\r\n                                        }}>\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n\r\n                            </ul>\r\n                            <span className=\"centered mb\"><span>OR</span></span>\r\n                            <span className=\"centered\">\r\n                                <div><u><a href=\"/register\">Sign Up Here</a></u></div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, } from 'react';\r\nimport { useRegisterMutation } from '../../generated/graphql';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [register] = useRegisterMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        //eslint-disable-next-line\r\n        var instances = M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async () => {\r\n        if (email.length > 1 && password.length > 1 && username.length > 1 && firstname.length > 1 && lastname.length > 1) {\r\n            await register({\r\n                variables: {\r\n                    email,\r\n                    password,\r\n                    username,\r\n                    role,\r\n                    firstname,\r\n                    lastname\r\n                }\r\n            })\r\n            history.push('/');\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById('email')!.classList.add('invalid');\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById('password')!.classList.add('invalid');\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById('username')!.classList.add('invalid');\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById('firstname')!.classList.add('invalid');\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById('lastname')!.classList.add('invalid');\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Sign Up</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input id=\"email\" type=\"email\" className=\"validate\" value={email} onChange={e => setEmail(e.target.value)} />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter a valid email\"></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input id=\"password\" type=\"password\" className=\"validate\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter a password\"></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input id=\"username\" type=\"text\" className=\"validate\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter a username\"></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span className='dropdown-trigger btn manage-dropdown' id=\"roleDD\" data-target='dropdownRole'>Role</span>\r\n                                <ul id='dropdownRole' className='dropdown-content'>\r\n                                    <li>\r\n                                        <button className=\"btnDropdown\" name=\"admin\"\r\n                                            onClick={(e: React.SyntheticEvent) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N)\r\n                                            }}>\r\n                                            Admin\r\n                                            </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button className=\"btnDropdown\" name=\"developer\"\r\n                                            onClick={(e: React.SyntheticEvent) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N)\r\n                                            }}>\r\n                                            Developer\r\n                                            </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button className=\"btnDropdown\" name=\"project-manager\"\r\n                                            onClick={(e: React.SyntheticEvent) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N)\r\n                                            }}>\r\n                                            Project Manager\r\n                                            </button>\r\n                                    </li>\r\n\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input id=\"firstname\" type=\"text\" className=\"validate\" value={firstname} onChange={e => (setFirstname(e.target.value))} />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter your first name\"></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input id=\"lastname\" type=\"text\" className=\"validate\" value={lastname} onChange={e => (setLastname(e.target.value))} />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span className=\"helper-text\" data-error=\"Please enter your last name \"></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button className=\"btn stretched mb authAction\" onClick={(e) => submitForm()}>Register</button>\r\n                            <span className=\"centered mb\"><span>OR</span></span>\r\n                            <a href=\"/login\"><button type=\"button\" className=\"btn stretched mb authAction\">Login Here</button></a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport UserImage from '../img/unnamed.webp';\r\n\r\nexport const Sidenav = () => {\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n\r\n    useEffect( () => {\r\n            let loc = window.location.pathname;\r\n            document.getElementById('tickets')!.classList.remove('active');\r\n            document.getElementById('projects')!.classList.remove('active');\r\n            if(user.role === 'project-manager' || user.role === 'admin') {document.getElementById('man-projects')!.classList.remove('active')}\r\n            if(user.role === 'admin') {document.getElementById('man-roles')!.classList.remove('active')}\r\n            document.getElementById('dashboard')!.classList.remove('active');\r\n            switch(loc) {\r\n                case \"/tickets\": {\r\n                    document.getElementById('tickets')!.classList.add('active');\r\n                    document.getElementById('mobile-tickets')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/projects\": {\r\n                    document.getElementById('projects')!.classList.add('active');\r\n                    document.getElementById('mobile-projects')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/manage-projects\": {\r\n                    document.getElementById('man-projects')!.classList.add('active');\r\n                    document.getElementById('mobile-man-projects')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/manage-roles\": {\r\n                    document.getElementById('man-roles')!.classList.add('active');\r\n                    document.getElementById('mobile-man-roles')!.classList.add('active');\r\n                    break;\r\n                }\r\n                case \"/dashboard\": {\r\n                    document.getElementById('dashboard')!.classList.add('active');\r\n                    document.getElementById('mobile-dashboard')!.classList.add('active');\r\n                    break;\r\n                }\r\n            }\r\n    });\r\n    return(\r\n        <>\r\n            <ul className = \"collection\">\r\n                <li className = \"collection-item avatar\">\r\n                    <img src = { UserImage } className = \"circle noselect\" alt = \"\"/>\r\n                        <span className = \"title noselect\"><b>Welcome, { user.username }</b></span>\r\n                    <p> { user.email } <br />\r\n                        <span className = \"noselect capitalize\">Current Role: { user.role }</span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className = \"divider\"></div>\r\n            \r\n            <li className = \"btnli\"><a href = \"/BugTrackerProject/dashboard\" className = \"navLink\" id = \"dashboard\"><button className = \"btn\"> <i className = \"left material-icons\">dashboard</i> <span className = \"left\">Dashboard</span></button></a></li>\r\n            { user.role === 'admin' ? \r\n                <li className = \"btnli\"><a href = \"/BugTrackerProject/manage-roles\" className = \"navLink\" id = \"man-roles\"><button className = \"btn\"> <i className = \"left material-icons\">people_outline</i><span className = \"left\">Manage Roles</span></button></a></li>\r\n            : null}\r\n            { user.role === 'admin' || user.role === 'project-manager' ? \r\n                <li className = \"btnli\"><a href = \"/BugTrackerProject/manage-projects\" className = \"navLink\" id = \"man-projects\"><button className = \"btn\"> <i className = \"left material-icons\">people</i><span className = \"left\">Manage Projects</span></button></a></li>\r\n            : null}\r\n            <li className = \"btnli\"><a href = \"/BugTrackerProject/projects\" className = \"navLink\" id = \"projects\"><button className = \"btn\"> <i className = \"left material-icons\">widgets</i><span className = \"left\">My Projects</span></button></a></li>\r\n            <li className = \"btnli\"><a href = \"/BugTrackerProject/tickets\" className = \"navLink\" id = \"tickets\"><button className = \"btn\"> <i className = \"left material-icons\">local_offer</i><span className = \"left\">My Tickets</span></button></a></li>\r\n        </>\r\n    );\r\n}","import UserImage from '../img/unnamed.webp';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { State, User } from '../redux/RootReducer';\r\n\r\nexport const MobileSideNav = () => {\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    return(\r\n        <>\r\n            <ul className = \"collection\">\r\n                <li className = \"collection-item avatar\">\r\n                    <img src = { UserImage } className = \"circle noselect\" alt = \"\"/>\r\n                        <span className = \"title noselect\"><b>Welcome, { user.username }</b></span>\r\n                    <p> { user.email } <br />\r\n                        <span className = \"noselect capitalize\">Current Role: { user.role }</span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className = \"divider\"></div>\r\n            \r\n            <li className = \"btnli\"><a href = \"/dashboard\" className = \"navLink\" id = \"mobile-dashboard\"><button className = \"btn\"> <i className = \"left material-icons\">dashboard</i> <span className = \"left\">Dashboard</span></button></a></li>\r\n            { user.role === 'admin' ? \r\n                <li className = \"btnli\"><a href = \"/manage-roles\" className = \"navLink\" id = \"mobile-man-roles\"><button className = \"btn\"> <i className = \"left material-icons\">people_outline</i><span className = \"left\">Manage Roles</span></button></a></li>\r\n            : null}\r\n            { user.role === 'admin' || user.role === 'project-manager' ? \r\n                <li className = \"btnli\"><a href = \"/manage-projects\" className = \"navLink\" id = \"mobile-man-projects\"><button className = \"btn\"> <i className = \"left material-icons\">people</i><span className = \"left\">Manage Projects</span></button></a></li>\r\n            : null}\r\n            <li className = \"btnli\"><a href = \"/projects\" className = \"navLink\" id = \"mobile-projects\"><button className = \"btn\"> <i className = \"left material-icons\">widgets</i><span className = \"left\">My Projects</span></button></a></li>\r\n            <li className = \"btnli\"><a href = \"/tickets\" className = \"navLink\" id = \"mobile-tickets\"><button className = \"btn\"> <i className = \"left material-icons\">local_offer</i><span className = \"left\">My Tickets</span></button></a></li>\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useLogoutMutation } from '../generated/graphql';\r\nimport { setAccessToken } from '../accessToken';\r\nimport { Sidenav } from './Sidenav';\r\nimport { MobileSideNav } from './MobileSideNav';\r\n\r\ninterface Props {\r\n    children?: any\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems, {\r\n            hover: true,\r\n        });\r\n    })\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <ul id=\"user-actions\" className=\"dropdown-content\">\r\n                    <li>\r\n                        <a onClick={() => { logout(); }}>\r\n                            Logout\r\n                            <i className=\"material-icons\">exit_to_app</i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul id=\"notifications\" className=\"dropdown-content\">\r\n                    <li></li>\r\n                </ul>\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#!\" className=\"brand-logo\"><i className=\"material-icons\">bug_report</i> <b>Bug Tracker</b></a>\r\n\r\n                        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n                        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                            <li>\r\n                                <a className=\"dropdown-trigger\" data-target=\"user-actions\">\r\n                                    USER ACTIONS <i className=\"material-icons right\">arrow_drop_down</i>\r\n                                </a>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">\r\n                {children ? children : null}\r\n            </span>\r\n        </div>\r\n    );\r\n}","import { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default checkAuth();","import React, { SFC } from 'react';\r\nimport { Route, RouteProps, Redirect } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: SFC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth() ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect to = \"/dashboard\" />\r\n                )\r\n            }\r\n        />\r\n);\r\n\r\nexport default AuthRoute;","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AdminRoute;","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove('indicator-pink');\r\n    t?.classList.remove('indicator-darkblue');\r\n    t?.classList.remove('indicator-cyan');\r\n    switch (color) {\r\n        case 'pink': {\r\n            t?.classList.add('indicator-pink');\r\n            break;\r\n        }\r\n        case 'dark-blue': {\r\n            t?.classList.add('indicator-darkblue');\r\n            break;\r\n        }\r\n        case 'cyan': {\r\n            t?.classList.add('indicator-cyan');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove('indicator-blue')\r\n    t?.classList.remove('indicator-yellow')\r\n    switch (color) {\r\n        case 'yellow': {\r\n            t?.classList.add('indicator-yellow');\r\n            subt?.classList.add('indicator-blue');\r\n            break;\r\n        }\r\n        case 'blue': {\r\n            t?.classList.add('indicator-blue');\r\n            subt2?.classList.add('indicator-yellow');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// export const changeIndicatorP = (i: string, color: string) => {\r\n//     let t = document.getElementById(`ul3${i}`)\r\n//     let subt = document.getElementById(`sub-tab3${i}`);\r\n//     let subt2 = document.getElementById(`sub-tab3.1${i}`);\r\n//     t?.classList.remove('indicator-orange');\r\n//     t?.classList.remove('indicator-blue');\r\n//     switch (color) {\r\n//         case 'orange': {\r\n//             t?.classList.add('indicator-orange');\r\n//             subt?.classList.add('indicator-blue');\r\n//             break;\r\n//         }\r\n//         case 'blue': {\r\n//             t?.classList.add('indicator-blue');\r\n//             subt2?.classList.add('indicator-orange');\r\n//             break;\r\n//         }\r\n//     }\r\n// }","import { useState } from \"react\";\r\nimport { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabs = () => {\r\n    let LStitle: any = localStorage.getItem('title');\r\n    if (!!LStitle) { LStitle = LStitle!.split(','); }\r\n    const [title, setTitle] = useState({ title: LStitle || [] as string[] });\r\n    const [chartData, setChartData] = useState({ chart: [{}] })\r\n    const userTickets = useGetUserTickets() as [{ priority: string, status: string, type: string }];\r\n    const tickets = useGetTickets() as [{ priority: string, status: string, type: string }];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0, f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case 'features': {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case 'bugs/errors': {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Bugs/Erros', 'Features'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Type';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0, m = 0, l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case 'high': {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case 'medium': {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case 'low': {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['High', 'Medium', 'Low'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Priority';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0, m = 0, l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case 'high': {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case 'medium': {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case 'low': {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['High', 'Medium', 'Low'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Priority';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0, c = 0, h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case 'open': {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case 'closed': {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case 'on-hold': {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Open', 'Closed', 'On Hold'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'My Tickets By Status';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0, c = 0, h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case 'open': {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case 'closed': {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case 'on-hold': {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Open', 'Closed', 'On Hold'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Status';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0, f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case 'features': {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case 'bugs/errors': {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: ['Bugs/Erros', 'Features'],\r\n            datasets: [\r\n                {\r\n                    label: 'Amount of Tickets',\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        '#051937',\r\n                        '#A8EB12',\r\n                        '#5FFBF1',\r\n                        '#E13296',\r\n                        '#E0DF31',\r\n                    ],\r\n                    borderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem('data', JSON.stringify(tmp, getCircularReplacer()));\r\n\r\n        let t = title.title;\r\n        t[i] = 'All Tickets By Type';\r\n        setTitle({ title: t });\r\n        localStorage.setItem('title', `${t}`);\r\n    }\r\n\r\n\r\n    return {\r\n        title,\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT\r\n    }\r\n}","import { useGetUserTicketsQuery } from \"../../generated/graphql\"\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getUserTickets;\r\n}","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getTickets\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport M from \"materialize-css\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabs } from \"./DashboardTabs\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    let LSname: any = localStorage.getItem('chartType');\r\n    if (!!LSname) { LSname = LSname!.split(','); }\r\n    let LSchart: any = localStorage.getItem('chart');\r\n    if (!!LSchart) { LSchart = LSchart.split(','); }\r\n    let LSdata: any = localStorage.getItem('data');\r\n    if (!!LSdata) { LSdata = JSON.parse(LSdata); }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || [] as string[] });\r\n    const {title, myTicketsByS, myTicketsByP, myTicketsByT, TicketsByP, TicketsByS, TicketsByT} = DashboardTabs();\r\n    \r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        var elems = document.querySelectorAll('.fixed-action-btn');\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false\r\n        });\r\n        elems = document.querySelectorAll('.tooltipped');\r\n        M.Tooltip.init(elems, {\r\n            position: 'left'\r\n        });\r\n    })\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat(temp! += 1);\r\n        setState({ ...state, Cards: state.Cards.concat(temp! += 1) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat('')\r\n        })\r\n        localStorage.setItem('chart', `${t1}`);\r\n    }\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp\r\n            });\r\n            localStorage.setItem('chartType', `${tmp}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <div className=\"fixed-action-btn\">\r\n                <a className=\"btn-floating tooltipped btn-large\" data-postion=\"left\" data-tooltip=\"ADD A CHART\" style={{ backgroundImage: 'linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)' }} onClick={() => { AddCard() }}><i className=\"material-icons\">insert_chart</i></a>\r\n\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                {state.Cards.map(function (_val: any, i: any) {\r\n                    return (\r\n                        <div className=\"col s11 m6 chart-lengthen\" key={i}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <span className=\"card-title center\">\r\n                                            {title!.title[i]}\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div className=\"row row-verticle-center\">\r\n                                        <div className=\"col l12 m12 s12 centered\">\r\n                                            {chart.name[i] === 'Donut' && !!LSdata ? <Doughnut data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                            {chart.name[i] === 'Bar' && !!LSdata ? <Bar data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                            {chart.name[i] === 'Pie' && !!LSdata ? <Pie data={LSdata[i]} options={{ responsive: true }} /> : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card-tabs\">\r\n                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                        <li className=\"tab\"><a className=\"active\" href={`#tab${i}`}>Chart Type</a></li>\r\n                                        <li className=\"tab\"><a href={`#tab2${i}`}>Tickets </a></li>\r\n                                        {/* <li className=\"tab\"><a href={`#tab3${i}`}>Projects</a></li> */}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className=\"card-content grey lighten-4\">\r\n                                    <div id={`tab${i}`}>\r\n                                        <div className=\"card-tabs\">\r\n                                            <ul id={`ul${i}`} className=\"tabs tabs-fixed-width\">\r\n                                                <li className=\"tab\">\r\n                                                    <a className=\"active\" onClick={() => { changeIndicatorC(`${i}`, 'pink') }}>\r\n                                                        <button className=\"card-opt\" key={i} name={`Donut`} onClick={(e) => setChartType(e, i)}>  Donut </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li className=\"tab\" onClick={() => { changeIndicatorC(`${i}`, 'dark-blue') }}>\r\n                                                    <a>\r\n                                                        <button className=\"card-opt\" key={i} name={`Pie`} onClick={(e) => { setChartType(e, i) }}>  Pie </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li className=\"tab\" onClick={() => { changeIndicatorC(`${i}`, 'cyan') }}>\r\n                                                    <a>\r\n                                                        <button className=\"card-opt\" key={i} name={`Bar`} onClick={(e) => { setChartType(e, i) }}>  Bar </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div id={`tab2${i}`}>\r\n                                        <ul id={`ul2${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab my-tickets\"><a className=\"active\" onClick={() => changeIndicatorT(`${i}`, 'yellow')} href={`#sub-tab2${i}`}>My Tickets</a></li>\r\n                                            <li className=\"tab all-tickets\"><a href={`#sub-tab2.1${i}`} onClick={() => changeIndicatorT(`${i}`, 'blue')}>All Tickets</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab2${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul id={`ul2${i}`} className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active yellow-text\">\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByP!(i) }}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByS!(i) }}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => { myTicketsByT!(i) }}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab2.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByP!(i)}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByS!(i)}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i} onClick={() => TicketsByT!(i)}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                    {/* <div id={`tab3${i}`}>\r\n                                        <ul id={`ul3${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab\"><a className=\"active\" href={`#sub-tab3${i}`} onClick={() => changeIndicatorP(`${i}`, 'orange')}>My Projects</a></li>\r\n                                            <li className=\"tab\"><a href={`#sub-tab3.1${i}`} onClick={() => changeIndicatorP(`${i}`, 'blue')}>All Projects</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab3${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab3.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </span>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectDataQuery } from \"../../generated/graphql\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data , loading } = useGetProjectDataQuery();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Manage Projects</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><b>Project Name</b></th>\r\n                                <th className = \"nonessen\"><b>Description</b></th>\r\n                                <th><b>Users Assigned</b></th>\r\n                                <th className = \"noselect\"><b>Edit/Details</b></th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            { !!data.getProjectData.map ? data.getProjectData.map( (_val, i, getProjectData) => {\r\n                                let projectId = getProjectData[i].projectid;\r\n                                return(\r\n                                    <tr key = {i}>\r\n                                        <td> { getProjectData[i].title } </td>\r\n                                        <td className = \"nonessen\"> { getProjectData[i].description } </td>\r\n                                        <td> { getProjectData[i].projectid } </td>\r\n                                        <td> <a href = { `/edit-project:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">edit</i>\r\n                                            </a> \r\n                                            <br /> \r\n                                            <a href = {`/project-details:${projectId}`}>\r\n                                                <i className = \"material-icons blue-grey-text text-darken-4 noselect\">details</i>\r\n                                            </a>\r\n                                        </td> \r\n                                    </tr>\r\n                                );\r\n                            })\r\n                            :\r\n                                <tr></tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className = \"poormans-divider\"></div>\r\n                    <a href = \"/create-project\"><button className = \"btn btn-ex safe-btn center footerBtn\">Add Project</button></a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number,\r\n    keyprop: number,\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${props.projectid}` }});\r\n\r\n    if (loading || !data) {\r\n        return(\r\n            <tr><td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td></tr>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.keyprop}>\r\n            <td>\r\n                { data.getProjectDataById[0].title }\r\n            </td>\r\n\r\n            <td className = \"nonessen\">\r\n                { data.getProjectDataById[0].description }\r\n            </td>\r\n\r\n            <td>\r\n                <a href = {`/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading } = useGetUserProjectsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">My Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUserProjects!.map ? data!.getUserProjects!.map((_val, i, getUserProjects): JSX.Element => {\r\n                                return (\r\n                                    <DetailsSubCom projectid={getUserProjects[i].projectid} key={i} keyprop={i} />\r\n                                );\r\n                            })\r\n                                :\r\n                                <tr></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    UserTickets: any,\r\n    i: number\r\n}\r\n\r\nexport const TicDetailsSubCom: React.FC<Props> = (props) => {\r\n\r\n    const { data, loading } = useGetTicketDataByIdQuery( { \r\n        variables: { \r\n            id: `${props.UserTickets[props.i].ticketid}`\r\n        }})\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    <div className = \"progress\">\r\n                        <div className = \"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.i}>\r\n            { data.getTicketDataById.length !== 0 ? \r\n                <>\r\n                    <td>{ data.getTicketDataById[0].title }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].developer }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].priority }</td>\r\n                    <td>{ data.getTicketDataById[0].status }</td>\r\n                    <td className = \"nonessen\">{ data.getTicketDataById[0].type }</td>\r\n                    <td className = \"noselect\"><a href = {`/ticket-details:${props.UserTickets[props.i].ticketid}`}>Details</a></td>\r\n                </>\r\n                : null\r\n            }\r\n        </tr>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { TicDetailsSubCom } from \"./TicDetailsSubCom\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    const [state, setState] = useState({\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const sortTicketsByPriority = () => {\r\n        let arr = data.getUserTickets;\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (j > 0 && (((arr[j].priority === 'high' && ((arr[j - 1].priority === 'medium' || arr[j - 1].priority === 'low')) || (arr[j].priority === 'medium' && arr[j - 1].priority === 'low'))))) {\r\n                let tmp = arr.slice(j - 1, j + 1)\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n        setState({ arr });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Tickets</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th className=\"nonessen\">Developer Assigned</th>\r\n                                <th className=\"nonessen\">Ticket Priority<i className=\"material-icons noselect\" onClick={() => sortTicketsByPriority()}>swap_vert</i></th>\r\n                                <th>Ticket Status</th>\r\n                                <th className=\"nonessen\">Ticket Type</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getUserTickets.map ?\r\n                                data.getUserTickets.map((_val, i) => {\r\n                                    return (\r\n                                        <TicDetailsSubCom key={i} UserTickets={data.getUserTickets} i={i} />\r\n                                    );\r\n                                })\r\n                                :\r\n                                <tr>\r\n\r\n                                </tr>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const GetLocation = () => {\r\n    let location = useLocation();\r\n    let id = location.pathname;\r\n    let tmp: any = id.split(':');\r\n    id = tmp[1];\r\n    return id;\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectTickets: React.FC= () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({ variables: { id: `${id}` } });\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className = \"progress\">\r\n                            <div className = \"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n    return( \r\n        <tbody>\r\n            { data!.getProjectTickets!.map( (_val, i, getProjectTickets): JSX.Element => { \r\n\r\n                                    return (\r\n                                        <tr key = {i}>\r\n                                            <td className = \"capitalize\"> { getProjectTickets[i].title} </td> \r\n                                            <td className = \"capitalize nonessen\"> { getProjectTickets[i].submitter } </td> \r\n                                            <td className = \"capitalize nonessen\"> { getProjectTickets[i].developer } </td> \r\n                                            <td className = \"capitalize\"> { getProjectTickets[i].status } </td> \r\n                                            <td> <a className = \"noselect\" href = {`/ticket-details:${ getProjectTickets[i].ticketid }`}>Details</a> </td> \r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const ProjectAssigned: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data , loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className = \"progress\">\r\n                            <div className = \"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <tbody>\r\n            { data!.getProjectUsersById!.map( (_val, i, getProjectUsersById): JSX.Element => { \r\n\r\n            return (\r\n                <tr key = {i}>\r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].username } </td> \r\n                    <td className = \"capitalize nonessen\"> { getProjectUsersById[i].email } </td> \r\n                    <td className = \"capitalize\"> { getProjectUsersById[i].role } </td> \r\n                </tr>\r\n            );\r\n            })}\r\n        </tbody>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from '../../generated/graphql';\r\nimport { ProjectTickets } from \"./ProjectTickets\";\r\nimport { ProjectAssigned } from \"./ProjectAssigned\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\n\r\nexport const ProjectDetails: React.FC = () => {\r\n    let history: any = useHistory();\r\n    let id = GetLocation();\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${id}` }});\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <span>\r\n            { data.getProjectDataById.length === 0 ?\r\n                <Redirect to =\"/dashboard\" />\r\n                :\r\n                <div className = \"detailsWrapper container-fluid\">\r\n                    <div className = \"center-align table-wrapper\">\r\n                        <span className = \"table-header z-depth-2\">\r\n                            \r\n                            <h2 className = \"white-text\">Details for Project #{id}</h2>\r\n                        </span>\r\n\r\n                        <span className = \"table-body z-depth-1\">\r\n                            <table className = \"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Project Name</th>\r\n                                        <th>Project Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>{ data.getProjectDataById[0].title }</td>\r\n                                        <td>{ data.getProjectDataById[0].description }</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className = \"row\">\r\n                                <span className = \"col s5 m5 l5 xl5\">\r\n                                    <span className = 'personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                        <h3 className = \"white-text\">Assigned Personnel</h3>\r\n                                    </span>\r\n\r\n                                    <table className = \"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th><b>User Name</b></th>\r\n                                                <th className = \"nonessen\"><b>Email</b></th>\r\n                                                <th className = \"nonessen\"><b>Role</b></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                \r\n                                        <ProjectAssigned />\r\n                                    </table>\r\n                                </span>\r\n\r\n                                <span className = \"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                                    <span className = \"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className = \"white-text\">Tickets for Project #{id}</h3>\r\n                                    </span>\r\n\r\n                                    <table className = \"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th><b>Title</b></th>\r\n                                                <th className = \"nonessen\"><b>Submitter</b></th>\r\n                                                <th className = \"nonessen\"><b>Developer</b></th>\r\n                                                <th><b>Status</b></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        \r\n                                        <ProjectTickets />\r\n                                    </table>\r\n                                </span>\r\n                            </div>\r\n                            <div className = \"divider\"></div>\r\n\r\n                            <button className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Go Back</button> \r\n                            { user.role === 'developer' ? \r\n                                null : \r\n                                <a href = { `/edit-project:${id}` }><button className = \"btn right footerBtn\">Edit</button></a>\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </span>\r\n    );\r\n}","import * as React from 'react';\r\nimport { useHistory, Redirect } from 'react-router-dom';\r\nimport { useGetTicketDataByIdQuery } from '../../generated/graphql';\r\nimport { GetLocation } from '../GetLocation';\r\nimport { useEffect } from 'react';\r\n\r\nexport const TicketDetails: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({ variables: { id: `${id}` } });\r\n    \r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n    \r\n    if(loading) {\r\n        return (\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(!data) {\r\n        return (\r\n            <span>no data</span>\r\n        )\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n    \r\n    return(\r\n        <span>\r\n            {ticket.length === 0 ?\r\n                <Redirect to=\"/dashboard\" /> \r\n                :\r\n                <div className = \"detailsWrapper container-fluid\">\r\n                    <div className = \"center-align table-wrapper\">\r\n                        <span className = \"table-header z-depth-2\">\r\n                            <h2 className = \"white-text noselect\">Details For Ticket #{id}</h2>\r\n                        </span>\r\n        \r\n                        <span className = \"table-body z-depth-1\">\r\n                            <table className = \"striped responsive\">\r\n                                <tbody>\r\n        \r\n                                    <tr>\r\n                                        <th>TITLE</th>\r\n                                        <th>DESCRIPTION</th>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <td className = \"capitalize\" >{ticket[0].title}</td>\r\n                                        <td className = \"capitalize\" >{ticket[0].description ||  \"NONE\"}</td>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <th>ASSIGNED DEVELOPER</th>\r\n                                        <th>SUBMITTER</th>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <td className = \"capitalize\" >{ticket[0].developer}</td>\r\n                                        <td className = \"capitalize\" >{ticket[0].submitter}</td>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <th>BELONGS TO PROJECT</th>\r\n                                        <th>TICKET PRIORITY</th>\r\n                                    </tr>\r\n                                    \r\n                                    <tr>\r\n                                        <td>#{ticket[0].belongsto}</td>\r\n                                        <td className = \"capitalize\" >{ticket[0].priority}</td>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <th>TICKET STATUS</th>\r\n                                        <th>TICKET TYPE</th>\r\n                                    </tr>\r\n        \r\n                                    <tr>\r\n                                        <td className = \"capitalize\" >{ticket[0].status}</td>\r\n                                        <td className = \"capitalize\" >{ticket[0].type || \"NONE\"}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n        \r\n                            <div className = \"divider\"></div>\r\n        \r\n                            <button className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Go Back</button>\r\n                            <a href = { `/edit-ticket:${id}` }><button className = \"btn right footerBtn\">Edit</button></a>\r\n        \r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                \r\n            }\r\n        </span>\r\n    );\r\n\r\n\r\n}","\r\nexport const CheckIfInProject = (id: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers\r\n    for(let x = 0; x < users.length; x++) {\r\n        if(users[x].id === id) {\r\n            tmp = true\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n}","import { useGetUsersQuery, useAddProjectUserMutation, useRemoveProjectUserMutation } from \"../../../generated/graphql\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const USERS = (projectUsers: any) => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n    const PROJECT_ID = GetLocation();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({\r\n        assigned: projectUsers,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('select');\r\n        // eslint-disable-next-line\r\n        var instances = M.FormSelect.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const modPersonnel = async (i: number) => {\r\n        if(CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            await removeUser({ \r\n                variables: {\r\n                    userid: `${data!.getUsers![i].id}`,\r\n                    projectid: `${PROJECT_ID}`\r\n                }\r\n            });\r\n            M.toast({html: `Removed ${data!.getUsers![i].username}`});\r\n        } else {\r\n            await addUser({ \r\n                variables: {\r\n                    projectid: `${PROJECT_ID}`,\r\n                    userid: `${data!.getUsers![i].id}`\r\n                }\r\n            });\r\n            M.toast({html: `Added ${data!.getUsers![i].username}`});\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select className = \"browser-default\">\r\n                    <option value=\"\" disabled selected>Click to add/remove</option>\r\n                    { data!.getUsers!.map( ( _val, i, getUsers ) => {\r\n                        return(\r\n                            <option key={ i } onClick = { () => { modPersonnel(i) } }>  { getUsers[i].username } </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\n\r\n\r\nexport const EditAss: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` } });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        //eslint-disable-next-line\r\n        var instances = M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className = \"progress\">\r\n                            <div className = \"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectUsersById!.map((_val, i, getProjectUsersById): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].username} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].email} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].role} </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n\r\n            <tr>\r\n                <USERS projectUsers = {data.getProjectUsersById}/>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${id}`\r\n        }\r\n    })\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {!!data ? data!.getProjectTickets.map((_val, i, getProjectTickets) => {\r\n                return (\r\n                    <tr key={i}>\r\n                        <td> {getProjectTickets[i].title} </td>\r\n                        <td> {getProjectTickets[i].submitter} </td>\r\n                        <td> {getProjectTickets[i].developer} </td>\r\n                        <td> {getProjectTickets[i].status} </td>\r\n                        <td> <a href={`/edit-ticket:${getProjectTickets[i].ticketid}`}> EDIT </a> </td>\r\n                    </tr>\r\n                )\r\n            })\r\n                :\r\n                <tr></tr>\r\n            }\r\n            <tr>\r\n                <td>\r\n                    <a href={`/project-add:${id}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            Add Ticket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}","export const JsFooterStyling = () => {\r\n    if( window.innerWidth !== undefined ) {\r\n        if(window.innerWidth < 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.add('hide');\r\n                document!.getElementById('deleteBtn')!.classList.remove('center');\r\n                document!.getElementById('deleteBtn')!.classList.add('left');\r\n                document!.getElementById('deleteBtn')!.classList.add('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.add('btn-ex-40');\r\n            }\r\n\r\n        }\r\n        if(window.innerWidth > 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.remove('hide');\r\n                document!.getElementById('deleteBtn')!.classList.add('center');\r\n                document!.getElementById('deleteBtn')!.classList.remove('left');\r\n                document!.getElementById('deleteBtn')!.classList.remove('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.remove('btn-ex-40');\r\n            }\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery, useSetProjectDescMutation, useSetProjectTitleMutation, useDeleteProjectMutation } from \"../../generated/graphql\";\r\nimport { EditAss } from \"./edit-project/EditAss\";\r\nimport { EditPTTable } from \"./edit-project/EditPTTable\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { JsFooterStyling } from \"../../css/JsStyling\";\r\n\r\nexport const EditProject: React.FC = () => {\r\n    const history: any = useHistory(); \r\n    const [state, setState] = useState({\r\n        pTitle: '',\r\n        pDesc: '',\r\n    });\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${id}` }});\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getProjectDataById.length === 0) {\r\n        return(\r\n            <Redirect to = '/manage-projects' />\r\n        )\r\n    }\r\n\r\n    const updateProject = async () => {\r\n        if(state.pDesc !== '' || state.pTitle !== '') {\r\n            if(state.pTitle !== '') {\r\n                setTitle({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        title: `${state.pTitle}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Title Successfully Changed'});\r\n            }\r\n            if(state.pDesc !== '') {\r\n                setDesc({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        description: `${state.pDesc}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Description Successfully Changed'});\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteProject = async () => {\r\n        let tmp = await delProj({\r\n            variables: {\r\n                projectid: `${id}`\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({html: 'An Error Occured while deleting project'});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"detailsWrapper container-fluid\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    \r\n                    <h2 className = \"white-text\">Edit Project #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"responsive-table striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-name\" value = { state.pTitle } onChange = { (e) => setState({ ...state, pTitle: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-name\">{state.pTitle !== '' ? <span>{state.pTitle}</span> : data.getProjectDataById[0].title }</label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-desc\" value = { state.pDesc } onChange = { (e) => setState({ ...state, pDesc: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-desc\">{state.pDesc !== '' ? <span>{state.pDesc}</span> : data.getProjectDataById[0].description}</label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"row\">\r\n                        <span className = \"col s5 m5 l5 xl5\">\r\n                            <span className = 'personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                <h3 className = \"white-text\">Assigned Personnel</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>User Name</b></th>\r\n                                        <th><b>Email</b></th>\r\n                                        <th><b>Role</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAss />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className = \"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className = \"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className = \"white-text\">Tickets for Project #{id}</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>Title</b></th>\r\n                                        <th><b>Submitter</b></th>\r\n                                        <th><b>Developer</b></th>\r\n                                        <th><b>Status</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => {updateProject()} }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE PROJECT #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteProject() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useSetTicketDeveloperMutation } from \"../../../generated/graphql\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\ninterface Props {\r\n    developer: string\r\n    submitter: string;\r\n}\r\n\r\nexport const DevSub: React.FC<Props> = (props) => {\r\n    let id = GetLocation();\r\n    let developer = props.developer;\r\n    let submitter = props.submitter;\r\n    const [setDeveloper] = useSetTicketDeveloperMutation();\r\n    const [state, setState] = useState({\r\n        dev: '',\r\n    })\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        //eslint-disable-next-line\r\n        var instances = M.Dropdown.init(elems);\r\n    })\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    const setDev = async (e: React.SyntheticEvent) => {\r\n        if(user.role === 'admin' || user.role === 'project-manager' ) {\r\n            let target = e.target as HTMLButtonElement;\r\n            let dev = target.name; \r\n            setState({...state, dev });\r\n            let tmp = await setDeveloper({\r\n                variables: {\r\n                    ticketid: `${id}`,\r\n                    developer: `${dev}`\r\n                }\r\n            });\r\n            if(tmp) {\r\n                M.toast({html: 'Ticket Developer successfully changed'});\r\n            }\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <tr>\r\n            <td>\r\n                {user.role === 'admin' || user.role === 'project-manager' ? \r\n                    <span>\r\n                        <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowndev'>{state.dev !== '' ? <span>{state.dev}</span> : <span>{ developer }</span> || <span>No Status</span>}</a>\r\n                        <ul id='dropdowndev' className='dropdown-content'>\r\n                            { data!.getUsers!.map( (_val, i, getUsers) => {\r\n                                return(\r\n                                    <li key = { i }>\r\n                                        <button className = \"btnDropdown\" name = {`${getUsers[i].username}`} onClick = { (e) => setDev(e) }>{ getUsers[i].username }</button>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </span>\r\n                    :\r\n                    <span>{ developer }</span>\r\n                }\r\n            </td>\r\n            <td>\r\n                <span>{ submitter }</span>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import { useGetProjectDataByIdQuery } from \"../../../generated/graphql\"\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n    projectid: string\r\n}\r\n\r\nexport const ProjectDD: React.FC<Props> = (props) => {\r\n    \r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: props.projectid }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            { data.getProjectDataById[0].title }\r\n        </span>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketProjectQuery } from \"../../../generated/graphql\"\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { ProjectDD } from \"./ProjectDD\";\r\n\r\nexport const ProjectDDWrapper: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetTicketProjectQuery({ variables: { \r\n        ticketid: `${id}`\r\n    }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            <ProjectDD projectid = {`${data.getTicketProject[0].projectid}`} />\r\n        </span>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useGetProjectDataQuery, useSetTicketProjectMutation } from '../../../generated/graphql';\r\nimport { ProjectDDWrapper } from './ProjectDDWrapper';\r\nimport { GetLocation } from '../../GetLocation';\r\ninterface Props {\r\n    title: string,\r\n    id: string\r\n}\r\n\r\nexport const AssignProject: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n    const [SetTicketProject] = useSetTicketProjectMutation();\r\n    const [state, setState] = useState({\r\n        project: '',\r\n    })\r\n    let ticketid = GetLocation();\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        //eslint-disable-next-line\r\n        var instances = M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll('.modal');\r\n        //eslint-disable-next-line\r\n        var inst = M.Modal.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    \r\n    const setProject = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let projectid = target.name;\r\n        setState({...state, project: `${projectid}`})\r\n        await SetTicketProject({\r\n            variables: {\r\n                ticketid,\r\n                projectid \r\n            }\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <td>\r\n            {/* eslint-disable-next-line */}\r\n            <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownassign'>{state.project !== '' ? <span>{state.project}</span> : <ProjectDDWrapper />}</a>\r\n            <ul id='dropdownassign' className='dropdown-content'>\r\n                { data.getProjectData.map( ( _val, i, getProjectData ) => {\r\n                    return(\r\n                        <li key = {i}><button className = \"btnDropdown\" onClick = { (e) => setProject(e)} name = { `${getProjectData[i].projectid}` }>{ getProjectData[i].title }</button></li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </td>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { useGetTicketDataByIdQuery, useSetTicketStatusMutation, useSetTicketTypeMutation, useSetTicketTitleMutation, useSetTicketDescMutation, useSetTicketPriorityMutation, useDeleteTicketMutation } from \"../../../generated/graphql\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport { DevSub } from \"./DevSub\";\r\nimport { AssignProject } from \"./AssignProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from '../../../css/JsStyling';\r\n\r\nexport const EditTicket: React.FC = () => {\r\n    const history: any = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({ variables: { id: `${id}` } });\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    const [setStatus] = useSetTicketStatusMutation();\r\n    const [setType] = useSetTicketTypeMutation();\r\n    const [setTitle] = useSetTicketTitleMutation();\r\n    const [setDesc] = useSetTicketDescMutation();\r\n    const [setPriority] = useSetTicketPriorityMutation();\r\n    const [DeleteThisTicket] = useDeleteTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        new: false,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n        \r\n        JsFooterStyling();\r\n    })\r\n    \r\n    \r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getTicketDataById.length === 0) {\r\n        return(\r\n            <Redirect to = \"/manage-projects\" />\r\n        )\r\n    }\r\n\r\n    const setTicketStatus = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n        await setStatus({ \r\n            variables: {\r\n                ticketid: `${id}`,\r\n                status: `${status}`\r\n            }\r\n        })\r\n        M.toast({html: 'Ticket Status successfully changed'});\r\n    }\r\n    \r\n    const setTicketType = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n        await setType({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                type: `${type}`\r\n            }\r\n        });\r\n        M.toast({html: 'Ticket Type successfully changed'});\r\n    }\r\n\r\n    const setTicketPriority = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority });\r\n        await setPriority({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                priority: `${priority}`\r\n            }\r\n        });\r\n        M.toast({html: 'Ticket Priority successfully changed'});\r\n    }\r\n\r\n    const updateTicket = async () => {\r\n        if(state.title === '' && state.description === '') {\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({html: 'Not Enough Data Provided'});\r\n        } else  {\r\n            setState({...state, new: true});\r\n            if(state.title !== '') {\r\n                await setTitle({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        title: `${state.title}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Ticket Title successfully changed'});\r\n            }\r\n            \r\n            if(state.description !== '') {\r\n                await setDesc({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        desc: `${state.description}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Ticket Description successfully changed'});\r\n            }\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const deleteTicket = async () => {\r\n        await DeleteThisTicket({ variables: {\r\n            ticketid: `${id}`\r\n        }});\r\n        window.location.replace('/dashboard');\r\n    }\r\n    \r\n    return(\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Edit Ticket #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">{state.new ? <span>{state.title}</span> : data.getTicketDataById[0].title || <span>No Title</span> }</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n                                \r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">{state.new ? <span>{state.description}</span> : data.getTicketDataById[0].description || <span>No description</span> }</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <DevSub developer = {`${data.getTicketDataById[0].developer}`} submitter = {`${data.getTicketDataById[0].submitter}`}/>\r\n                            \r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n                            \r\n                            <tr>\r\n                                { user.role === 'developer' ? \r\n                                    <td>{data.getTicketDataById[0].title}</td>\r\n                                    :   \r\n                                    <AssignProject title = {`${data.getTicketDataById[0].title}`} id = { id }/>\r\n                                }\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : data.getTicketDataById[0].priority || <span>No Status</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e) }>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e) }>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e) }>High</button></li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{state.status !== '' ? <span>{state.status}</span> : data.getTicketDataById[0].status || <span>No Status</span>}</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                </td>\r\n                                <td>\r\n                                        <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{state.type !== '' ? <span>{state.type}</span>:  data.getTicketDataById[0].type || <span>No Type</span>}</a>\r\n                                        <ul id='dropdowntype' className='dropdown-content'>\r\n                                            <li><button className = \"btnDropdown\" name = \"bugs/errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                            <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                        </ul>\r\n                                </td>\r\n                            </tr> \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => updateTicket() }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE TICKET #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteTicket() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    \r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n\r\n    } else {\r\n        let UsersArray = data.getUsers\r\n        return {\r\n            UsersArray\r\n        }\r\n    }\r\n\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../tickets/useGetUsers\";\r\nimport { useCreateTicketMutation } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const AddTicketToProject: React.FC = () => {\r\n    const UsersArray = useGetUsers();\r\n    const history = useHistory();\r\n    const id = GetLocation();\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',})\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        dev: '',\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if(!UsersArray) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if(state.status === '' || state.type === '' || state.title === '' || state.description === '' || state.priority === '') {\r\n            M.toast({html: 'Missing Data'});\r\n            document.getElementById('dev-hpr-br')?.classList.add('hide');\r\n            document.getElementById('dev-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('status-hpr-br')?.classList.add('hide');\r\n            document.getElementById('status-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('type-hpr-br')?.classList.add('hide');\r\n            document.getElementById('type-hpr')?.classList.add('hide');\r\n\r\n            document.getElementById('pri-hpr-br')?.classList.add('hide');\r\n            document.getElementById('pri-hpr')?.classList.add('hide');\r\n\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.type === '') {\r\n                document.getElementById('type-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('type-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.status === '') {\r\n                document.getElementById('status-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('status-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.dev === '') {\r\n                document.getElementById('dev-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('dev-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.priority === '') {\r\n                document.getElementById('pri-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('pri-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n        } else {\r\n            await Submit({\r\n                variables: {\r\n                    title: state.title,\r\n                    description: state.description,\r\n                    belongsTo: `${id}`,\r\n                    developer: state.dev,\r\n                    priority: state.priority,\r\n                    status: state.status,\r\n                    submitter: user.username,\r\n                    type: state.type\r\n                }\r\n            })\r\n            history.push({ pathname: '/manage' })   \r\n        }\r\n    }\r\n\r\n    const setTicketType = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n    }\r\n    \r\n    const setTicketStatus = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n    }\r\n\r\n    const SetTicketDev = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let dev = target.name;\r\n        setState({...state, dev});\r\n    }\r\n\r\n    const setTicketPriority = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority});\r\n    }\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Create Ticket</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">ADD A TITLE</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">ADD A DESCRIPTION</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownDev'>{ state.dev !== '' ? <span>{ state.dev }</span> : <span>Assign a Developer</span>}</a>\r\n                                    <ul id='dropdownDev' className='dropdown-content'>\r\n                                        { UsersArray!.UsersArray!.map((_val, i, UsersArray) => {\r\n                                            return(\r\n                                                <li key = {i}><button className = \"btnDropdown\" name = {`${UsersArray[i].username}`} onClick = { (e) => SetTicketDev(e) }>{UsersArray[i].username}</button></li>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"dev-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"dev-hpr\">Please Assign a Developer</span>\r\n                                </td>\r\n                                <td>{ user.username } (YOU)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    #{id}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : <span>Ticket Priority</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e)}>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e)}>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e)}>High</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"pri-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"pri-hpr\">Please Assign a Ticket Priority</span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{ state.status !== '' ? <span>{ state.status }</span> : <span>Set Ticket Status</span> }</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"status-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"status-hpr\">Please Select a Ticket Status</span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{ state.type !== '' ? <span>{ state.type }</span> : <span>Set Ticket Type</span> }</a>\r\n                                    <ul id='dropdowntype' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"bugs-errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"type-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"type-hpr\">Please Select a Ticket Type</span>\r\n                                </td>\r\n\r\n                            </tr> \r\n                            \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n\r\n                    <div className = \"row\">\r\n                        <button className = \"btn left footerBtn modal-trigger\" data-target = \"cancelModal\">Back</button>\r\n                        <button className = \"btn right safe-btn\" onClick = { () => handleSubmit()}>Submit</button>\r\n                    </div>\r\n\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                        <button className  = \"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                        <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => history.goBack() }>CANCEL</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useAddProjectMutation } from \"../../../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../tickets/useGetUsers\";\r\n\r\nexport const CreateProject: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const history = useHistory();\r\n    const UsersArray = useGetUsers();\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [state, setState] = useState({\r\n        title: '',\r\n        description: '',\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        //eslint-disable-next-line\r\n        M.Modal.init(elems);\r\n    })\r\n\r\n    if (loading || !data || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === '' || state.description === '') {\r\n            if (state.title === '') {\r\n                document.getElementById('title')?.classList.add('invalid');\r\n            }\r\n            if (state.description === '') {\r\n                document.getElementById('desc')?.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({ html: 'Missing Data' });\r\n        } else {\r\n            await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users: state.userString\r\n                }\r\n            })\r\n            M.toast({ html: 'Project added successfully' });\r\n            window.location.replace('/manage-projects');\r\n        }\r\n    }\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n        setState({ ...state, userids: tmp, usernames: tmp2 });\r\n        setState({ ...state, userString: tmp3 });\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">Create Project</h2>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input type=\"text\" id=\"title\" className=\"validate\" value={state.title} onChange={(e) => setState({ ...state, title: e.target.value })} />\r\n                                            <label htmlFor=\"title\">ADD A TITLE</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input type=\"text\" id=\"desc\" className=\"validate\" value={state.description} onChange={(e) => setState({ ...state, description: e.target.value })} />\r\n                                                <label htmlFor=\"desc\">ADD A DESCRIPTION</label>\r\n                                                <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className='personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                    <h3 className=\"white-text\">Assign Personnel</h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map((_val, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    {state.usernames[i]}\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n\r\n\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>Click to add/remove</option>\r\n                                        {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                            return (\r\n                                                <option key={i} onClick={() => { addUser(getUsers[i].id, getUsers[i].username) }}>  {getUsers[i].username} </option>\r\n                                            );\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn left footerBtn modal-trigger modal-trigger\" data-target=\"cancelModal\">Back</button>\r\n                            <button className=\"btn right safe-btn\" onClick={() => handleSubmit()}>Submit</button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                            <button className=\"modal-close red white-text waves-effect waves-red btn-flat\" onClick={() => history.goBack()}>CANCEL</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'project-manager' || user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    } \r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PmRoute;","import AuthRoute from './authRoute';\r\nimport AdminRoute from './adminRoute';\r\nimport React from 'react';\r\nimport { Switch, Redirect, Route } from 'react-router-dom';\r\nimport { Dashboard } from '../components/Dashboard/Dashboard';\r\nimport { ManageRoles } from '../components/manage/ManRoles';\r\nimport { ManageProjects } from '../components/manage/ManProjects';\r\nimport { Projects } from '../components/project/Projects';\r\nimport { Tickets } from '../components/tickets/Tickets';\r\nimport { ProjectDetails } from '../components/project/ProjectDetails';\r\nimport { TicketDetails } from '../components/tickets/TicketDetails';\r\nimport { EditProject } from '../components/project/EditProject';\r\nimport { EditTicket } from '../components/tickets/edit-ticket/EditTicket';\r\nimport { AddTicketToProject } from '../components/project/AddTicketToProject';\r\nimport { CreateProject } from '../components/project/create-project/CreateProject';\r\nimport { useSelector } from 'react-redux';\r\nimport { State, User } from '../redux/RootReducer';\r\nimport PmRoute from './pmRoute';\r\n\r\nexport const Routes: React.FC = () => {\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',});\r\n    return (   \r\n        <Switch>\r\n            <AuthRoute exact path = \"/BugTrackerProject/dashboard\" component = { Dashboard } />\r\n            <AdminRoute user = {user} exact path = \"/BugTrackerProject/manage-roles\" component = { ManageRoles } />\r\n            <PmRoute user = {user} exact path = \"/BugTrackerProject/manage-projects\" component = { ManageProjects } />\r\n            <AuthRoute exact path = \"/BugTrackerProject/projects\" component = { Projects } />\r\n            <PmRoute user = {user} exact path = \"/BugTrackerProject/create-project\" component = { CreateProject } />\r\n            <PmRoute user = {user} exact path = \"/BugTrackerProject/edit-project:id\" component = { EditProject } />\r\n            <PmRoute user = {user}  exact path = \"/BugTrackerProject/project-add:id\" component = { AddTicketToProject } />\r\n            <AuthRoute path = \"/BugTrackerProject/project-details:id\" component = { ProjectDetails } />\r\n            <AuthRoute path = \"/BugTrackerProject/ticket-details:id\" component = { TicketDetails } />\r\n            <AuthRoute path = \"/BugTrackerProject/edit-ticket:id\" component = { EditTicket } />\r\n            <AuthRoute exact path = \"/BugTrackerProject/tickets\" component = { Tickets } />\r\n            <Route render = { () => <Redirect to = \"/BugTrackerProject/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport { useGetUserQuery } from './generated/graphql';\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Login } from './components/auth/Login';\nimport { Register } from './components/auth/Register';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport { UI } from './components/UI';\nimport { checkAuth } from './clientSideAuth/checkAuth.js';\nimport { Routes } from './routes/Routes';\nimport { useDispatch } from 'react-redux';\nimport { setUserInfo } from './redux/actions/userActions';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const {data, loading, error } = useGetUserQuery();\n\n  if (loading) {\n    return (\n      <div className = \"spinner-layer spinner-blue\">\n          <div className = \"circle-clipper left\">\n              <div className = \"circle\"></div>\n          </div>\n          \n          <div className = \"gap-patch\">\n              <div className = \"circle\"></div>\n          </div>\n          \n          <div className = \"circle-clipper right\">\n              <div className = \"circle\"></div>\n          </div>\n      </div>\n    );\n  } else if(!error && data ){\n      const user = data.getUser;\n      if(checkAuth()) {\n          if(user) {\n              dispatch( setUserInfo(user) );\n          }\n      }\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        \n        { checkAuth() ? <UI children = { <Routes />}/> \n            : \n            <Switch>\n              <Route exact path = \"/login\" component = { Login } />\n              <Route exact path = \"/register\" component = { Register } />\n              <Route render = { () => <Redirect to = \"/login\" />} />\n            </Switch>\n            }\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { User, Project } from \"../RootReducer\";\r\n\r\n\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: 'ADD_USER_INFO', user: user\r\n    }\r\n}\r\n\r\nexport const passProjectInfo = (project: Project) => {\r\n    return {\r\n        type: 'PASS_PROJECT_INFO', project: project\r\n    }\r\n}","import App from './App';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { setAccessToken } from './accessToken';\r\nimport './css/dashboard.scss';\r\nimport './css/login.scss';\r\nimport './css/manage.scss';\r\nimport './css/medias.scss';\r\nimport './css/nav.scss';\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        fetch('https://murmuring-wildwood-31770.herokuapp.com/refresh_token', {\r\n            method: 'POST',\r\n            credentials: \"include\"\r\n        }).then( async i => {\r\n            const { accessToken } = await i.json();\r\n            setAccessToken(accessToken);\r\n            setLoading(false);\r\n        }).catch( (err) => {\r\n            console.log('err :>> ', err);\r\n        });\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    }, [])\r\n\r\n    if(loading) {\r\n        return (\r\n            <div className = \"spinner-layer spinner-blue\">\r\n                <div className = \"circle-clipper left\">\r\n                    <div className = \"circle\"></div>\r\n                </div>\r\n\r\n                <div className = \"gap-patch\">\r\n                    <div className = \"circle\"></div>\r\n                </div>\r\n\r\n                <div className = \"circle-clipper right\">\r\n                    <div className = \"circle\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (<App />)\r\n}\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number,\r\n    email: string,\r\n    role: string,\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport type Project = {\r\n    title: string,\r\n    description: string,\r\n    projectid: number,\r\n}\r\n\r\nexport interface State {\r\n    user?: User\r\n    project?: Project\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: '',\r\n        role: '',\r\n        username: '',\r\n        firstname: '',\r\n        lastname: '',\r\n    },\r\n\r\n    project: {\r\n        title: '',\r\n        description: '',\r\n        projectid: 0,\r\n    }\r\n}\r\n\r\n\r\ntype Actions = {\r\n    user?: any,\r\n    type: string,\r\n    project: Project,\r\n}\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch(action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return {...state, user: action.user};\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return {...state, project: action.project}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { store } from './redux/ReduxStore';\nimport { Provider } from \"react-redux\";\n\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink((operation, forward) =>\n  new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n        const accessToken = getAccessToken();\n        operation.setContext({\n          headers: {\n            authorization: accessToken ? `bearer ${accessToken}` : ''\n          }\n        })\n      })\n      .then(() => {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer),\n        });\n      })\n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: \"accessToken\",\n      isTokenValidOrUndefined: () => {\n        const token = getAccessToken();\n\n        if(!token) {\n          return true;\n        }\n\n        try {\n          const {exp} = jwtDecode(token);\n          if(Date.now() >= exp * 1000) {\n            return false;\n          } else {\n            return true;\n          }\n        } catch {\n          return false;\n        }\n      },\n      fetchAccessToken: () => {\n        return fetch('https://murmuring-wildwood-31770.herokuapp.com/refresh_token', {\n          method: 'POST',\n          credentials: \"include\"\n        });\n      },\n      handleFetch: (accessToken: string) => {\n        setAccessToken(accessToken);\n      },\n      handleError: (err: any) => {\n        console.warn('Your refresh token is invalid. Try to relogin');\n        console.error(err);\n      }\n    }) as any,\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: 'https://murmuring-wildwood-31770.herokuapp.com/graphql',\n      credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Provider store = { store }>\n        <AppWrapper />\n      </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<ProjectData>;\n  getProjectDataById: Array<ProjectData>;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<TicketData>;\n  getTicketDataById: Array<TicketData>;\n  getUserTickets: Array<UserTicketsPlus>;\n  getTicketProject: Array<TicketProject>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type ProjectData = {\n  __typename?: 'ProjectData';\n  title: Scalars['String'];\n  description: Scalars['String'];\n  projectid: Scalars['Int'];\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n  id: Scalars['Int'];\n};\n\nexport type TicketData = {\n  __typename?: 'TicketData';\n  ticketid: Scalars['Int'];\n  priority?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid: Scalars['Int'];\n  userid: Scalars['Int'];\n  id: Scalars['Int'];\n  priority: Scalars['String'];\n  type: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type TicketProject = {\n  __typename?: 'TicketProject';\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: LoginResponse;\n  register: Scalars['Boolean'];\n  logout: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  demoLogin: LoginResponse;\n  addProject: Scalars['Boolean'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  userid: Scalars['String'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsTo: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n};\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsTo: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n  ) }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'projectid' | 'description'>\n  )> }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'TicketProject' }\n    & Pick<TicketProject, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: String!, $userid: String!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsTo: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsTo: $belongsTo)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsTo: // value for 'belongsTo'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: String!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($userid: String!) {\n  deleteUser(userid: $userid)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($id: String!) {\n  getTicketDataById(id: $id) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    userid\n    id\n    priority\n    type\n    status\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: String!, $projectid: String!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;","module.exports = __webpack_public_path__ + \"static/media/unnamed.a812fbf5.webp\";"],"sourceRoot":""}