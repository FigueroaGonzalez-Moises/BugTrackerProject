{"version":3,"sources":["components/manage/roles/Roles.tsx","components/manage/roles/RoleMethods.ts","components/tickets/Tickets.tsx","components/tickets/TicketHistory.tsx","components/tickets/edit-ticket/EditTicket.tsx","components/tickets/edit-ticket/DevSub.tsx","components/tickets/edit-ticket/ProjectDD.tsx","components/tickets/edit-ticket/ProjectDDWrapper.tsx","components/tickets/edit-ticket/AssignProject.tsx","components/GetLocation.ts","accessToken.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/Sidenav.tsx","components/MobileSideNav.tsx","components/UI.tsx","clientSideAuth/checkAuth.js","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabs.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/Dashboard.tsx","components/manage/projects/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/project/useGetProjectTickets.tsx","components/project/useGetProjectUsers.ts","components/project/ProjectDetails.tsx","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAss.tsx","components/project/edit-project/EditPTTable.tsx","components/project/EditProject.tsx","components/tickets/useGetUsers.tsx","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","routes/pmRoute.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","components/Sorting.ts","css/JsStyling.ts","generated/graphql.tsx","img/unnamed.webp","components/tickets/TicketComments.tsx"],"names":["ManageRoles","useGetUsersQuery","data","loading","RoleMethods","deleteUser","pagination","setRole","Sorting","usernameSort","emailSort","roleSort","firstnameSort","lastnameSort","useState","paginationLower","paginationUpper","rows","roleSwitch","emailSwitch","usernameSwitch","fnameSwitch","lnameSwitch","state","setState","useEffect","elems","document","querySelectorAll","M","Sidenav","init","className","pages","eval","getUsers","length","pagesArr","i","push","onClick","map","_val","key","username","email","value","disabled","selected","role","e","firstname","lastname","name","id","type","min","max","onChange","target","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","a","userid","variables","window","location","reload","toast","html","els","getElementsByClassName","el","classList","remove","getElementById","add","Tickets","useGetUserTicketsQuery","sortByTitle","sortTicketsByPriority","sortTicketsByStatus","sortTicketsByType","arr","toggle","toggle2","titleSwitch","getUserTickets","title","priority","status","href","ticketid","TicketHistory","parentid","GetLocation","useGetHistoryQuery","getHistory","propertyChanged","oldValue","newValue","dateChanged","EditTicket","history","useHistory","useGetTicketDataByIdQuery","user","useSelector","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","setTitle","useSetTicketDescMutation","setDesc","useSetTicketPriorityMutation","setPriority","useDeleteTicketMutation","DeleteThisTicket","useAddTicketHistoryMutation","addHistory","description","new","Dropdown","Modal","JsFooterStyling","onresize","getTicketDataById","to","setTicketStatus","setTicketType","setTicketPriority","updateTicket","desc","tmp","deleteTicket","replace","htmlFor","data-error","developer","submitter","data-target","goBack","DevSub","props","useSetTicketDeveloperMutation","setDeveloper","dev","setDev","ProjectDD","useGetProjectDataByIdQuery","projectid","getProjectDataById","ProjectDDWrapper","useGetTicketProjectQuery","getTicketProject","AssignProject","useGetProjectDataQuery","useSetTicketProjectMutation","SetTicketProject","project","setProject","getProjectData","useLocation","pathname","split","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","useLoginMutation","login","useDemoLoginMutation","demoLogin","URI","submitForm","preventDefault","console","log","response2","localStorage","setItem","refreshToken","err","fetch","method","credentials","then","res","demoUser","response","Register","setUsername","setFirstname","setLastname","useRegisterMutation","register","N","loc","src","UserImage","alt","MobileSideNav","UI","children","useLogoutMutation","LOGOUT","client","hover","logout","resetStore","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","AdminRoute","error","changeIndicatorC","color","t","changeIndicatorT","subt","subt2","DashboardTabs","LStitle","getItem","chart","chartData","userTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","val","labels","datasets","label","backgroundColor","borderWidth","JSON","stringify","myTicketsByP","h","m","l","myTicketsByS","o","c","TicketsByP","TicketsByS","TicketsByT","Dashboard","LSname","LSchart","LSdata","parse","Cards","setChart","AutoInit","FloatingActionButton","hoverEnabled","Tooltip","position","setChartType","data-postion","data-tooltip","style","backgroundImage","temp","t1","concat","AddCard","options","responsive","ManageProjects","projectId","DetailsSubCom","keyprop","Projects","useGetUserProjectsQuery","getUserProjects","useGetProjectTickets","useGetProjectTicketsQuery","getProjectTickets","useGetProjectUsers","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","AssignedUsers","TicketDetails","ticket","belongsto","TicketComments","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","PROJECT_ID","assigned","FormSelect","modPersonnel","EditAss","EditPTTable","EditProject","pTitle","pDesc","useSetProjectDescMutation","useSetProjectTitleMutation","useDeleteProjectMutation","delProj","updateProject","deleteProject","useGetUsers","UsersArray","AddTicketToProject","useCreateTicketMutation","Submit","handleSubmit","belongsTo","SetTicketDev","CreateProject","useAddProjectMutation","SUBMIT","userids","usernames","userString","tmp2","indexOf","shift","q","slice","q2","tmp3","PmRoute","Routes","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","headers","json","initState","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","titles","toLowerCase","sort","j","reverse","pop","prioritySwitch","emails","names","undefined","innerWidth","AddCommentDocument","gql","useAddCommentMutation","baseOptions","ApolloReactHooks","AddProjectDocument","AddProjectUserDocument","AddTicketHistoryDocument","CreateTicketDocument","DeleteCommentDocument","useDeleteCommentMutation","DeleteProjectDocument","DeleteTicketDocument","DeleteUserDocument","DemoLoginDocument","GetCommentsDocument","useGetCommentsQuery","GetHistoryDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTicketDataByIdDocument","GetTicketProjectDocument","GetTicketsDocument","GetUserDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","LogoutDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SetProjectDescDocument","SetProjectTitleDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateCommentDocument","useUpdateCommentMutation","UpdateRoleDocument","GetUsersDocument","module","exports","ADD_COMMENT","DELETE_COMMENT","UPDATE_COMMENT","comment","setComment","addComment","setTimeout","deleteComment","commentid","updateComment","updatedMessage","comments","getComments","commenter","createdAt"],"mappings":"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","file":"static/js/main.1279830c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery } from \"../../../generated/graphql\";\r\nimport { RoleMethods } from \"./RoleMethods\";\r\nimport { Sorting } from \"../../Sorting\";\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const { deleteUser, pagination, setRole } = RoleMethods();\r\n    const {\r\n        usernameSort,\r\n        emailSort,\r\n        roleSort,\r\n        firstnameSort,\r\n        lastnameSort,\r\n    } = Sorting();\r\n\r\n    const [state, setState] = useState({\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: \"2\",\r\n        roleSwitch: \"0\",\r\n        emailSwitch: \"0\",\r\n        usernameSwitch: \"0\",\r\n        fnameSwitch: \"0\",\r\n        lnameSwitch: \"0\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    let pages = eval(`(${data.getUsers!.length}/${state.rows}) - 1`);\r\n    let pagesArr = [] as number[];\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Manage Roles</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    UserName\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let usernameSwitch: string =\r\n                                                usernameSort(\r\n                                                    data.getUsers,\r\n                                                    state.usernameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({\r\n                                                ...state,\r\n                                                usernameSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Email\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let emailSwitch: string =\r\n                                                emailSort(\r\n                                                    data.getUsers,\r\n                                                    state.emailSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, emailSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Role\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let roleSwitch: string =\r\n                                                roleSort(\r\n                                                    data.getUsers,\r\n                                                    state.roleSwitch\r\n                                                ) || \"0\";\r\n                                            setState({\r\n                                                ...state,\r\n                                                roleSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    First Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let fnameSwitch: string =\r\n                                                firstnameSort(\r\n                                                    data.getUsers,\r\n                                                    state.fnameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, fnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Last Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let lnameSwitch: string =\r\n                                                lastnameSort(\r\n                                                    data.getUsers,\r\n                                                    state.lnameSwitch\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, lnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUsers!.map ? (\r\n                                data!.getUsers!.map((_val, i: number) => {\r\n                                    if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {!!data.getUsers![i]\r\n                                                        .username\r\n                                                        ? data.getUsers![i]\r\n                                                              .username\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {!!data!.getUsers![i].email\r\n                                                        ? data!.getUsers![i]\r\n                                                              .email\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <div className=\"input-field col s12\">\r\n                                                        <select className=\"browser-default capitalize\">\r\n                                                            <option\r\n                                                                value=\"\"\r\n                                                                className=\"capitalize\"\r\n                                                                disabled\r\n                                                                selected\r\n                                                            >\r\n                                                                {\r\n                                                                    data!\r\n                                                                        .getUsers![\r\n                                                                        i\r\n                                                                    ].role\r\n                                                                }\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`admin`}\r\n                                                                onClick={e => {\r\n                                                                    setRole(\r\n                                                                        e,\r\n                                                                        i,\r\n                                                                        data\r\n                                                                    );\r\n                                                                }}\r\n                                                            >\r\n                                                                Admin\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`developer`}\r\n                                                                onClick={e => {\r\n                                                                    setRole(\r\n                                                                        e,\r\n                                                                        i,\r\n                                                                        data\r\n                                                                    );\r\n                                                                }}\r\n                                                            >\r\n                                                                Developer\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`project-manager`}\r\n                                                                onClick={e => {\r\n                                                                    setRole(\r\n                                                                        e,\r\n                                                                        i,\r\n                                                                        data\r\n                                                                    );\r\n                                                                }}\r\n                                                            >\r\n                                                                Project-manager\r\n                                                            </option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data!.getUsers![i]\r\n                                                            .firstname\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data!.getUsers![i]\r\n                                                            .lastname\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <button\r\n                                                        name={`${\r\n                                                            data!.getUsers![i]\r\n                                                                .id\r\n                                                        }`}\r\n                                                        onClick={e => {\r\n                                                            deleteUser(e);\r\n                                                        }}\r\n                                                        className=\"btn red\"\r\n                                                    >\r\n                                                        Delete\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return null;\r\n                                    }\r\n                                })\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Page Limit:\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        max=\"100\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            setState({ ...state, rows: e.target.value });\r\n                        }}\r\n                    />\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`1li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map((_val, i) => {\r\n                            return (\r\n                                <li key={i + 2} id={`${i + 2}li`}>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        id={`${i + 2}`}\r\n                                        onClick={e => {\r\n                                            let id: string = pagination(e);\r\n                                            setState({\r\n                                                ...state,\r\n                                                // eslint-disable-next-line\r\n                                                paginationLower: eval(\r\n                                                    `${id} - 1`\r\n                                                ),\r\n                                                paginationUpper: id,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        {i + 2}\r\n                                    </a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    useDeleteUserMutation,\r\n    useUpdateRoleMutation,\r\n} from \"../../../generated/graphql\";\r\n\r\nexport const RoleMethods = () => {\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let userid = target.name;\r\n        let tmp = await DELETEUSER({\r\n            variables: {\r\n                userid,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({ html: \"Error occurred while deleting user\" });\r\n        }\r\n    };\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: number, data: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n        if (!id || !role) {\r\n        } else {\r\n            await updateRole({\r\n                variables: {\r\n                    role,\r\n                    id,\r\n                },\r\n            });\r\n\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return {\r\n        deleteUser,\r\n        pagination,\r\n        setRole,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    const {\r\n        pagination,\r\n        sortByTitle,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n    } = Sorting();\r\n\r\n    const [state, setState] = useState({\r\n        arr: [] as any,\r\n        toggle: \"0\",\r\n        toggle2: \"0\",\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: \"4\",\r\n        titleSwitch: \"0\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    let pages = eval(`(${data.getUserTickets.length}/${state.rows}) - 1`);\r\n    let pagesArr = [] as number[];\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">Your Tickets</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Project Title\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let titleSwitch = sortByTitle(\r\n                                                data.getUserTickets,\r\n                                                state.titleSwitch\r\n                                            );\r\n                                            setState({ ...state, titleSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Priority\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle2: string =\r\n                                                sortTicketsByPriority(\r\n                                                    data.getUserTickets,\r\n                                                    state.toggle2\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle2 });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Ticket Status\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle: string =\r\n                                                sortTicketsByStatus(\r\n                                                    data.getUserTickets,\r\n                                                    state.toggle\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Type\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let arr: any = sortTicketsByType(\r\n                                                data.getUserTickets\r\n                                            );\r\n                                            setState({ ...state, arr });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getUserTickets.map ? (\r\n                                data.getUserTickets.map((_val, i) => {\r\n                                    if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .title\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .priority\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .status\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {\r\n                                                        data.getUserTickets[i]\r\n                                                            .type\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"noselect capitalize\">\r\n                                                    <a\r\n                                                        href={`#/ticket-details:${data.getUserTickets[i].ticketid}`}\r\n                                                    >\r\n                                                        Details\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return null;\r\n                                    }\r\n                                })\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Page Limit:\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        max=\"100\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            setState({ ...state, rows: e.target.value });\r\n                        }}\r\n                    />\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`${1}li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map((_val, i) => {\r\n                            return (\r\n                                <li key={i + 2} id={`${i + 2}li`}>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        id={`${i + 2}`}\r\n                                        onClick={e => {\r\n                                            let id: string = pagination(e);\r\n                                            setState({\r\n                                                ...state,\r\n                                                // eslint-disable-next-line\r\n                                                paginationLower: eval(\r\n                                                    `${id} - 1`\r\n                                                ),\r\n                                                paginationUpper: id,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        {i + 2}\r\n                                    </a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetHistoryQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst TicketHistory = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n    const { data, loading } = useGetHistoryQuery({ variables: { parentid } });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            History for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Property</th>\r\n                                    <th>Old Value</th>\r\n                                    <th>New Value</th>\r\n                                    <th>Date Changed</th>\r\n                                </tr>\r\n\r\n                                {!data || !data.getHistory.map ? (\r\n                                    <tr></tr>\r\n                                ) : (\r\n                                    data.getHistory.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .propertyChanged\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .oldValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .newValue\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        data.getHistory[i]\r\n                                                            .dateChanged\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketHistory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetTicketDataByIdQuery,\r\n    useSetTicketStatusMutation,\r\n    useSetTicketTypeMutation,\r\n    useSetTicketTitleMutation,\r\n    useSetTicketDescMutation,\r\n    useSetTicketPriorityMutation,\r\n    useDeleteTicketMutation,\r\n    useAddTicketHistoryMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport M from \"materialize-css\";\r\nimport { DevSub } from \"./DevSub\";\r\nimport { AssignProject } from \"./AssignProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from \"../../../css/JsStyling\";\r\n\r\nexport const EditTicket: React.FC = () => {\r\n    const history: any = useHistory();\r\n    let id = GetLocation();\r\n    // eslint-disable-next-line\r\n    var parentid = eval(id);\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    const [setStatus] = useSetTicketStatusMutation();\r\n    const [setType] = useSetTicketTypeMutation();\r\n    const [setTitle] = useSetTicketTitleMutation();\r\n    const [setDesc] = useSetTicketDescMutation();\r\n    const [setPriority] = useSetTicketPriorityMutation();\r\n    const [DeleteThisTicket] = useDeleteTicketMutation();\r\n    const [addHistory] = useAddTicketHistoryMutation();\r\n    const [state, setState] = useState({\r\n        status: \"\",\r\n        type: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"\",\r\n        new: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (data.getTicketDataById.length === 0) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    const setTicketStatus = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].status!;\r\n        setState({ ...state, status });\r\n        let tmp = await setStatus({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                status: `${status}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Status successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketStatus\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: status,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const setTicketType = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].type!;\r\n        setState({ ...state, type });\r\n        let tmp = await setType({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                type: `${type}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Type successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketType\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: type,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const setTicketPriority = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        let oldValue: string = data.getTicketDataById[0].priority!;\r\n        setState({ ...state, priority });\r\n        let tmp = await setPriority({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n                priority: `${priority}`,\r\n            },\r\n        });\r\n        if (tmp) {\r\n            M.toast({ html: \"Ticket Priority successfully changed\" });\r\n            addHistory({\r\n                variables: {\r\n                    propertyChanged: \"TicketPriority\",\r\n                    oldValue,\r\n                    parentid,\r\n                    newValue: priority,\r\n                },\r\n            });\r\n        } else {\r\n            M.toast({ html: \"Failed! Server is most likely down\" });\r\n        }\r\n    };\r\n\r\n    const updateTicket = async () => {\r\n        if (state.title === \"\" && state.description === \"\") {\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            M.toast({ html: \"Not Enough Data Provided\" });\r\n        } else {\r\n            let oldValue: string = data.getTicketDataById[0].title!;\r\n            setState({ ...state, new: true });\r\n            if (state.title !== \"\") {\r\n                let tmp = await setTitle({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        title: `${state.title}`,\r\n                    },\r\n                });\r\n                if (tmp) {\r\n                    M.toast({ html: \"Ticket Title successfully changed\" });\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketTitle\",\r\n                            newValue: state.title,\r\n                            oldValue,\r\n                            parentid,\r\n                        },\r\n                    });\r\n                } else {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            }\r\n\r\n            if (state.description !== \"\") {\r\n                let tmp = await setDesc({\r\n                    variables: {\r\n                        ticketid: `${id}`,\r\n                        desc: `${state.description}`,\r\n                    },\r\n                });\r\n                let oldValue: string = data.getTicketDataById[0].description!;\r\n                if (tmp) {\r\n                    M.toast({\r\n                        html: \"Ticket Description successfully changed\",\r\n                    });\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketDescription\",\r\n                            newValue: state.description,\r\n                            oldValue,\r\n                            parentid,\r\n                        },\r\n                    });\r\n                } else {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            }\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    const deleteTicket = async () => {\r\n        await DeleteThisTicket({\r\n            variables: {\r\n                ticketid: `${id}`,\r\n            },\r\n        });\r\n        window.location.replace(\"#/dashboard\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">Edit Ticket #{id}</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            {state.new ? (\r\n                                                <span>{state.title}</span>\r\n                                            ) : (\r\n                                                data.getTicketDataById[0]\r\n                                                    .title || (\r\n                                                    <span>No Title</span>\r\n                                                )\r\n                                            )}\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                {state.new ? (\r\n                                                    <span>\r\n                                                        {state.description}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    data.getTicketDataById[0]\r\n                                                        .description || (\r\n                                                        <span>\r\n                                                            No description\r\n                                                        </span>\r\n                                                    )\r\n                                                )}\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <DevSub\r\n                                developer={`${data.getTicketDataById[0].developer}`}\r\n                                submitter={`${data.getTicketDataById[0].submitter}`}\r\n                            />\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {user.role === \"developer\" ? (\r\n                                    <td>{data.getTicketDataById[0].title}</td>\r\n                                ) : (\r\n                                    <AssignProject\r\n                                        title={`${data.getTicketDataById[0].title}`}\r\n                                        id={id}\r\n                                    />\r\n                                )}\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        {state.priority !== \"\" ? (\r\n                                            <span>{state.priority}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .priority || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"low\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"medium\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"high\"\r\n                                                onClick={e =>\r\n                                                    setTicketPriority(e)\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0]\r\n                                                .status || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"open\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"closed\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"on-hold\"\r\n                                                onClick={e =>\r\n                                                    setTicketStatus(e)\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        {state.type !== \"\" ? (\r\n                                            <span>{state.type}</span>\r\n                                        ) : (\r\n                                            data.getTicketDataById[0].type || (\r\n                                                <span>No Type</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"bugs/errors\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"features\"\r\n                                                onClick={e => setTicketType(e)}\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => updateTicket()}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE TICKET #{id}</h4>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteTicket()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useGetUsersQuery,\r\n    useSetTicketDeveloperMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\ninterface Props {\r\n    developer: string;\r\n    submitter: string;\r\n}\r\n\r\nexport const DevSub: React.FC<Props> = props => {\r\n    let id = GetLocation();\r\n    let developer = props.developer;\r\n    let submitter = props.submitter;\r\n    const [setDeveloper] = useSetTicketDeveloperMutation();\r\n    const [state, setState] = useState({\r\n        dev: \"\",\r\n    });\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <div className=\"progress\">\r\n                        <div className=\"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n    const setDev = async (e: React.SyntheticEvent) => {\r\n        if (user.role === \"admin\" || user.role === \"project-manager\") {\r\n            let target = e.target as HTMLButtonElement;\r\n            let dev = target.name;\r\n            setState({ ...state, dev });\r\n            let tmp = await setDeveloper({\r\n                variables: {\r\n                    ticketid: `${id}`,\r\n                    developer: `${dev}`,\r\n                },\r\n            });\r\n            if (tmp) {\r\n                M.toast({ html: \"Ticket Developer successfully changed\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                    <span>\r\n                        <a\r\n                            className=\"dropdown-trigger btn manage-dropdown\"\r\n                            href=\"#!\"\r\n                            data-target=\"dropdowndev\"\r\n                        >\r\n                            {state.dev !== \"\" ? (\r\n                                <span>{state.dev}</span>\r\n                            ) : (\r\n                                <span>{developer}</span> || (\r\n                                    <span>No Status</span>\r\n                                )\r\n                            )}\r\n                        </a>\r\n                        <ul id=\"dropdowndev\" className=\"dropdown-content\">\r\n                            {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                return (\r\n                                    <li key={i}>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name={`${getUsers[i].username}`}\r\n                                            onClick={e => setDev(e)}\r\n                                        >\r\n                                            {getUsers[i].username}\r\n                                        </button>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </span>\r\n                ) : (\r\n                    <span>{developer}</span>\r\n                )}\r\n            </td>\r\n            <td>\r\n                <span>{submitter}</span>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n","import { useGetProjectDataByIdQuery } from \"../../../generated/graphql\"\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n    projectid: string\r\n}\r\n\r\nexport const ProjectDD: React.FC<Props> = (props) => {\r\n    \r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: props.projectid }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            { data.getProjectDataById[0].title }\r\n        </span>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetTicketProjectQuery } from \"../../../generated/graphql\"\r\nimport { GetLocation } from \"../../GetLocation\";\r\nimport { ProjectDD } from \"./ProjectDD\";\r\n\r\nexport const ProjectDDWrapper: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetTicketProjectQuery({ variables: { \r\n        ticketid: `${id}`\r\n    }});\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    return(\r\n        <span>\r\n            <ProjectDD projectid = {`${data.getTicketProject[0].projectid}`} />\r\n        </span>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useGetProjectDataQuery, useSetTicketProjectMutation } from '../../../generated/graphql';\r\nimport { ProjectDDWrapper } from './ProjectDDWrapper';\r\nimport { GetLocation } from '../../GetLocation';\r\ninterface Props {\r\n    title: string,\r\n    id: string\r\n}\r\n\r\nexport const AssignProject: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n    const [SetTicketProject] = useSetTicketProjectMutation();\r\n    const [state, setState] = useState({\r\n        project: '',\r\n    })\r\n    let ticketid = GetLocation();\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n    \r\n    if(loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    \r\n    const setProject = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let projectid = target.name;\r\n        setState({...state, project: `${projectid}`})\r\n        await SetTicketProject({\r\n            variables: {\r\n                ticketid,\r\n                projectid \r\n            }\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <td>\r\n            {/* eslint-disable-next-line */}\r\n            <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownassign'>{state.project !== '' ? <span>{state.project}</span> : <ProjectDDWrapper />}</a>\r\n            <ul id='dropdownassign' className='dropdown-content'>\r\n                { data.getProjectData.map( ( _val, i, getProjectData ) => {\r\n                    return(\r\n                        <li key = {i}><button className = \"btnDropdown\" onClick = { (e) => setProject(e)} name = { `${getProjectData[i].projectid}` }>{ getProjectData[i].title }</button></li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </td>\r\n    );\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const GetLocation = () => {\r\n    let location = useLocation();\r\n    let id = location.pathname;\r\n    let tmp: any = id.split(':');\r\n    id = tmp[1];\r\n    return id;\r\n}","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    useLoginMutation,\r\n    useDemoLoginMutation,\r\n} from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport M from \"materialize-css\";\r\n\r\nexport const Login: React.FC<RouteComponentProps> = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async (e?: React.SyntheticEvent, role?: string) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        if (!!role) {\r\n            try {\r\n                await demoLogin({\r\n                    variables: {\r\n                        role,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                console.log(\"Could not set Role Err :>> \", err);\r\n            }\r\n\r\n            try {\r\n                const response2 = await login({\r\n                    variables: {\r\n                        email: \"demo@demo.com\",\r\n                        password: \"demoPassword\",\r\n                    },\r\n                });\r\n\r\n                try {\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.login.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.login.refreshToken\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(\"Could not set tokens ERR :>> \", err);\r\n                }\r\n                window.location.reload();\r\n            } catch (err) {\r\n                console.log(\"Could not login Err :>> \", err);\r\n                M.toast({ html: \"Failed Login\" });\r\n                M.toast({ html: \"Server is likely down\" });\r\n            }\r\n        } else {\r\n            try {\r\n                if (email.length > 1 && password.length > 1) {\r\n                    await fetch(`${URI}/check-refresh-token`, {\r\n                        method: \"POST\",\r\n                        credentials: \"include\",\r\n                    }).then(async res => {\r\n                        if (res.status === 499) {\r\n                            const response2 = await login({\r\n                                variables: {\r\n                                    email: email,\r\n                                    password: password,\r\n                                },\r\n                            });\r\n\r\n                            if (response2 && response2.data) {\r\n                                setAccessToken(\r\n                                    response2.data.login.accessToken\r\n                                );\r\n                                localStorage.setItem(\r\n                                    \"refreshToken\",\r\n                                    response2.data.login.refreshToken\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n                    window.location.reload();\r\n                } else if (password.length < 1 && email.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                    document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n                } else if (password.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                }\r\n            } catch (error) {\r\n                console.log(\"error :>> \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const demoUser = async (e: React.SyntheticEvent, role: string) => {\r\n        e.preventDefault();\r\n        const response = await demoLogin({\r\n            variables: {\r\n                role,\r\n            },\r\n        });\r\n        console.log(\"response :>> \", response);\r\n\r\n        if (response && response.data) {\r\n            setAccessToken(response.data.demoLogin.accessToken);\r\n            localStorage.setItem(\r\n                \"refreshToken\",\r\n                response.data.demoLogin.refreshToken\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                    onClick={e => submitForm(e)}\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </a>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"dd\")!\r\n                                        .classList.remove(\"hide\");\r\n                                }}\r\n                            >\r\n                                Demo User\r\n                            </button>\r\n                            <span\r\n                                className=\"dropdown-trigger btn stretched manage-dropdown hide\"\r\n                                id=\"dd\"\r\n                                data-target=\"dropdownRole\"\r\n                            >\r\n                                Role\r\n                            </span>\r\n                            <ul id=\"dropdownRole\" className=\"dropdown-content\">\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={async e => {\r\n                                            submitForm(e, \"admin\");\r\n                                        }}\r\n                                    >\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"developer\");\r\n                                        }}\r\n                                    >\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            setEmail(\"demo@demo.com\");\r\n                                            setPassword(\"demoPassword\");\r\n                                            demoUser(e, \"project-manager\");\r\n                                        }}\r\n                                    >\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <span className=\"centered\">\r\n                                <div>\r\n                                    <u>\r\n                                        <a href=\"#/register\">Sign Up Here</a>\r\n                                    </u>\r\n                                </div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useRegisterMutation } from \"../../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [register] = useRegisterMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = async () => {\r\n        if (\r\n            email.length > 1 &&\r\n            password.length > 1 &&\r\n            username.length > 1 &&\r\n            firstname.length > 1 &&\r\n            lastname.length > 1\r\n        ) {\r\n            await fetch(`${URI}/check-refresh-token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n            }).then(async res => {\r\n                if (res.status === 499) {\r\n                    const response2 = await register({\r\n                        variables: {\r\n                            email,\r\n                            password,\r\n                            username,\r\n                            role,\r\n                            firstname,\r\n                            lastname,\r\n                        },\r\n                    });\r\n\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.register.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.register.refreshToken\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById(\"username\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById(\"firstname\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById(\"lastname\")!.classList.add(\"invalid\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Sign Up</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"username\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={username}\r\n                                    onChange={e => setUsername(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a username\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span\r\n                                    className=\"dropdown-trigger btn manage-dropdown\"\r\n                                    id=\"roleDD\"\r\n                                    data-target=\"dropdownRole\"\r\n                                >\r\n                                    Role\r\n                                </span>\r\n                                <ul\r\n                                    id=\"dropdownRole\"\r\n                                    className=\"dropdown-content\"\r\n                                >\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"admin\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Admin\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"developer\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Developer\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"project-manager\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Project Manager\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"firstname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={firstname}\r\n                                    onChange={e => setFirstname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your first name\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"lastname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your last name \"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={e => submitForm()}\r\n                            >\r\n                                Register\r\n                            </button>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                >\r\n                                    Login Here\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport UserImage from \"../img/unnamed.webp\";\r\n\r\nexport const Sidenav = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    useEffect(() => {\r\n        let loc = window.location.pathname;\r\n        document.getElementById(\"tickets\")!.classList.remove(\"active\");\r\n        document.getElementById(\"projects\")!.classList.remove(\"active\");\r\n        if (user.role === \"project-manager\" || user.role === \"admin\") {\r\n            document.getElementById(\"man-projects\")!.classList.remove(\"active\");\r\n        }\r\n        if (user.role === \"admin\") {\r\n            document.getElementById(\"man-roles\")!.classList.remove(\"active\");\r\n        }\r\n        document.getElementById(\"dashboard\")!.classList.remove(\"active\");\r\n        switch (loc) {\r\n            case \"/tickets\": {\r\n                document.getElementById(\"tickets\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-tickets\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/projects\": {\r\n                document.getElementById(\"projects\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-projects\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/manage-projects\": {\r\n                document\r\n                    .getElementById(\"man-projects\")!\r\n                    .classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-man-projects\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/manage-roles\": {\r\n                document.getElementById(\"man-roles\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-man-roles\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n            case \"/dashboard\": {\r\n                document.getElementById(\"dashboard\")!.classList.add(\"active\");\r\n                document\r\n                    .getElementById(\"mobile-dashboard\")!\r\n                    .classList.add(\"active\");\r\n                break;\r\n            }\r\n        }\r\n    });\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a href=\"#/manage-roles\" className=\"navLink\" id=\"man-roles\">\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import UserImage from \"../img/unnamed.webp\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\n\r\nexport const MobileSideNav = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={UserImage} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {\" \"}\r\n                        {user.email} <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"mobile-dashboard\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-roles\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-roles\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            {\" \"}\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            {\" \"}\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"mobile-projects\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"mobile-tickets\">\r\n                    <button className=\"btn\">\r\n                        {\" \"}\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useLogoutMutation } from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { Sidenav } from \"./Sidenav\";\r\nimport { MobileSideNav } from \"./MobileSideNav\";\r\n\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const [LOGOUT, { client }] = useLogoutMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems, {\r\n            hover: true,\r\n        });\r\n    });\r\n\r\n    const logout = async () => {\r\n        await LOGOUT();\r\n        setAccessToken(\"\");\r\n        await client!.resetStore();\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <ul id=\"user-actions\" className=\"dropdown-content\">\r\n                    <li>\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            onClick={() => {\r\n                                logout();\r\n                            }}\r\n                        >\r\n                            Logout\r\n                            <i className=\"material-icons\">exit_to_app</i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul id=\"notifications\" className=\"dropdown-content\">\r\n                    <li></li>\r\n                </ul>\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a href=\"#!\" className=\"brand-logo\">\r\n                            <i className=\"material-icons\">bug_report</i>{\" \"}\r\n                            <b>Bug Tracker</b>\r\n                        </a>\r\n\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            href=\"#\"\r\n                            data-target=\"slide-out\"\r\n                            className=\"sidenav-trigger\"\r\n                        >\r\n                            <i className=\"material-icons\">menu</i>\r\n                        </a>\r\n                        <ul\r\n                            id=\"nav-mobile\"\r\n                            className=\"right hide-on-med-and-down\"\r\n                        >\r\n                            <li>\r\n                                {/* eslint-disable-next-line */}\r\n                                <a\r\n                                    className=\"dropdown-trigger\"\r\n                                    data-target=\"user-actions\"\r\n                                >\r\n                                    USER ACTIONS{\" \"}\r\n                                    <i className=\"material-icons right\">\r\n                                        arrow_drop_down\r\n                                    </i>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">{children ? children : null}</span>\r\n        </div>\r\n    );\r\n};\r\n","import { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default checkAuth();","import React, { FC } from \"react\";\r\nimport { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: FC<IAuthRouteProps> = ({ component: Component, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthRoute;\r\n","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AdminRoute;","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove('indicator-pink');\r\n    t?.classList.remove('indicator-darkblue');\r\n    t?.classList.remove('indicator-cyan');\r\n    switch (color) {\r\n        case 'pink': {\r\n            t?.classList.add('indicator-pink');\r\n            break;\r\n        }\r\n        case 'dark-blue': {\r\n            t?.classList.add('indicator-darkblue');\r\n            break;\r\n        }\r\n        case 'cyan': {\r\n            t?.classList.add('indicator-cyan');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove('indicator-blue')\r\n    t?.classList.remove('indicator-yellow')\r\n    switch (color) {\r\n        case 'yellow': {\r\n            t?.classList.add('indicator-yellow');\r\n            subt?.classList.add('indicator-blue');\r\n            break;\r\n        }\r\n        case 'blue': {\r\n            t?.classList.add('indicator-blue');\r\n            subt2?.classList.add('indicator-yellow');\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// export const changeIndicatorP = (i: string, color: string) => {\r\n//     let t = document.getElementById(`ul3${i}`)\r\n//     let subt = document.getElementById(`sub-tab3${i}`);\r\n//     let subt2 = document.getElementById(`sub-tab3.1${i}`);\r\n//     t?.classList.remove('indicator-orange');\r\n//     t?.classList.remove('indicator-blue');\r\n//     switch (color) {\r\n//         case 'orange': {\r\n//             t?.classList.add('indicator-orange');\r\n//             subt?.classList.add('indicator-blue');\r\n//             break;\r\n//         }\r\n//         case 'blue': {\r\n//             t?.classList.add('indicator-blue');\r\n//             subt2?.classList.add('indicator-orange');\r\n//             break;\r\n//         }\r\n//     }\r\n// }","import { useState } from \"react\";\r\nimport { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabs = () => {\r\n    let LStitle: any = localStorage.getItem(\"title\");\r\n    if (!!LStitle) {\r\n        LStitle = LStitle!.split(\",\");\r\n    }\r\n    const [title, setTitle] = useState({ title: LStitle || ([] as string[]) });\r\n    // eslint-disable-next-line\r\n    const [chartData, setChartData] = useState({ chart: [{}] });\r\n    const userTickets = useGetUserTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n    const tickets = useGetTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {};\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Priority\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"My Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Status\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = chartData.chart;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = title.title;\r\n        t[i] = \"All Tickets By Type\";\r\n        setTitle({ title: t });\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    return {\r\n        title,\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    };\r\n};\r\n","import { useGetUserTicketsQuery } from \"../../generated/graphql\"\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getUserTickets;\r\n}","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) { return {} }\r\n    return data.getTickets\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from \"react-chartjs-2\";\r\nimport M from \"materialize-css\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabs } from \"./DashboardTabs\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    let LSname: any = localStorage.getItem(\"chartType\");\r\n    if (!!LSname) {\r\n        LSname = LSname!.split(\",\");\r\n    }\r\n    let LSchart: any = localStorage.getItem(\"chart\");\r\n    if (!!LSchart) {\r\n        LSchart = LSchart.split(\",\");\r\n    }\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || ([] as string[]) });\r\n    const {\r\n        title,\r\n        myTicketsByS,\r\n        myTicketsByP,\r\n        myTicketsByT,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    } = DashboardTabs();\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        var elems = document.querySelectorAll(\".fixed-action-btn\");\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false,\r\n        });\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems, {\r\n            position: \"left\",\r\n        });\r\n    });\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat((temp! += 1));\r\n        setState({ ...state, Cards: state.Cards.concat((temp! += 1)) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat(\"\"),\r\n        });\r\n        localStorage.setItem(\"chart\", `${t1}`);\r\n    };\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp,\r\n            });\r\n            localStorage.setItem(\"chartType\", `${tmp}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <span>\r\n            <div className=\"fixed-action-btn\">\r\n                {/* eslint-disable-next-line */}\r\n                <a\r\n                    className=\"btn-floating tooltipped btn-large\"\r\n                    data-postion=\"left\"\r\n                    data-tooltip=\"ADD A CHART\"\r\n                    style={{\r\n                        backgroundImage:\r\n                            \"linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)\",\r\n                    }}\r\n                    onClick={() => {\r\n                        AddCard();\r\n                    }}\r\n                >\r\n                    <i className=\"material-icons\">insert_chart</i>\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                {state.Cards.map(function (_val: any, i: any) {\r\n                    return (\r\n                        <div className=\"col s11 m6 chart-lengthen\" key={i}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <span className=\"card-title center\">\r\n                                            {title!.title[i]}\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div className=\"row row-verticle-center\">\r\n                                        <div className=\"col l12 m12 s12 centered\">\r\n                                            {chart.name[i] === \"Donut\" &&\r\n                                            !!LSdata ? (\r\n                                                <Doughnut\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Bar\" &&\r\n                                            !!LSdata ? (\r\n                                                <Bar\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                            {chart.name[i] === \"Pie\" &&\r\n                                            !!LSdata ? (\r\n                                                <Pie\r\n                                                    data={LSdata[i]}\r\n                                                    options={{\r\n                                                        responsive: true,\r\n                                                    }}\r\n                                                />\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card-tabs\">\r\n                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                        <li className=\"tab\">\r\n                                            <a\r\n                                                className=\"active\"\r\n                                                href={`#tab${i}`}\r\n                                            >\r\n                                                Chart Type\r\n                                            </a>\r\n                                        </li>\r\n                                        <li className=\"tab\">\r\n                                            <a href={`#tab2${i}`}>Tickets </a>\r\n                                        </li>\r\n                                        {/* <li className=\"tab\"><a href={`#tab3${i}`}>Projects</a></li> */}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div className=\"card-content grey lighten-4\">\r\n                                    <div id={`tab${i}`}>\r\n                                        <div className=\"card-tabs\">\r\n                                            <ul\r\n                                                id={`ul${i}`}\r\n                                                className=\"tabs tabs-fixed-width\"\r\n                                            >\r\n                                                <li className=\"tab\">\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a\r\n                                                        className=\"active\"\r\n                                                        onClick={() => {\r\n                                                            changeIndicatorC(\r\n                                                                `${i}`,\r\n                                                                \"pink\"\r\n                                                            );\r\n                                                        }}\r\n                                                    >\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Donut`}\r\n                                                            onClick={e =>\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Donut{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"dark-blue\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Pie`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Pie{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                                <li\r\n                                                    className=\"tab\"\r\n                                                    onClick={() => {\r\n                                                        changeIndicatorC(\r\n                                                            `${i}`,\r\n                                                            \"cyan\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {/* eslint-disable-next-line */}\r\n                                                    <a>\r\n                                                        <button\r\n                                                            className=\"card-opt\"\r\n                                                            key={i}\r\n                                                            name={`Bar`}\r\n                                                            onClick={e => {\r\n                                                                setChartType(\r\n                                                                    e,\r\n                                                                    i\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                            Bar{\" \"}\r\n                                                        </button>\r\n                                                    </a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div id={`tab2${i}`}>\r\n                                        <ul\r\n                                            id={`ul2${i}`}\r\n                                            className=\"tabs tabs-fixed-width\"\r\n                                        >\r\n                                            <li className=\"tab my-tickets\">\r\n                                                <a\r\n                                                    className=\"active\"\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"yellow\"\r\n                                                        )\r\n                                                    }\r\n                                                    href={`#sub-tab2${i}`}\r\n                                                >\r\n                                                    My Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                            <li className=\"tab all-tickets\">\r\n                                                <a\r\n                                                    href={`#sub-tab2.1${i}`}\r\n                                                    onClick={() =>\r\n                                                        changeIndicatorT(\r\n                                                            `${i}`,\r\n                                                            \"blue\"\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    All Tickets\r\n                                                </a>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab2${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul\r\n                                                        id={`ul2${i}`}\r\n                                                        className=\"tabs tabs-fixed-width\"\r\n                                                    >\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active yellow-text\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByP!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Priority{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByS!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Status{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() => {\r\n                                                                        myTicketsByT!(\r\n                                                                            i\r\n                                                                        );\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Type{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab2.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a className=\"active\">\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByP!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Priority{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByS!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Status{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            {/* eslint-disable-next-line */}\r\n                                                            <a>\r\n                                                                <button\r\n                                                                    className=\"card-opt\"\r\n                                                                    key={i}\r\n                                                                    onClick={() =>\r\n                                                                        TicketsByT!(\r\n                                                                            i\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {\" \"}\r\n                                                                    By Type{\" \"}\r\n                                                                </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* <div id={`tab3${i}`}>\r\n                                        <ul id={`ul3${i}`} className=\"tabs tabs-fixed-width\">\r\n                                            <li className=\"tab\"><a className=\"active\" href={`#sub-tab3${i}`} onClick={() => changeIndicatorP(`${i}`, 'orange')}>My Projects</a></li>\r\n                                            <li className=\"tab\"><a href={`#sub-tab3.1${i}`} onClick={() => changeIndicatorP(`${i}`, 'blue')}>All Projects</a></li>\r\n                                        </ul>\r\n                                        <div className=\"card-content grey lighten-4\">\r\n                                            <div id={`sub-tab3${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div id={`sub-tab3.1${i}`}>\r\n                                                <div className=\"card-tabs\">\r\n                                                    <ul className=\"tabs tabs-fixed-width\">\r\n                                                        <li className=\"tab\">\r\n                                                            <a className=\"active\">\r\n                                                                <button className=\"card-opt\" key={i}> By Priority </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Status </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                        <li className=\"tab\">\r\n                                                            <a>\r\n                                                                <button className=\"card-opt\" key={i}> By Type </button>\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </span>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGetProjectDataQuery } from \"../../../generated/graphql\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text noselect\">Manage Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <b>Project Name</b>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    <b>Description</b>\r\n                                </th>\r\n                                <th>\r\n                                    <b>Users Assigned</b>\r\n                                </th>\r\n                                <th className=\"noselect\">\r\n                                    <b>Edit/Details</b>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data.getProjectData.map ? (\r\n                                data.getProjectData.map(\r\n                                    (_val, i, getProjectData) => {\r\n                                        let projectId =\r\n                                            getProjectData[i].projectid;\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i].title\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td className=\"nonessen\">\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i]\r\n                                                            .description\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        getProjectData[i]\r\n                                                            .projectid\r\n                                                    }{\" \"}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {\" \"}\r\n                                                    <a\r\n                                                        href={`#/edit-project:${projectId}`}\r\n                                                    >\r\n                                                        <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                            edit\r\n                                                        </i>\r\n                                                    </a>\r\n                                                    <br />\r\n                                                    <a\r\n                                                        href={`#/project-details:${projectId}`}\r\n                                                    >\r\n                                                        <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                            details\r\n                                                        </i>\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <tr></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"poormans-divider\"></div>\r\n                    <a href=\"#/create-project\">\r\n                        <button className=\"btn btn-ex safe-btn center footerBtn\">\r\n                            Add Project\r\n                        </button>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number,\r\n    keyprop: number,\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = (props) => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${props.projectid}` }});\r\n\r\n    if (loading || !data) {\r\n        return(\r\n            <tr><td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td></tr>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <tr key = {props.keyprop}>\r\n            <td>\r\n                { data.getProjectDataById[0].title }\r\n            </td>\r\n\r\n            <td className = \"nonessen\">\r\n                { data.getProjectDataById[0].description }\r\n            </td>\r\n\r\n            <td>\r\n                <a href = {`#/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading } = useGetUserProjectsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h2 className=\"white-text\">My Projects</h2>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {!!data!.getUserProjects!.map ? data!.getUserProjects!.map((_val, i, getUserProjects): JSX.Element => {\r\n                                return (\r\n                                    <DetailsSubCom projectid={getUserProjects[i].projectid} key={i} keyprop={i} />\r\n                                );\r\n                            })\r\n                                :\r\n                                <tr></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst useGetProjectTickets = () => {\r\n    let id = GetLocation();\r\n\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let Tickets = data.getProjectTickets;\r\n        return Tickets;\r\n    }\r\n};\r\n\r\nexport default useGetProjectTickets;\r\n","import { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nconst useGetProjectUsers = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let AssignedUsers = data.getProjectUsersById;\r\n        return AssignedUsers;\r\n    }\r\n};\r\n\r\nexport default useGetProjectUsers;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport useGetProjectTickets from \"./useGetProjectTickets\";\r\nimport { Sorting } from \"../Sorting\";\r\nimport { useState } from \"react\";\r\nimport useGetProjectUsers from \"./useGetProjectUsers\";\r\n\r\nexport const ProjectDetails: React.FC = () => {\r\n    let history: any = useHistory();\r\n    let id = GetLocation();\r\n    const {\r\n        sortByTitle,\r\n        sortTicketsByStatus,\r\n        usernameSort,\r\n        emailSort,\r\n        roleSort,\r\n    } = Sorting();\r\n    const [state, setState] = useState({\r\n        toggle: \"0\",\r\n        titleSwitch: \"0\",\r\n        usernameSwitch: \"0\",\r\n        emailSwitch: \"0\",\r\n        roleSwitch: \"0\",\r\n    });\r\n\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n\r\n    let Tickets = useGetProjectTickets();\r\n    let AssignedUsers = useGetProjectUsers();\r\n\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"Tickets :>> \", Tickets);\r\n    return (\r\n        <span>\r\n            {data.getProjectDataById.length === 0 ? (\r\n                <Redirect to=\"#/dashboard\" />\r\n            ) : (\r\n                <div className=\"detailsWrapper container-fluid\">\r\n                    <div className=\"center-align table-wrapper\">\r\n                        <span className=\"table-header z-depth-2\">\r\n                            <h2 className=\"white-text\">\r\n                                Details for Project #{id}\r\n                            </h2>\r\n                        </span>\r\n\r\n                        <span className=\"table-body z-depth-1\">\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Project Name</th>\r\n                                        <th>Project Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {data.getProjectDataById[0].title}\r\n                                        </td>\r\n                                        <td>\r\n                                            {\r\n                                                data.getProjectDataById[0]\r\n                                                    .description\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row\">\r\n                                <span className=\"col s5 m5 l5 xl5\">\r\n                                    <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Assigned Personnel\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        User Name\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let usernameSwitch: string = usernameSort(\r\n                                                                    AssignedUsers,\r\n                                                                    state.usernameSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    usernameSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>\r\n                                                        Email\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let emailSwitch: string =\r\n                                                                    emailSort(\r\n                                                                        AssignedUsers,\r\n                                                                        state.emailSwitch\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    emailSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>\r\n                                                        Role\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let roleSwitch: string =\r\n                                                                    roleSort(\r\n                                                                        AssignedUsers,\r\n                                                                        state.roleSwitch\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    roleSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <tbody>\r\n                                            {AssignedUsers!.map(\r\n                                                (_val, i): JSX.Element => {\r\n                                                    return (\r\n                                                        <tr key={i}>\r\n                                                            <td className=\"capitalize nonessen\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].username\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td className=\"capitalize nonessen\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].email\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td className=\"capitalize\">\r\n                                                                {\r\n                                                                    AssignedUsers![\r\n                                                                        i\r\n                                                                    ].role\r\n                                                                }\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </span>\r\n\r\n                                <span className=\"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                                    <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                        <h3 className=\"white-text\">\r\n                                            Tickets for Project #{id}\r\n                                        </h3>\r\n                                    </span>\r\n\r\n                                    <table className=\"striped\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        Title\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let titleSwitch = sortByTitle(\r\n                                                                    Tickets,\r\n                                                                    state.titleSwitch\r\n                                                                );\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    titleSwitch,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Submitter</b>\r\n                                                </th>\r\n                                                <th className=\"nonessen\">\r\n                                                    <b>Developer</b>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <b>\r\n                                                        Status\r\n                                                        <i\r\n                                                            className=\"material-icons noselect\"\r\n                                                            onClick={() => {\r\n                                                                let toggle: string =\r\n                                                                    sortTicketsByStatus(\r\n                                                                        Tickets,\r\n                                                                        state.toggle\r\n                                                                    ) || \"0\";\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    toggle,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            swap_vert\r\n                                                        </i>\r\n                                                    </b>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n\r\n                                        <tbody>\r\n                                            {!Tickets\r\n                                                ? null\r\n                                                : Tickets!.map((_val, i) => {\r\n                                                      return (\r\n                                                          <tr key={i}>\r\n                                                              <td className=\"capitalize\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ].title\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize nonessen\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ]\r\n                                                                          .submitter\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize nonessen\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ]\r\n                                                                          .developer\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td className=\"capitalize\">\r\n                                                                  {\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ].status\r\n                                                                  }\r\n                                                              </td>\r\n                                                              <td>\r\n                                                                  <a\r\n                                                                      className=\"noselect\"\r\n                                                                      href={`#/ticket-details:${\r\n                                                                          Tickets![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .ticketid\r\n                                                                      }`}\r\n                                                                  >\r\n                                                                      Details\r\n                                                                  </a>\r\n                                                              </td>\r\n                                                          </tr>\r\n                                                      );\r\n                                                  })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n\r\n                            <button\r\n                                className=\"btn left footerBtn\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                Go Back\r\n                            </button>\r\n                            {user.role === \"developer\" ? null : (\r\n                                <a href={`#/edit-project:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { useEffect } from \"react\";\r\nimport TicketComments from \"./TicketComments\";\r\nimport TicketHistory from \"./TicketHistory\";\r\n\r\nexport const TicketDetails: React.FC = () => {\r\n    const history = useHistory();\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetTicketDataByIdQuery({\r\n        variables: { id: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data) {\r\n        return <span>no data</span>;\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n\r\n    return (\r\n        <span>\r\n            {ticket.length === 0 ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                <>\r\n                    <div className=\"container \">\r\n                        <div className=\"center-align table-wrapper\">\r\n                            <span className=\"table-header z-depth-2\">\r\n                                <h2 className=\"white-text noselect\">\r\n                                    Details For Ticket #{id}\r\n                                </h2>\r\n                            </span>\r\n\r\n                            <span className=\"table-body z-depth-1\">\r\n                                <table className=\"striped responsive\">\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>TITLE</th>\r\n                                            <th>DESCRIPTION</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].title}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].description ||\r\n                                                    \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>ASSIGNED DEVELOPER</th>\r\n                                            <th>SUBMITTER</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].developer}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].submitter}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>BELONGS TO PROJECT</th>\r\n                                            <th>TICKET PRIORITY</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td>#{ticket[0].belongsto}</td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].priority}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>TICKET STATUS</th>\r\n                                            <th>TICKET TYPE</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].status}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket[0].type || \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                                <div className=\"divider\"></div>\r\n\r\n                                <button\r\n                                    className=\"btn left footerBtn\"\r\n                                    onClick={() => history.goBack()}\r\n                                >\r\n                                    Back\r\n                                </button>\r\n                                <a href={`#/edit-ticket:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TicketComments />\r\n                    <TicketHistory />\r\n                </>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","\r\nexport const CheckIfInProject = (id: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers\r\n    for(let x = 0; x < users.length; x++) {\r\n        if(users[x].id === id) {\r\n            tmp = true\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n}","import { useGetUsersQuery, useAddProjectUserMutation, useRemoveProjectUserMutation } from \"../../../generated/graphql\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const USERS = (projectUsers: any) => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n    const PROJECT_ID = GetLocation();\r\n    // eslint-disable-next-line\r\n    const [state, setState] = useState({\r\n        assigned: projectUsers,\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('select');\r\n        M.FormSelect.init(elems);\r\n    })\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className = \"progress\">\r\n                    <div className = \"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const modPersonnel = async (i: number) => {\r\n        if(CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            await removeUser({ \r\n                variables: {\r\n                    userid: `${data!.getUsers![i].id}`,\r\n                    projectid: `${PROJECT_ID}`\r\n                }\r\n            });\r\n            M.toast({html: `Removed ${data!.getUsers![i].username}`});\r\n        } else {\r\n            await addUser({ \r\n                variables: {\r\n                    projectid: `${PROJECT_ID}`,\r\n                    userid: `${data!.getUsers![i].id}`\r\n                }\r\n            });\r\n            M.toast({html: `Added ${data!.getUsers![i].username}`});\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select className = \"browser-default\">\r\n                    <option value=\"\" disabled selected>Click to add/remove</option>\r\n                    { data!.getUsers!.map( ( _val, i, getUsers ) => {\r\n                        return(\r\n                            <option key={ i } onClick = { () => { modPersonnel(i) } }>  { getUsers[i].username } </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\n\r\n\r\nexport const EditAss: React.FC = () => {\r\n    const id = GetLocation();\r\n    const { data, loading } = useGetProjectUsersByIdQuery({ variables: { projectid: `${id}` } });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectUsersById!.map((_val, i, getProjectUsersById): JSX.Element => {\r\n\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].username} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].email} </td>\r\n                        <td className=\"capitalize\"> {getProjectUsersById[i].role} </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n\r\n            <tr>\r\n                <USERS projectUsers={data.getProjectUsersById} />\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocation } from \"../../GetLocation\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${id}`,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {!!data ? (\r\n                data!.getProjectTickets.map((_val, i, getProjectTickets) => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td> {getProjectTickets[i].title} </td>\r\n                            <td> {getProjectTickets[i].submitter} </td>\r\n                            <td> {getProjectTickets[i].developer} </td>\r\n                            <td> {getProjectTickets[i].status} </td>\r\n                            <td>\r\n                                <a\r\n                                    href={`#/edit-ticket:${getProjectTickets[i].ticketid}`}\r\n                                >\r\n                                    EDIT\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            ) : (\r\n                <tr></tr>\r\n            )}\r\n            <tr>\r\n                <td>\r\n                    <a href={`#/project-add:${id}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            Add Ticket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery, useSetProjectDescMutation, useSetProjectTitleMutation, useDeleteProjectMutation } from \"../../generated/graphql\";\r\nimport { EditAss } from \"./edit-project/EditAss\";\r\nimport { EditPTTable } from \"./edit-project/EditPTTable\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport { JsFooterStyling } from \"../../css/JsStyling\";\r\n\r\nexport const EditProject: React.FC = () => {\r\n    const history: any = useHistory(); \r\n    const [state, setState] = useState({\r\n        pTitle: '',\r\n        pDesc: '',\r\n    });\r\n    let id = GetLocation();\r\n    const { data, loading } = useGetProjectDataByIdQuery({ variables: { projectid: `${id}` }});\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n        \r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    }\r\n\r\n    if(loading || !data) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(data.getProjectDataById.length === 0) {\r\n        return(\r\n            <Redirect to = '/manage-projects' />\r\n        )\r\n    }\r\n\r\n    const updateProject = async () => {\r\n        if(state.pDesc !== '' || state.pTitle !== '') {\r\n            if(state.pTitle !== '') {\r\n                setTitle({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        title: `${state.pTitle}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Title Successfully Changed'});\r\n            }\r\n            if(state.pDesc !== '') {\r\n                setDesc({\r\n                    variables: {\r\n                        projectid: `${id}`,\r\n                        description: `${state.pDesc}`\r\n                    }\r\n                });\r\n                M.toast({html: 'Project Description Successfully Changed'});\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteProject = async () => {\r\n        let tmp = await delProj({\r\n            variables: {\r\n                projectid: `${id}`\r\n            }\r\n        })\r\n        if(tmp) {\r\n            window.location.reload();\r\n        } else {\r\n            M.toast({html: 'An Error Occured while deleting project'});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"detailsWrapper container-fluid\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    \r\n                    <h2 className = \"white-text\">Edit Project #{id}</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"responsive-table striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-name\" value = { state.pTitle } onChange = { (e) => setState({ ...state, pTitle: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-name\">{state.pTitle !== '' ? <span>{state.pTitle}</span> : data.getProjectDataById[0].title }</label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type=\"text\" id = \"project-desc\" value = { state.pDesc } onChange = { (e) => setState({ ...state, pDesc: e.target.value}) }/>\r\n                                        <label htmlFor = \"project-desc\">{state.pDesc !== '' ? <span>{state.pDesc}</span> : data.getProjectDataById[0].description}</label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"row\">\r\n                        <span className = \"col s5 m5 l5 xl5\">\r\n                            <span className = 'personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                <h3 className = \"white-text\">Assigned Personnel</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>User Name</b></th>\r\n                                        <th><b>Email</b></th>\r\n                                        <th><b>Role</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAss />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className = \"col s5 m5 l5 xl5 offset-s2 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className = \"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className = \"white-text\">Tickets for Project #{id}</h3>\r\n                            </span>\r\n\r\n                            <table className = \"responsive-table striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th><b>Title</b></th>\r\n                                        <th><b>Submitter</b></th>\r\n                                        <th><b>Developer</b></th>\r\n                                        <th><b>Status</b></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className = \"divider\"></div>\r\n                    <div className = \"row\">\r\n                        <button id = \"backBtn\" className = \"btn left footerBtn\" onClick = { () =>  history.goBack() }>Back</button>\r\n                        <button id = \"deleteBtn\" className = \"btn center danger-btn modal-trigger\" data-target=\"modal1\">DELETE</button>  \r\n                        <button id = \"submitBtn\" className = \"btn right safe-btn\" onClick = { () => {updateProject()} }>Submit</button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO DELETE PROJECT #{id}</h4>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                    <button className  = \"modal-close waves-effect waves-green btn-flat\">CANCEL</button>\r\n                    <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => deleteProject() }>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    \r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if(loading || !data) {\r\n\r\n    } else {\r\n        let UsersArray = data.getUsers\r\n        return {\r\n            UsersArray\r\n        }\r\n    }\r\n\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../tickets/useGetUsers\";\r\nimport { useCreateTicketMutation } from \"../../generated/graphql\";\r\nimport { GetLocation } from \"../GetLocation\";\r\n\r\nexport const AddTicketToProject: React.FC = () => {\r\n    const UsersArray = useGetUsers();\r\n    const history = useHistory();\r\n    const id = GetLocation();\r\n    const user = useSelector<State, User>( (state) => state.user || { id: 0,email: '',role: '',username: '',firstname: '',lastname: '',})\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [state, setState] = useState({\r\n        status: '',\r\n        type: '',\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        dev: '',\r\n    });\r\n\r\n    useEffect( () => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll('.dropdown-trigger');\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll('.sidenav');\r\n        M.Sidenav.init(elems);\r\n    })\r\n\r\n    if(!UsersArray) {\r\n        return(\r\n            <div className = \"progress\">\r\n                <div className = \"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if(state.status === '' || state.type === '' || state.title === '' || state.description === '' || state.priority === '') {\r\n            M.toast({html: 'Missing Data'});\r\n            document.getElementById('dev-hpr-br')?.classList.add('hide');\r\n            document.getElementById('dev-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('status-hpr-br')?.classList.add('hide');\r\n            document.getElementById('status-hpr')?.classList.add('hide');\r\n            \r\n            document.getElementById('type-hpr-br')?.classList.add('hide');\r\n            document.getElementById('type-hpr')?.classList.add('hide');\r\n\r\n            document.getElementById('pri-hpr-br')?.classList.add('hide');\r\n            document.getElementById('pri-hpr')?.classList.add('hide');\r\n\r\n            if(state.title === '') {\r\n                document.getElementById('title')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.description === '') {\r\n                document.getElementById('desc')!.classList.add('invalid');\r\n            }\r\n\r\n            if(state.type === '') {\r\n                document.getElementById('type-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('type-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.status === '') {\r\n                document.getElementById('status-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('status-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.dev === '') {\r\n                document.getElementById('dev-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('dev-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n            if(state.priority === '') {\r\n                document.getElementById('pri-hpr-br')?.classList.toggle('hide');\r\n                document.getElementById('pri-hpr')?.classList.toggle('hide');\r\n            }\r\n\r\n        } else {\r\n            await Submit({\r\n                variables: {\r\n                    title: state.title,\r\n                    description: state.description,\r\n                    belongsTo: `${id}`,\r\n                    developer: state.dev,\r\n                    priority: state.priority,\r\n                    status: state.status,\r\n                    submitter: user.username,\r\n                    type: state.type\r\n                }\r\n            })\r\n            history.push({ pathname: '#/manage' })   \r\n        }\r\n    }\r\n\r\n    const setTicketType = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let type = target.name;\r\n        setState({...state, type });\r\n    }\r\n    \r\n    const setTicketStatus = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let status = target.name;\r\n        setState({...state, status });\r\n    }\r\n\r\n    const SetTicketDev = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let dev = target.name;\r\n        setState({...state, dev});\r\n    }\r\n\r\n    const setTicketPriority = (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let priority = target.name;\r\n        setState({...state, priority});\r\n    }\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"center-align table-wrapper\">\r\n                <span className = \"table-header z-depth-2\">\r\n                    <h2 className = \"white-text noselect\">Create Ticket</h2>\r\n                </span>\r\n\r\n                <span className = \"table-body z-depth-1\">\r\n                    <table className = \"striped responsive\">\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className = \"input-field\">\r\n                                        <input type = \"text\" id = \"title\" className = \"validate\" value = {state.title} onChange = { (e) => setState({...state, title: e.target.value})} />\r\n                                        <label htmlFor = \"title\">ADD A TITLE</label>\r\n                                        <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className = \"input-field\">\r\n                                            <input type = \"text\" id = \"desc\" className = \"validate\" value = {state.description} onChange = { (e) => setState({...state, description: e.target.value})} />\r\n                                            <label htmlFor = \"desc\">ADD A DESCRIPTION</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' data-target='dropdownDev'>{ state.dev !== '' ? <span>{ state.dev }</span> : <span>Assign a Developer</span>}</a>\r\n                                    <ul id='dropdownDev' className='dropdown-content'>\r\n                                        { UsersArray!.UsersArray!.map((_val, i, UsersArray) => {\r\n                                            return(\r\n                                                <li key = {i}><button className = \"btnDropdown\" name = {`${UsersArray[i].username}`} onClick = { (e) => SetTicketDev(e) }>{UsersArray[i].username}</button></li>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"dev-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"dev-hpr\">Please Assign a Developer</span>\r\n                                </td>\r\n                                <td>{ user.username } (YOU)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    #{id}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownpriority'>{state.priority !== '' ? <span>{state.priority}</span> : <span>Ticket Priority</span>}</a>\r\n                                    <ul id='dropdownpriority' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"low\" onClick = { (e) => setTicketPriority(e)}>Low</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"medium\" onClick = { (e) => setTicketPriority(e)}>Medium</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"high\" onClick = { (e) => setTicketPriority(e)}>High</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"pri-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"pri-hpr\">Please Assign a Ticket Priority</span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdownstatus'>{ state.status !== '' ? <span>{ state.status }</span> : <span>Set Ticket Status</span> }</a>\r\n                                    <ul id='dropdownstatus' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"open\" onClick = { (e) => setTicketStatus(e)}>Open</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"closed\" onClick = { (e) => setTicketStatus(e)}>Closed</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"on-hold\" onClick = { (e) => setTicketStatus(e)}>On Hold</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"status-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"status-hpr\">Please Select a Ticket Status</span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a className='dropdown-trigger btn manage-dropdown' href='#!' data-target='dropdowntype'>{ state.type !== '' ? <span>{ state.type }</span> : <span>Set Ticket Type</span> }</a>\r\n                                    <ul id='dropdowntype' className='dropdown-content'>\r\n                                        <li><button className = \"btnDropdown\" name = \"bugs-errors\" onClick = { (e) => setTicketType(e)}>Bugs/Errors</button></li>\r\n                                        <li><button className = \"btnDropdown\" name = \"features\" onClick = { (e) => setTicketType(e)}>Features</button></li>\r\n                                    </ul>\r\n                                    <br className = \"helper-br hide\" id = \"type-hpr-br\"/>\r\n                                    <span className = \"fake-helper-text red-text hide\" id = \"type-hpr\">Please Select a Ticket Type</span>\r\n                                </td>\r\n\r\n                            </tr> \r\n                            \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className = \"divider\"></div>\r\n\r\n                    <div className = \"row\">\r\n                        <button className = \"btn left footerBtn modal-trigger\" data-target = \"cancelModal\">Back</button>\r\n                        <button className = \"btn right safe-btn\" onClick = { () => handleSubmit()}>Submit</button>\r\n                    </div>\r\n\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className  = \"modal\">\r\n                    <div className  = \"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className  = \"modal-footer\">\r\n                        <button className  = \"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                        <button className  = \"modal-close red white-text waves-effect waves-red btn-flat\" onClick = { () => history.goBack() }>CANCEL</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery, useAddProjectMutation } from \"../../../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../tickets/useGetUsers\";\r\n\r\nexport const CreateProject: React.FC = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n    const history = useHistory();\r\n    const UsersArray = useGetUsers();\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [state, setState] = useState({\r\n        title: '',\r\n        description: '',\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll('.modal');\r\n        M.Modal.init(elems);\r\n    })\r\n\r\n    if (loading || !data || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === '' || state.description === '') {\r\n            if (state.title === '') {\r\n                document.getElementById('title')?.classList.add('invalid');\r\n            }\r\n            if (state.description === '') {\r\n                document.getElementById('desc')?.classList.add('invalid');\r\n            }\r\n\r\n            M.toast({ html: 'Missing Data' });\r\n        } else {\r\n            await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users: state.userString\r\n                }\r\n            })\r\n            M.toast({ html: 'Project added successfully' });\r\n            window.location.replace('/manage-projects');\r\n        }\r\n    }\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n        setState({ ...state, userids: tmp, usernames: tmp2 });\r\n        setState({ ...state, userString: tmp3 });\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">Create Project</h2>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input type=\"text\" id=\"title\" className=\"validate\" value={state.title} onChange={(e) => setState({ ...state, title: e.target.value })} />\r\n                                            <label htmlFor=\"title\">ADD A TITLE</label>\r\n                                            <span className=\"helper-text\" data-error=\"Please enter a title\"></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input type=\"text\" id=\"desc\" className=\"validate\" value={state.description} onChange={(e) => setState({ ...state, description: e.target.value })} />\r\n                                                <label htmlFor=\"desc\">ADD A DESCRIPTION</label>\r\n                                                <span className=\"helper-text\" data-error=\"Please enter a Description\"></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className='personnel-header z-depth-2 col s12 m12 l12 xl12'>\r\n                                    <h3 className=\"white-text\">Assign Personnel</h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map((_val, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    {state.usernames[i]}\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                    </tbody>\r\n\r\n\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>Click to add/remove</option>\r\n                                        {data!.getUsers!.map((_val, i, getUsers) => {\r\n                                            return (\r\n                                                <option key={i} onClick={() => { addUser(getUsers[i].id, getUsers[i].username) }}>  {getUsers[i].username} </option>\r\n                                            );\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn left footerBtn modal-trigger modal-trigger\" data-target=\"cancelModal\">Back</button>\r\n                            <button className=\"btn right safe-btn\" onClick={() => handleSubmit()}>Submit</button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">Stay On Page</button>\r\n                            <button className=\"modal-close red white-text waves-effect waves-red btn-flat\" onClick={() => history.goBack()}>CANCEL</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React, { SFC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport { getAccessToken } from '../accessToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken(); \r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if(user.role === 'project-manager' || user.role === 'admin') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    } catch(error) {\r\n        console.log('error :>> ', error);\r\n        return false;\r\n    } \r\n}\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: SFC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route \r\n            {...rest} \r\n            render={props => \r\n                checkAuth( user ) ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PmRoute;","import AuthRoute from \"./authRoute\";\r\nimport AdminRoute from \"./adminRoute\";\r\nimport React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport { Dashboard } from \"../components/Dashboard/Dashboard\";\r\nimport { ManageRoles } from \"../components/manage/roles/Roles\";\r\nimport { ManageProjects } from \"../components/manage/projects/ManProjects\";\r\nimport { Projects } from \"../components/project/Projects\";\r\nimport { Tickets } from \"../components/tickets/Tickets\";\r\nimport { ProjectDetails } from \"../components/project/ProjectDetails\";\r\nimport { TicketDetails } from \"../components/tickets/TicketDetails\";\r\nimport { EditProject } from \"../components/project/EditProject\";\r\nimport { EditTicket } from \"../components/tickets/edit-ticket/EditTicket\";\r\nimport { AddTicketToProject } from \"../components/project/AddTicketToProject\";\r\nimport { CreateProject } from \"../components/project/create-project/CreateProject\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport PmRoute from \"./pmRoute\";\r\nimport TicketComments from \"../components/tickets/TicketComments\";\r\n\r\nexport const Routes: React.FC = () => {\r\n    const user = useSelector<State, User>(\r\n        state =>\r\n            state.user || {\r\n                id: 0,\r\n                email: \"\",\r\n                role: \"\",\r\n                username: \"\",\r\n                firstname: \"\",\r\n                lastname: \"\",\r\n            }\r\n    );\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <AdminRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-roles\"\r\n                component={ManageRoles}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-projects\"\r\n                component={ManageProjects}\r\n            />\r\n            <AuthRoute exact path=\"/projects\" component={Projects} />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/create-project\"\r\n                component={CreateProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/edit-project:id\"\r\n                component={EditProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/project-add:id\"\r\n                component={AddTicketToProject}\r\n            />\r\n            <AuthRoute path=\"/project-details:id\" component={ProjectDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketComments} />\r\n            <AuthRoute path=\"/edit-ticket:id\" component={EditTicket} />\r\n            <AuthRoute exact path=\"/tickets\" component={Tickets} />\r\n            <Route render={() => <Redirect to=\"/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { useGetUserQuery } from \"./generated/graphql\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { Register } from \"./components/auth/Register\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { UI } from \"./components/UI\";\nimport { checkAuth } from \"./clientSideAuth/checkAuth.js\";\nimport { Routes } from \"./routes/Routes\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"./redux/actions/userActions\";\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch();\n    const { data, loading, error } = useGetUserQuery();\n\n    if (loading) {\n        return (\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n            </div>\n        );\n    } else if (!error && data) {\n        const user = data.getUser;\n        if (checkAuth()) {\n            if (user) {\n                dispatch(setUserInfo(user));\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <UI children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/register\" component={Register} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import { User, Project } from \"../RootReducer\";\r\n\r\n\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: 'ADD_USER_INFO', user: user\r\n    }\r\n}\r\n\r\nexport const passProjectInfo = (project: Project) => {\r\n    return {\r\n        type: 'PASS_PROJECT_INFO', project: project\r\n    }\r\n}","import App from \"./App\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport \"./css/dashboard.scss\";\r\nimport \"./css/login.scss\";\r\nimport \"./css/manage.scss\";\r\nimport \"./css/medias.scss\";\r\nimport \"./css/nav.scss\";\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        let tmp = localStorage.getItem(\"refreshToken\") as string;\r\n\r\n        fetch(`${URI}/refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"refreshToken\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        M.AutoInit();\r\n    }, [URI]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"preloader-wrapper big active\">\r\n                ...loading\r\n                <div className=\"spinner-layer spinner-blue\">\r\n                    <div className=\"circle-clipper left\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                    <div className=\"gap-patch\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                    <div className=\"circle-clipper right\">\r\n                        <div className=\"circle\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number,\r\n    email: string,\r\n    role: string,\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport type Project = {\r\n    title: string,\r\n    description: string,\r\n    projectid: number,\r\n}\r\n\r\nexport interface State {\r\n    user?: User\r\n    project?: Project\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: '',\r\n        role: '',\r\n        username: '',\r\n        firstname: '',\r\n        lastname: '',\r\n    },\r\n\r\n    project: {\r\n        title: '',\r\n        description: '',\r\n        projectid: 0,\r\n    }\r\n}\r\n\r\n\r\ntype Actions = {\r\n    user?: any,\r\n    type: string,\r\n    project: Project,\r\n}\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch(action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return {...state, user: action.user};\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return {...state, project: action.project}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { store } from \"./redux/ReduxStore\";\nimport { Provider } from \"react-redux\";\n\nconst cache = new InMemoryCache({});\nvar URI = \"\";\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nif (process.env.NODE_ENV === \"production\") {\n    URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\n} else {\n    URI = \"http://localhost:4000\";\n}\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <AppWrapper />\n            </Provider>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","export const Sorting = () => {\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const sortByTitle = (arr: any, titleSwitch: string) => {\r\n        if (titleSwitch === \"0\") {\r\n            let titles = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                titles[i] = arr[i].title;\r\n                titles[i] = titles[i].toLowerCase();\r\n            });\r\n\r\n            titles.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].title.toLowerCase() !== titles[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = 0;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let titles = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                titles[i] = arr[i].title;\r\n                titles[i] = titles[i].toLowerCase();\r\n            });\r\n\r\n            titles.sort();\r\n            titles.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].title.toLowerCase() !== titles[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = 0;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByPriority = (arr: any, prioritySwitch: string) => {\r\n        if (prioritySwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"high\" &&\r\n                        (arr[j - 1].priority === \"medium\" ||\r\n                            arr[j - 1].priority === \"low\")) ||\r\n                        (arr[j].priority === \"medium\" &&\r\n                            arr[j - 1].priority === \"low\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (prioritySwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"medium\" &&\r\n                        (arr[j - 1].priority === \"low\" ||\r\n                            arr[j - 1].priority === \"high\")) ||\r\n                        (arr[j].priority === \"low\" &&\r\n                            arr[j - 1].priority === \"high\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (prioritySwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"low\" &&\r\n                        (arr[j - 1].priority === \"high\" ||\r\n                            arr[j - 1].priority === \"medium\")) ||\r\n                        (arr[j].priority === \"high\" &&\r\n                            arr[j - 1].priority === \"medium\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByStatus = (arr: any, toggle: string) => {\r\n        if (toggle === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"open\" &&\r\n                        (arr[j - 1].status === \"on-hold\" ||\r\n                            arr[j - 1].status === \"closed\")) ||\r\n                        (arr[j].status === \"on-hold\" &&\r\n                            arr[j - 1].status === \"closed\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (!!arr && toggle === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"on-hold\" &&\r\n                        (arr[j - 1].status === \"closed\" ||\r\n                            arr[j - 1].status === \"open\")) ||\r\n                        (arr[j].status === \"closed\" &&\r\n                            arr[j - 1].status === \"open\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (!!arr && toggle === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"closed\" &&\r\n                        (arr[j - 1].status === \"open\" ||\r\n                            arr[j - 1].status === \"on-hold\")) ||\r\n                        (arr[j].status === \"open\" &&\r\n                            arr[j - 1].status === \"on-hold\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByType = (arr: any) => {\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (\r\n                j > 0 &&\r\n                arr[j].type === \"features\" &&\r\n                arr[j - 1].type === \"bugs/errors\"\r\n            ) {\r\n                let tmp = arr.slice(j - 1, j + 1);\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    const usernameSort = (arr: any, usernameSwitch: string) => {\r\n        if (usernameSwitch === \"0\") {\r\n            let usernames = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                usernames[i] = arr[i].username;\r\n                usernames[i] = usernames[i].toLowerCase();\r\n            });\r\n\r\n            usernames.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].username.toLowerCase() !== usernames[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = 0;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else {\r\n            let usernames = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                usernames[i] = arr[i].username;\r\n                usernames[i] = usernames[i].toLowerCase();\r\n            });\r\n\r\n            usernames.sort();\r\n            usernames.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (arr[i].username.toLowerCase() !== usernames[i]) {\r\n                    let tmp = arr.slice(j, j + 2);\r\n                    tmp.reverse(); // will introduce undefined index when reversing final index\r\n                    arr[j] = tmp[0];\r\n                    arr[j + 1] = tmp[1];\r\n                    j = j + 1;\r\n\r\n                    if (j === arr.length - 1) {\r\n                        j = 0;\r\n                    }\r\n\r\n                    if (!arr[arr.length - 1]) {\r\n                        // remove undef index introduced by tmp.reverse()\r\n                        arr.pop();\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const emailSort = (arr: any, emailSwitch: string) => {\r\n        if (emailSwitch === \"0\") {\r\n            let emails = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                emails[i] = arr[i].email;\r\n                emails[i] = emails[i].toLowerCase();\r\n            });\r\n\r\n            emails.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].email) {\r\n                    while (arr[i].email.toLowerCase() !== emails[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else if (emailSwitch === \"1\") {\r\n            let emails = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                emails[i] = arr[i].email;\r\n                emails[i] = emails[i].toLowerCase();\r\n            });\r\n\r\n            emails.sort();\r\n            emails.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].email) {\r\n                    while (arr[i].email.toLowerCase() !== emails[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const roleSort = (arr: any, roleSwitch: string) => {\r\n        if (roleSwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"admin\" &&\r\n                        (arr[j - 1].role === \"project-manager\" ||\r\n                            arr[j - 1].role === \"developer\")) ||\r\n                        (arr[j].role === \"project-manager\" &&\r\n                            arr[j - 1].role === \"developer\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (roleSwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"project-manager\" &&\r\n                        (arr[j - 1].role === \"developer\" ||\r\n                            arr[j - 1].role === \"admin\")) ||\r\n                        (arr[j].role === \"developer\" &&\r\n                            arr[j - 1].role === \"admin\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (roleSwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"developer\" &&\r\n                        (arr[j - 1].role === \"admin\" ||\r\n                            arr[j - 1].role === \"project-manager\")) ||\r\n                        (arr[j].role === \"admin\" &&\r\n                            arr[j - 1].role === \"project-manager\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const firstnameSort = (arr: any, fnameSwitch) => {\r\n        if (fnameSwitch === \"0\") {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].firstname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].firstname) {\r\n                    while (arr[i].firstname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].firstname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n            names.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].firstname) {\r\n                    while (arr[i].firstname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const lastnameSort = (arr: any, lnameSwitch) => {\r\n        if (lnameSwitch === \"0\") {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].lastname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].lastname) {\r\n                    while (arr[i].lastname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return \"1\";\r\n        } else {\r\n            let names = [] as any[];\r\n            // eslint-disable-next-line\r\n            arr.map((_val, i) => {\r\n                names[i] = arr[i].lastname;\r\n                names[i] = names[i].toLowerCase();\r\n            });\r\n\r\n            names.sort();\r\n            names.reverse();\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                if (arr[i].lastname) {\r\n                    while (arr[i].lastname.toLowerCase() !== names[i]) {\r\n                        let tmp = arr.slice(j, j + 2);\r\n                        tmp.reverse(); // will introduce undefined index when reversing final index\r\n                        arr[j] = tmp[0];\r\n                        arr[j + 1] = tmp[1];\r\n                        j = j + 1;\r\n\r\n                        if (j === arr.length - 1) {\r\n                            j = 0;\r\n                        }\r\n\r\n                        if (!arr[arr.length - 1]) {\r\n                            // remove undef index introduced by tmp.reverse()\r\n                            arr.pop();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        pagination,\r\n        sortByTitle,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n        usernameSort,\r\n        roleSort,\r\n        emailSort,\r\n        firstnameSort,\r\n        lastnameSort,\r\n    };\r\n};\r\n","export const JsFooterStyling = () => {\r\n    if( window.innerWidth !== undefined ) {\r\n        if(window.innerWidth < 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.add('hide');\r\n                document!.getElementById('deleteBtn')!.classList.remove('center');\r\n                document!.getElementById('deleteBtn')!.classList.add('left');\r\n                document!.getElementById('deleteBtn')!.classList.add('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.add('btn-ex-40');\r\n            }\r\n\r\n        }\r\n        if(window.innerWidth > 1200) {\r\n            if( document!.getElementById('backBtn') ) {\r\n                document!.getElementById('backBtn')!.classList.remove('hide');\r\n                document!.getElementById('deleteBtn')!.classList.add('center');\r\n                document!.getElementById('deleteBtn')!.classList.remove('left');\r\n                document!.getElementById('deleteBtn')!.classList.remove('btn-ex-40');\r\n                document!.getElementById('submitBtn')!.classList.remove('btn-ex-40');\r\n            }\r\n        }\r\n    }\r\n}","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<ProjectData>;\n  getProjectDataById: Array<ProjectData>;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<TicketData>;\n  getTicketDataById: Array<TicketData>;\n  getUserTickets: Array<UserTicketsPlus>;\n  getTicketProject: Array<ProjectsTickets>;\n  getComments: Array<Comments>;\n  getHistory: Array<History>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type QueryGetCommentsArgs = {\n  parentid: Scalars['Float'];\n};\n\n\nexport type QueryGetHistoryArgs = {\n  parentid: Scalars['Float'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type ProjectData = {\n  __typename?: 'ProjectData';\n  projectid?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  id: Scalars['Int'];\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n};\n\nexport type TicketData = {\n  __typename?: 'TicketData';\n  ticketid: Scalars['Int'];\n  priority?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid?: Maybe<Scalars['Int']>;\n  title: Scalars['String'];\n  userid?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectsTickets = {\n  __typename?: 'ProjectsTickets';\n  id: Scalars['Int'];\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Comments = {\n  __typename?: 'Comments';\n  commentid: Scalars['Int'];\n  comment: Scalars['String'];\n  parentid: Scalars['Int'];\n  commenterid: Scalars['Int'];\n  commenter: Scalars['String'];\n  createdAt: Scalars['String'];\n};\n\nexport type History = {\n  __typename?: 'History';\n  id: Scalars['Int'];\n  parentid: Scalars['Int'];\n  propertyChanged: Scalars['String'];\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  dateChanged: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: AuthResponse;\n  register: AuthResponse;\n  logout: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  demoLogin: AuthResponse;\n  addProject: Scalars['Boolean'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n  addComment: Scalars['Boolean'];\n  deleteComment: Scalars['Boolean'];\n  updateComment: Scalars['Boolean'];\n  addTicketHistory: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  userid: Scalars['String'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsTo: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationAddCommentArgs = {\n  parentid: Scalars['Float'];\n  comment: Scalars['String'];\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationUpdateCommentArgs = {\n  updatedMessage: Scalars['String'];\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationAddTicketHistoryArgs = {\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  propertyChanged: Scalars['String'];\n  parentid: Scalars['Float'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type AddCommentMutationVariables = Exact<{\n  comment: Scalars['String'];\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type AddCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addComment'>\n);\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type AddTicketHistoryMutationVariables = Exact<{\n  parentid: Scalars['Float'];\n  propertyChanged: Scalars['String'];\n  newValue: Scalars['String'];\n  oldValue: Scalars['String'];\n}>;\n\n\nexport type AddTicketHistoryMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTicketHistory'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsTo: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n}>;\n\n\nexport type DeleteCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteComment'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type GetCommentsQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetCommentsQuery = (\n  { __typename?: 'Query' }\n  & { getComments: Array<(\n    { __typename?: 'Comments' }\n    & Pick<Comments, 'commentid' | 'comment' | 'commenter' | 'createdAt'>\n  )> }\n);\n\nexport type GetHistoryQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetHistoryQuery = (\n  { __typename?: 'Query' }\n  & { getHistory: Array<(\n    { __typename?: 'History' }\n    & Pick<History, 'id' | 'propertyChanged' | 'oldValue' | 'newValue' | 'dateChanged'>\n  )> }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: Array<(\n    { __typename?: 'ProjectData' }\n    & Pick<ProjectData, 'title' | 'projectid' | 'description'>\n  )> }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'ProjectsTickets' }\n    & Pick<ProjectsTickets, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'TicketData' }\n    & Pick<TicketData, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'title' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n  updatedMessage: Scalars['String'];\n}>;\n\n\nexport type UpdateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateComment'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddCommentDocument = gql`\n    mutation addComment($comment: String!, $parentid: Float!) {\n  addComment(comment: $comment, parentid: $parentid)\n}\n    `;\nexport type AddCommentMutationFn = ApolloReactCommon.MutationFunction<AddCommentMutation, AddCommentMutationVariables>;\n\n/**\n * __useAddCommentMutation__\n *\n * To run a mutation, you first call `useAddCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommentMutation, { data, loading, error }] = useAddCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useAddCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommentMutation, AddCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommentMutation, AddCommentMutationVariables>(AddCommentDocument, baseOptions);\n      }\nexport type AddCommentMutationHookResult = ReturnType<typeof useAddCommentMutation>;\nexport type AddCommentMutationResult = ApolloReactCommon.MutationResult<AddCommentMutation>;\nexport type AddCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommentMutation, AddCommentMutationVariables>;\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: String!, $userid: String!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const AddTicketHistoryDocument = gql`\n    mutation addTicketHistory($parentid: Float!, $propertyChanged: String!, $newValue: String!, $oldValue: String!) {\n  addTicketHistory(parentid: $parentid, propertyChanged: $propertyChanged, newValue: $newValue, oldValue: $oldValue)\n}\n    `;\nexport type AddTicketHistoryMutationFn = ApolloReactCommon.MutationFunction<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\n\n/**\n * __useAddTicketHistoryMutation__\n *\n * To run a mutation, you first call `useAddTicketHistoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTicketHistoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTicketHistoryMutation, { data, loading, error }] = useAddTicketHistoryMutation({\n *   variables: {\n *      parentid: // value for 'parentid'\n *      propertyChanged: // value for 'propertyChanged'\n *      newValue: // value for 'newValue'\n *      oldValue: // value for 'oldValue'\n *   },\n * });\n */\nexport function useAddTicketHistoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>(AddTicketHistoryDocument, baseOptions);\n      }\nexport type AddTicketHistoryMutationHookResult = ReturnType<typeof useAddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationResult = ApolloReactCommon.MutationResult<AddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsTo: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsTo: $belongsTo)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsTo: // value for 'belongsTo'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteCommentDocument = gql`\n    mutation deleteComment($commentid: Float!) {\n  deleteComment(commentid: $commentid)\n}\n    `;\nexport type DeleteCommentMutationFn = ApolloReactCommon.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;\n\n/**\n * __useDeleteCommentMutation__\n *\n * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *   },\n * });\n */\nexport function useDeleteCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, baseOptions);\n      }\nexport type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;\nexport type DeleteCommentMutationResult = ApolloReactCommon.MutationResult<DeleteCommentMutation>;\nexport type DeleteCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: String!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($userid: String!) {\n  deleteUser(userid: $userid)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetCommentsDocument = gql`\n    query getComments($parentid: Float!) {\n  getComments(parentid: $parentid) {\n    commentid\n    comment\n    commenter\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetCommentsQuery__\n *\n * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCommentsQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n      }\nexport function useGetCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n        }\nexport type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;\nexport type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;\nexport type GetCommentsQueryResult = ApolloReactCommon.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;\nexport const GetHistoryDocument = gql`\n    query getHistory($parentid: Float!) {\n  getHistory(parentid: $parentid) {\n    id\n    propertyChanged\n    oldValue\n    newValue\n    dateChanged\n  }\n}\n    `;\n\n/**\n * __useGetHistoryQuery__\n *\n * To run a query within a React component, call `useGetHistoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetHistoryQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetHistoryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n      }\nexport function useGetHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n        }\nexport type GetHistoryQueryHookResult = ReturnType<typeof useGetHistoryQuery>;\nexport type GetHistoryLazyQueryHookResult = ReturnType<typeof useGetHistoryLazyQuery>;\nexport type GetHistoryQueryResult = ApolloReactCommon.QueryResult<GetHistoryQuery, GetHistoryQueryVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($id: String!) {\n  getTicketDataById(id: $id) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    title\n    userid\n    id\n    priority\n    type\n    status\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: String!, $projectid: String!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateCommentDocument = gql`\n    mutation updateComment($commentid: Float!, $updatedMessage: String!) {\n  updateComment(commentid: $commentid, updatedMessage: $updatedMessage)\n}\n    `;\nexport type UpdateCommentMutationFn = ApolloReactCommon.MutationFunction<UpdateCommentMutation, UpdateCommentMutationVariables>;\n\n/**\n * __useUpdateCommentMutation__\n *\n * To run a mutation, you first call `useUpdateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCommentMutation, { data, loading, error }] = useUpdateCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *      updatedMessage: // value for 'updatedMessage'\n *   },\n * });\n */\nexport function useUpdateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCommentMutation, UpdateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument, baseOptions);\n      }\nexport type UpdateCommentMutationHookResult = ReturnType<typeof useUpdateCommentMutation>;\nexport type UpdateCommentMutationResult = ApolloReactCommon.MutationResult<UpdateCommentMutation>;\nexport type UpdateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCommentMutation, UpdateCommentMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;","module.exports = __webpack_public_path__ + \"static/media/unnamed.a812fbf5.webp\";","import React, { useState } from \"react\";\r\nimport { GetLocation } from \"../GetLocation\";\r\nimport M from \"materialize-css\";\r\nimport {\r\n    useAddCommentMutation,\r\n    useGetCommentsQuery,\r\n    useDeleteCommentMutation,\r\n    useUpdateCommentMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst TicketComments: React.FC = () => {\r\n    // eslint-disable-next-line\r\n    let parentid: number = eval(GetLocation());\r\n\r\n    const [ADD_COMMENT] = useAddCommentMutation();\r\n    const [DELETE_COMMENT] = useDeleteCommentMutation();\r\n    const [UPDATE_COMMENT] = useUpdateCommentMutation();\r\n    const { data, loading } = useGetCommentsQuery({ variables: { parentid } });\r\n    const [comment, setComment] = useState(\"\");\r\n    const addComment = async () => {\r\n        if (comment.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await ADD_COMMENT({\r\n                variables: {\r\n                    comment,\r\n                    parentid,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment added successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteComment = async (commentid: number) => {\r\n        if (!!commentid) {\r\n            let tmp = await DELETE_COMMENT({ variables: { commentid } });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Deleted Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n    const updateComment = async (commentid: number, updatedMessage: string) => {\r\n        if (updatedMessage.length === 0) {\r\n            M.toast({ html: \"Failed!\" });\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await UPDATE_COMMENT({\r\n                variables: {\r\n                    commentid,\r\n                    updatedMessage,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Updated Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let comments: any = data?.getComments;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h2 className=\"white-text noselect\">\r\n                            Comments for Ticket #{parentid}\r\n                        </h2>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Commenter</th>\r\n                                    <th>Comment</th>\r\n                                    <th className=\"nonessen\">Created At</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n\r\n                                {comments.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].commenter}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {comments[i].comment}\r\n                                            </td>\r\n                                            <td className=\"capitalize nonessen\">\r\n                                                {comments[i].createdAt}\r\n                                            </td>\r\n                                            <td>\r\n                                                <i\r\n                                                    className=\"material-icons red-text\"\r\n                                                    onClick={() =>\r\n                                                        deleteComment(\r\n                                                            comments[i]\r\n                                                                .commentid\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    delete\r\n                                                </i>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"comment\"\r\n                                    type=\"text\"\r\n                                    value={comment}\r\n                                    onChange={e => setComment(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"comment\">Add A Comment</label>\r\n                                <button\r\n                                    className=\"btn btn-ex safe-btn center footerBtn\"\r\n                                    onClick={() => addComment()}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketComments;\r\n"],"sourceRoot":""}