{"version":3,"sources":["components/manage/roles/Roles.tsx","components/manage/roles/RoleMethods.ts","components/tickets/Tickets.tsx","components/tickets/FilteredTickets.tsx","accessToken.ts","components/auth/Login.tsx","components/auth/LoginMethods.ts","components/auth/Register.tsx","components/auth/RegisterMethods.ts","components/Sidenav.tsx","components/PageLoader.tsx","components/MobileSideNav.tsx","components/UI.tsx","checkAuth.ts","routes/authRoute.tsx","routes/adminRoute.tsx","components/Dashboard/DashboardFAB.tsx","components/Dashboard/Indicators.ts","components/Dashboard/DashboardTabsMethods.ts","components/Dashboard/useGetUserTickets.ts","components/Dashboard/useGetTickets.ts","components/Dashboard/DashboardTabs.tsx","components/Dashboard/Dashboard.tsx","components/manage/projects/ManProjects.tsx","components/project/DetailsSubCom.tsx","components/project/Projects.tsx","components/GetLocationId.ts","components/QueryHooks/useGetProjectTickets.ts","components/QueryHooks/useGetProjectUsers.ts","components/project/ProjectDetails.tsx","components/tickets/TicketComments.tsx","components/tickets/TicketHistory.tsx","components/QueryHooks/useGetColumns.ts","components/QueryHooks/useGetTicketTags.ts","components/tickets/TicketDetails.tsx","components/project/edit-project/CheckIfInProject.ts","components/project/edit-project/UserSelect.tsx","components/project/edit-project/EditAssigned.tsx","components/project/edit-project/EditPTTable.tsx","css/JsStyling.ts","components/project/edit-project/EditProject.tsx","components/QueryHooks/useGetUsers.ts","components/QueryHooks/useGetTags.ts","components/tickets/edit-ticket/EditTicket.tsx","components/QueryHooks/useGetProjects.ts","components/tickets/edit-ticket/EditTicketMethods.ts","components/project/AddTicketToProject.tsx","components/project/create-project/CreateProject.tsx","components/project/create-project/CreateProjectMethods.ts","routes/pmRoute.tsx","components/Notifications.tsx","routes/Routes.tsx","App.tsx","redux/actions/userActions.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx","setNavActives.ts","components/Sorting.ts","generated/graphql.tsx"],"names":["ManageRoles","useGetUsersQuery","data","loading","error","user","useSelector","state","useState","paginationLower","paginationUpper","rows","localStorage","getItem","roleSwitch","emailSwitch","usernameSwitch","fnameSwitch","lnameSwitch","setState","RoleMethods","deleteUser","pagination","setRole","useEffect","elems","document","querySelectorAll","M","Sidenav","init","setNavActives","className","to","Sorting","sortByProp","roleSort","pages","eval","getUsers","length","pagesArr","i","push","onClick","map","_val","key","username","email","onChange","e","value","disabled","selected","role","firstname","lastname","name","id","type","setItem","target","match","toast","html","useUpdateRoleMutation","updateRole","useDeleteUserMutation","DELETEUSER","useAddNotificationMutation","sendNotification","a","JSON","parse","variables","setTimeout","window","location","reload","els","getElementsByClassName","el","classList","remove","getElementById","add","message","userId","Tickets","useGetUserTicketsQuery","arr","toggle","toggle2","titleSwitch","chips","y","UserTickets","j","tags","tagColor","includes","style","color","backgroundColor","split","shift","sortTicketsByPriority","sortTicketsByStatus","sortTicketsByType","getUserTickets","title","priority","status","href","tagName","ticketid","FilteredTickets","useGetTicketsByTagQuery","getTicketsByTag","toLowerCase","accessToken","setAccessToken","s","getAccessToken","Login","setEmail","password","setPassword","submitForm","useLoginMutation","login","useDemoLoginMutation","demoLogin","URI","preventDefault","console","log","response2","refreshToken","err","fetch","method","credentials","then","res","LoginMethods","Dropdown","htmlFor","data-error","data-target","Register","history","setUsername","setFirstname","setLastname","useRegisterMutation","register","RegisterMethods","N","useAddPpHrefMutation","AddPpHref","Tooltip","position","onDrop","file","form","FormData","append","t","Date","now","Axios","post","headers","ppHref","secure_url","catch","getRootProps","getInputProps","src","alt","data-position","data-tooltip","PageLoader","MobileSideNav","useGetUserNotificationsQuery","logout","unread","getUserNotifications","forEach","read","UI","children","checkAuth","token","exp","jwtDecode","AuthRoute","Component","component","rest","render","props","AdminRoute","DashboardFAB","chart","setChart","FloatingActionButton","hoverEnabled","backgroundImage","temp","Cards","t1","concat","tmp","names","Math","floor","random","AddCard","changeIndicatorC","changeIndicatorT","subt","subt2","DashboardTabsMethods","forceUpdate","LStitle","LSdata","userTickets","useGetUserTickets","tickets","useGetTicketsQuery","getTickets","useGetTickets","getCircularReplacer","seen","WeakSet","_key","has","myTicketsByT","be","f","val","labels","datasets","label","borderWidth","stringify","myTicketsByP","h","m","l","myTicketsByS","o","c","TicketsByP","TicketsByS","TicketsByT","DashboardTabs","setChartType","Dashboard","setValue","LSname","LSchart","AutoInit","splice","toString","options","responsive","ManageProjects","useGetProjectDataQuery","getProjectData","projectId","projectid","description","DetailsSubCom","useGetProjectDataByIdQuery","project","getProjectDataById","keyprop","Projects","useGetUserProjectsQuery","getUserProjects","GetLocationId","useGetProjectTickets","useGetProjectTicketsQuery","getProjectTickets","useGetProjectUsers","useGetProjectUsersByIdQuery","getProjectUsersById","ProjectDetails","AssignedUsers","submitterSwitch","developerSwitch","submitter","developer","goBack","TicketComments","parentid","useGetCommentsQuery","comment","setComment","useAddCommentMutation","ADD_COMMENT","useDeleteCommentMutation","DELETE_COMMENT","useSendNot_CreateCommentMutation","SEND_NOTIFICATION","addComment","deleteComment","commentid","comments","getComments","commenterPp","commenter","createdAt","TicketHistory","useGetHistoryQuery","getHistory","propertyChanged","oldValue","newValue","dateChanged","useGetColumns","columnParentId","useGetColumnsByParentIdQuery","getColumnsByParentId","useGetTicketTags","useGetTicketsTagsQuery","getTicketsTags","TicketDetails","Columns","TicketTags","useGetTicketDataByIdQuery","Chips","mappedColumns","columnName","columnData","ticket","getTicketDataById","belongsto","CheckIfInProject","projectUsers","users","x","USERS","useAddProjectUserMutation","addUser","useRemoveProjectUserMutation","removeUser","FormSelect","modPersonnel","userid","hidden","EditAssigned","EditPTTable","JsFooterStyling","doc","undefined","innerWidth","EditProject","pTitle","pDesc","useSetProjectDescMutation","setDesc","useSetProjectTitleMutation","setTitle","useDeleteProjectMutation","delProj","Modal","onresize","updateProject","pathname","deleteProject","projects","useGetUsers","useGetTags","useGetTagsQuery","getTags","EditTicket","useGetProjects","Users","Tags","relationIds","newTags","parentTitle","assignedTo","new","columns","columnIds","newColumnTitle","newColumnData","useHistory","useSetTicketStatusMutation","setStatus","useSetTicketTypeMutation","setType","useSetTicketTitleMutation","useSetTicketDescMutation","useSetTicketPriorityMutation","setPriority","useSetTicketProjectMutation","SetTicketProject","useDeleteTicketMutation","DeleteThisTicket","useAddTicketHistoryMutation","addHistory","useSetTicketDeveloperMutation","setDeveloper","useSendNotificationByUsernameMutation","useCreateColumnMutation","createColumn","useUpdateColumnsMutation","updateColumns","useDeleteTagFromTicketMutation","REMOVE_TAG","useCreateTagMutation","CREATE_TAG","updateTicket","updated","updated2","desc","newValues","relationId","deleteTicket","EditTicketMethods","onChipDeleteCB","_e","index","innerHTML","slice","indexOf","onChipAddCB","autoCompleteData","initialChips","tag","autocompleteOptions","onChipDelete","onChipAdd","columnId","tagsTmp","search","AddTicketToProject","UsersArray","dev","useCreateTicketMutation","Submit","useSendNot_CreateTicketMutation","SendNotification","addHide","elms","toggleHide","handleSubmit","CreateProject","userids","usernames","userString","useAddProjectMutation","SUBMIT","replace","addProject","tmp2","q","q2","tmp3","CreateProjectMethods","PmRoute","Notifications","useSetReadMutation","SET_READ","useDeleteNotificationMutation","DELETE_NOTIFICATION","useDeleteUsersNotMutation","deleteUsersNot","useSetAllUsersNotToReadMutation","setAllUsersNotToRead","UserNotifications","current","ids","notificationId","Routes","useLocation","exact","path","App","dispatch","useDispatch","useGetUserQuery","getUser","setUserInfo","AppWrapper","setLoading","json","initState","store","createStore","action","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","StrictMode","rmvActives","addActives","loc","prop","invert","sort","reverse","pop","prioritySwitch","AddCommentDocument","gql","baseOptions","ApolloReactHooks","AddNotificationDocument","AddPpHrefDocument","AddProjectDocument","AddProjectUserDocument","AddTicketHistoryDocument","CreateColumnDocument","CreateTagDocument","CreateTicketDocument","DeleteCommentDocument","DeleteNotificationDocument","DeleteProjectDocument","DeleteTagFromTicketDocument","DeleteTicketDocument","DeleteUserDocument","DeleteUsersNotDocument","DemoLoginDocument","GetColumnsByParentIdDocument","GetCommentsDocument","GetHistoryDocument","GetProjectDataDocument","GetProjectDataByIdDocument","GetProjectUsersByIdDocument","GetTagsDocument","GetTicketDataByIdDocument","GetTicketsDocument","GetTicketsByTagDocument","GetTicketsTagsDocument","GetUserDocument","GetUserNotificationsDocument","GetUserProjectsDocument","GetUserTicketsDocument","LoginDocument","GetProjectTicketsDocument","RegisterDocument","RemoveProjectUserDocument","SendNot_CreateCommentDocument","SendNot_CreateTicketDocument","SendNotificationByUsernameDocument","SetAllUsersNotToReadDocument","SetProjectDescDocument","SetProjectTitleDocument","SetReadDocument","SetTicketDescDocument","SetTicketDeveloperDocument","SetTicketPriorityDocument","SetTicketProjectDocument","SetTicketStatusDocument","SetTicketTitleDocument","SetTicketTypeDocument","UpdateColumnsDocument","UpdateRoleDocument","GetUsersDocument"],"mappings":"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","file":"static/js/main.7dd648d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery } from \"../../../generated/graphql\";\r\nimport { RoleMethods } from \"./RoleMethods\";\r\nimport { Sorting } from \"../../Sorting\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../../setNavActives\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport const ManageRoles: React.FC = () => {\r\n    const { data, loading, error } = useGetUsersQuery();\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    const [state, setState] = useState({\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: localStorage.getItem(\"rolesRows\") || \"2\",\r\n        roleSwitch: \"0\",\r\n        emailSwitch: false,\r\n        usernameSwitch: false,\r\n        fnameSwitch: false,\r\n        lnameSwitch: false,\r\n    });\r\n\r\n    const { deleteUser, pagination, setRole } = RoleMethods();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    const { sortByProp, roleSort } = Sorting();\r\n\r\n    let pages;\r\n    if (state.rows !== \"\") {\r\n        // eslint-disable-next-line\r\n        pages = eval(`(${data.getUsers!.length}/${state.rows}) - 1`);\r\n    }\r\n\r\n    let pagesArr = [] as number[];\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper table-mb\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text\">Manage Roles</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    UserName\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let usernameSwitch = sortByProp(\r\n                                                data.getUsers,\r\n                                                \"username\",\r\n                                                state.usernameSwitch\r\n                                            );\r\n                                            setState({\r\n                                                ...state,\r\n                                                usernameSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Email\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let emailSwitch = sortByProp(\r\n                                                data.getUsers,\r\n                                                \"email\",\r\n                                                state.emailSwitch\r\n                                            );\r\n                                            setState({ ...state, emailSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Role\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let roleSwitch: string =\r\n                                                roleSort(\r\n                                                    data.getUsers,\r\n                                                    state.roleSwitch\r\n                                                ) || \"0\";\r\n                                            setState({\r\n                                                ...state,\r\n                                                roleSwitch,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    First Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let fnameSwitch = sortByProp(\r\n                                                data.getUsers,\r\n                                                \"firstname\",\r\n                                                state.fnameSwitch\r\n                                            );\r\n                                            setState({ ...state, fnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Last Name\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let lnameSwitch = sortByProp(\r\n                                                data.getUsers,\r\n                                                \"lastname\",\r\n                                                state.lnameSwitch\r\n                                            );\r\n                                            setState({ ...state, lnameSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {data!.getUsers!.map(\r\n                                (_val, i: number, getUsers): JSX.Element => {\r\n                                    if (state.rows === \"\") {\r\n                                        return <></>;\r\n                                    } else if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {!!getUsers![i].username\r\n                                                        ? getUsers![i].username\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {!!getUsers![i].email\r\n                                                        ? getUsers![i].email\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <div className=\"input-field col s12\">\r\n                                                        <select\r\n                                                            className=\"browser-default capitalize\"\r\n                                                            onChange={e =>\r\n                                                                setRole(\r\n                                                                    e,\r\n                                                                    i,\r\n                                                                    data\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <option\r\n                                                                value=\"\"\r\n                                                                className=\"capitalize\"\r\n                                                                disabled\r\n                                                                selected\r\n                                                            >\r\n                                                                {\r\n                                                                    getUsers![i]\r\n                                                                        .role\r\n                                                                }\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`admin`}\r\n                                                            >\r\n                                                                Admin\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`developer`}\r\n                                                            >\r\n                                                                Developer\r\n                                                            </option>\r\n                                                            <option\r\n                                                                value={`project-manager`}\r\n                                                            >\r\n                                                                Project-manager\r\n                                                            </option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {getUsers![i].firstname}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {getUsers![i].lastname}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <button\r\n                                                        name={`${\r\n                                                            getUsers![i].id\r\n                                                        }`}\r\n                                                        onClick={e => {\r\n                                                            deleteUser(e);\r\n                                                        }}\r\n                                                        className=\"btn red\"\r\n                                                    >\r\n                                                        Delete\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return <></>;\r\n                                    }\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Show\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"text\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            localStorage.setItem(\"rolesRows\", e.target.value);\r\n                            let tmp = e.target.value.match(/\\D/g) || [];\r\n                            if (tmp.length !== 0) {\r\n                                M.toast({\r\n                                    html: \"Only numbers are accepted\",\r\n                                });\r\n                            } else if (e.target.value === \"0\") {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"Only numbers greater than 0 are accepted\",\r\n                                });\r\n                            } else {\r\n                                setState({\r\n                                    ...state,\r\n                                    rows: e.target.value,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    entries\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`1li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map(\r\n                            (_val, i): JSX.Element => {\r\n                                return (\r\n                                    <li key={i + 2} id={`${i + 2}li`}>\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a\r\n                                            id={`${i + 2}`}\r\n                                            onClick={e => {\r\n                                                let id: string = pagination(e);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    // eslint-disable-next-line\r\n                                                    paginationLower: eval(\r\n                                                        `${id} - 1`\r\n                                                    ),\r\n                                                    paginationUpper: id,\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            {i + 2}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    useAddNotificationMutation,\r\n    useDeleteUserMutation,\r\n    useUpdateRoleMutation,\r\n} from \"../../../generated/graphql\";\r\n\r\nexport const RoleMethods = () => {\r\n    const [updateRole] = useUpdateRoleMutation();\r\n    const [DELETEUSER] = useDeleteUserMutation();\r\n    const [sendNotification] = useAddNotificationMutation();\r\n\r\n    const deleteUser = async (e: React.SyntheticEvent) => {\r\n        let target = e.target as HTMLButtonElement;\r\n        let id: number = JSON.parse(target.name);\r\n        try {\r\n            await DELETEUSER({\r\n                variables: {\r\n                    id,\r\n                },\r\n            });\r\n            M.toast({ html: \"Successfully deleted User\" });\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 500);\r\n        } catch (error) {\r\n            M.toast({ html: \"Error occurred while deleting user\" });\r\n            M.toast({ html: `Err :>> ${error}` });\r\n        }\r\n    };\r\n\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const setRole = async (e: React.SyntheticEvent, i: number, data: any) => {\r\n        let target = e.target as any;\r\n        let role = target.value;\r\n        let id = `${data.getUsers![i].id}`;\r\n\r\n        if (!!id || !!role) {\r\n            try {\r\n                await updateRole({\r\n                    variables: {\r\n                        role,\r\n                        id,\r\n                    },\r\n                });\r\n\r\n                await sendNotification({\r\n                    variables: {\r\n                        message: `Your role has been changed from ${data.getUsers[i].role} to ${role}`,\r\n                        userId: id,\r\n                    },\r\n                });\r\n\r\n                M.toast({\r\n                    html: `Successfully updated ${data.getUsers[i].username}'s role to ${role}`,\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } catch (error) {\r\n                M.toast({ html: \"Error occurred while setting role\" });\r\n                M.toast({ html: `Err :>> ${error}` });\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        deleteUser,\r\n        pagination,\r\n        setRole,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\nexport const Tickets: React.FC = () => {\r\n    const { data, loading, error } = useGetUserTicketsQuery();\r\n    const user = useSelector<State, User>(state => state.user!);\r\n    const [state, setState] = useState({\r\n        arr: [] as any,\r\n        toggle: \"0\",\r\n        toggle2: \"0\",\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: localStorage.getItem(\"ticketsRows\") || \"4\",\r\n        titleSwitch: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n        let chips: any = document.getElementsByClassName(\"chip\");\r\n        if (!!chips[0]) {\r\n            let y = 0;\r\n            for (let i = 0; i < UserTickets.length; i++) {\r\n                for (let j = 0; j < UserTickets[i].tags.length; j++) {\r\n                    if (UserTickets[i].tags[j].tagColor.includes(\"$WT\")) {\r\n                        if (chips[y]) {\r\n                            chips[y].style.color = \"#fff\";\r\n                            chips[y].style.backgroundColor = UserTickets[\r\n                                i\r\n                            ].tags[j].tagColor\r\n                                .split(\"$\")\r\n                                .shift();\r\n                        }\r\n                    } else {\r\n                        if (chips[y]) {\r\n                            chips[y].style.backgroundColor =\r\n                                UserTickets[i].tags[j].tagColor;\r\n                        }\r\n                    }\r\n                    y++;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    const {\r\n        pagination,\r\n        sortByProp,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n    } = Sorting();\r\n\r\n    let pages,\r\n        pagesArr = [] as number[],\r\n        UserTickets: any = data.getUserTickets;\r\n\r\n    if (state.rows !== \"\") {\r\n        // eslint-disable-next-line\r\n        pages = eval(`(${UserTickets.length}/${state.rows}) - 1`);\r\n    }\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text\">Your Tickets</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Project Title\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let titleSwitch = sortByProp(\r\n                                                UserTickets,\r\n                                                \"title\",\r\n                                                state.titleSwitch\r\n                                            );\r\n                                            setState({ ...state, titleSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Priority\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle2: string =\r\n                                                sortTicketsByPriority(\r\n                                                    UserTickets,\r\n                                                    state.toggle2\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle2 });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Ticket Status\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle: string =\r\n                                                sortTicketsByStatus(\r\n                                                    UserTickets,\r\n                                                    state.toggle\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Type\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let arr: typeof UserTickets = sortTicketsByType(\r\n                                                UserTickets\r\n                                            );\r\n                                            setState({ ...state, arr });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {UserTickets.map(\r\n                                (_val, i): JSX.Element => {\r\n                                    if (state.rows === \"\") {\r\n                                        return <></>;\r\n                                    } else if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {UserTickets[i].title}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {UserTickets[i].priority}\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {UserTickets[i].status}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {UserTickets[i].type}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {UserTickets[i].tags.map(\r\n                                                        (_val, j) => {\r\n                                                            return (\r\n                                                                <a\r\n                                                                    href={`#/filter-tickets:${UserTickets[i].tags[j].tagName}`}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        className=\"chip\"\r\n                                                                        key={i}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            UserTickets[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tags[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .tagName\r\n                                                                        }{\" \"}\r\n                                                                    </div>\r\n                                                                </a>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </td>\r\n                                                <td className=\"noselect capitalize\">\r\n                                                    <a\r\n                                                        href={`#/ticket-details:${UserTickets[i].ticketid}`}\r\n                                                    >\r\n                                                        Details\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return <></>;\r\n                                    }\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Show\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"text\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            localStorage.setItem(\"ticketsRows\", e.target.value);\r\n                            let tmp = e.target.value.match(/\\D/g) || [];\r\n                            if (tmp.length !== 0) {\r\n                                M.toast({\r\n                                    html: \"Only numbers are accepted\",\r\n                                });\r\n                            } else if (e.target.value === \"0\") {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"Only numbers greater than 0 are accepted\",\r\n                                });\r\n                            } else {\r\n                                setState({\r\n                                    ...state,\r\n                                    rows: e.target.value,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    entries\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`${1}li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map(\r\n                            (_val, i): JSX.Element => {\r\n                                return (\r\n                                    <li key={i + 2} id={`${i + 2}li`}>\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a\r\n                                            id={`${i + 2}`}\r\n                                            onClick={e => {\r\n                                                let id: string = pagination(e);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    // eslint-disable-next-line\r\n                                                    paginationLower: eval(\r\n                                                        `${id} - 1`\r\n                                                    ),\r\n                                                    paginationUpper: id,\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            {i + 2}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetTicketsByTagQuery } from \"../../generated/graphql\";\r\nimport { Sorting } from \"../Sorting\";\r\n\r\nconst FilteredTickets = () => {\r\n    let tagName = window.location.href.split(\":\")[3];\r\n    const { data, loading, error } = useGetTicketsByTagQuery({\r\n        variables: {\r\n            tagName,\r\n        },\r\n    });\r\n\r\n    const [state, setState] = useState({\r\n        arr: [] as any,\r\n        toggle: \"0\",\r\n        toggle2: \"0\",\r\n        paginationLower: \"0\",\r\n        paginationUpper: \"1\",\r\n        rows: localStorage.getItem(\"fticketsRows\") || \"4\",\r\n        titleSwitch: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        let chips: any = document.getElementsByClassName(\"chip\");\r\n        if (!!chips[0]) {\r\n            let y = 0;\r\n            for (let i = 0; i < UserTickets.length; i++) {\r\n                for (let j = 0; j < UserTickets[i].tags.length; j++) {\r\n                    if (UserTickets[i].tags[j].tagColor.includes(\"$WT\")) {\r\n                        if (chips[y]) {\r\n                            chips[y].style.color = \"#fff\";\r\n                            chips[y].style.backgroundColor = UserTickets[\r\n                                i\r\n                            ].tags[j].tagColor\r\n                                .split(\"$\")\r\n                                .shift();\r\n                        }\r\n                    } else {\r\n                        if (chips[y]) {\r\n                            chips[y].style.backgroundColor =\r\n                                UserTickets[i].tags[j].tagColor;\r\n                        }\r\n                    }\r\n                    y++;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    const {\r\n        pagination,\r\n        sortByProp,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n    } = Sorting();\r\n\r\n    let pages,\r\n        pagesArr = [] as number[],\r\n        UserTickets: any = data.getTicketsByTag;\r\n\r\n    if (state.rows !== \"\") {\r\n        // eslint-disable-next-line\r\n        pages = eval(`(${UserTickets.length}/${state.rows}) - 1`);\r\n    }\r\n    for (let i = 0; i < pages; i++) {\r\n        pagesArr.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text capitalize\">\r\n                        Your Tickets with Tag: {tagName.toLowerCase()}\r\n                    </h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Project Title\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let titleSwitch = sortByProp(\r\n                                                UserTickets,\r\n                                                \"title\",\r\n                                                state.titleSwitch\r\n                                            );\r\n                                            setState({ ...state, titleSwitch });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Priority\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle2: string =\r\n                                                sortTicketsByPriority(\r\n                                                    UserTickets,\r\n                                                    state.toggle2\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle2 });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th>\r\n                                    Ticket Status\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let toggle: string =\r\n                                                sortTicketsByStatus(\r\n                                                    UserTickets,\r\n                                                    state.toggle\r\n                                                ) || \"0\";\r\n                                            setState({ ...state, toggle });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    Ticket Type\r\n                                    <i\r\n                                        className=\"material-icons noselect\"\r\n                                        onClick={() => {\r\n                                            let arr: typeof UserTickets = sortTicketsByType(\r\n                                                UserTickets\r\n                                            );\r\n                                            setState({ ...state, arr });\r\n                                        }}\r\n                                    >\r\n                                        swap_vert\r\n                                    </i>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {UserTickets.map(\r\n                                (_val, i): JSX.Element => {\r\n                                    if (state.rows === \"\") {\r\n                                        return <></>;\r\n                                    } else if (\r\n                                        i >=\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationLower}*${state.rows}`\r\n                                            ) &&\r\n                                        i <\r\n                                            // eslint-disable-next-line\r\n                                            eval(\r\n                                                `${state.paginationUpper}*${state.rows}`\r\n                                            )\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {UserTickets[i].title}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {UserTickets[i].priority}\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {UserTickets[i].status}\r\n                                                </td>\r\n                                                <td className=\"nonessen capitalize\">\r\n                                                    {UserTickets[i].type}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {UserTickets[i].tags.map(\r\n                                                        (_val, j) => {\r\n                                                            return (\r\n                                                                <a\r\n                                                                    href={`#/filter-tickets:${UserTickets[i].tags[j].tagName}`}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        className=\"chip capitalize\"\r\n                                                                        key={i}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            UserTickets[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .tags[\r\n                                                                                j\r\n                                                                            ]\r\n                                                                                .tagName\r\n                                                                        }{\" \"}\r\n                                                                    </div>\r\n                                                                </a>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </td>\r\n                                                <td className=\"noselect capitalize\">\r\n                                                    <a\r\n                                                        href={`#/ticket-details:${UserTickets[i].ticketid}`}\r\n                                                    >\r\n                                                        Details\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    } else {\r\n                                        return <></>;\r\n                                    }\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    Show\r\n                    <input\r\n                        className=\"browser-default pagination-input\"\r\n                        id=\"email_inline\"\r\n                        type=\"text\"\r\n                        value={state.rows}\r\n                        onChange={e => {\r\n                            localStorage.setItem(\r\n                                \"fticketsRows\",\r\n                                e.target.value\r\n                            );\r\n                            let tmp = e.target.value.match(/\\D/g) || [];\r\n                            if (tmp.length !== 0) {\r\n                                M.toast({\r\n                                    html: \"Only numbers are accepted\",\r\n                                });\r\n                            } else if (e.target.value === \"0\") {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"Only numbers greater than 0 are accepted\",\r\n                                });\r\n                            } else {\r\n                                setState({\r\n                                    ...state,\r\n                                    rows: e.target.value,\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    entries\r\n                    <ul className=\"pagination noselect\">\r\n                        <li key={1} className=\"active pag-active\" id={`${1}li`}>\r\n                            {/* eslint-disable-next-line */}\r\n                            <a\r\n                                id={`1`}\r\n                                onClick={e => {\r\n                                    let id: string = pagination(e);\r\n                                    setState({\r\n                                        ...state,\r\n                                        // eslint-disable-next-line\r\n                                        paginationLower: eval(`${id} - 1`),\r\n                                        paginationUpper: id,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {1}\r\n                            </a>\r\n                        </li>\r\n                        {pagesArr.map(\r\n                            (_val, i): JSX.Element => {\r\n                                return (\r\n                                    <li key={i + 2} id={`${i + 2}li`}>\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a\r\n                                            id={`${i + 2}`}\r\n                                            onClick={e => {\r\n                                                let id: string = pagination(e);\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    // eslint-disable-next-line\r\n                                                    paginationLower: eval(\r\n                                                        `${id} - 1`\r\n                                                    ),\r\n                                                    paginationUpper: id,\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            {i + 2}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilteredTickets;\r\n","export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport { LoginMethods } from \"./LoginMethods\";\r\n\r\nexport const Login: React.FC = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const { submitForm } = LoginMethods(email, password);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"login-header z-depth-2\">\r\n                        <h2 className=\"white-text\">Login</h2>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                    onClick={e => submitForm(e)}\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </a>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"dd\")!\r\n                                        .classList.remove(\"hide\");\r\n                                }}\r\n                            >\r\n                                Demo User\r\n                            </button>\r\n                            <span\r\n                                className=\"dropdown-trigger btn stretched manage-dropdown hide\"\r\n                                id=\"dd\"\r\n                                data-target=\"dropdownRole\"\r\n                            >\r\n                                Role\r\n                            </span>\r\n                            <ul id=\"dropdownRole\" className=\"dropdown-content\">\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={async e => {\r\n                                            submitForm(e, \"admin\");\r\n                                        }}\r\n                                    >\r\n                                        Admin\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            submitForm(e, \"project-manager\");\r\n                                        }}\r\n                                    >\r\n                                        Project Manager\r\n                                    </button>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <button\r\n                                        className=\"btnDropdown\"\r\n                                        onClick={e => {\r\n                                            submitForm(e, \"developer\");\r\n                                        }}\r\n                                    >\r\n                                        Developer\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <span className=\"centered\">\r\n                                <div>\r\n                                    <u>\r\n                                        <a href=\"#/register\">Sign Up Here</a>\r\n                                    </u>\r\n                                </div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { setAccessToken } from \"../../accessToken\";\r\nimport {\r\n    useLoginMutation,\r\n    useDemoLoginMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nexport const LoginMethods = (email: string, password: string) => {\r\n    const [login] = useLoginMutation();\r\n    const [demoLogin] = useDemoLoginMutation();\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    const submitForm = async (e?: React.SyntheticEvent, role?: string) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        if (!!role) {\r\n            try {\r\n                await demoLogin({\r\n                    variables: {\r\n                        role,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                console.log(\"Could not set Role Err :>> \", err);\r\n            }\r\n\r\n            try {\r\n                const response2 = await login({\r\n                    variables: {\r\n                        email: \"demo@demo.com\",\r\n                        password: \"demoPassword\",\r\n                    },\r\n                });\r\n\r\n                try {\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.login.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.login.refreshToken\r\n                        );\r\n                    }\r\n                } catch (err) {\r\n                    console.log(\"Could not set tokens ERR :>> \", err);\r\n                }\r\n                window.location.reload();\r\n            } catch (err) {\r\n                M.toast({ html: \"Failed Login\" });\r\n                M.toast({ html: \"Server is likely down\" });\r\n            }\r\n        } else {\r\n            try {\r\n                if (email.length > 1 && password.length > 1) {\r\n                    await fetch(`${URI}/check-refresh-token`, {\r\n                        method: \"POST\",\r\n                        credentials: \"include\",\r\n                    }).then(async res => {\r\n                        if (res.status === 499) {\r\n                            const response2 = await login({\r\n                                variables: {\r\n                                    email: email,\r\n                                    password: password,\r\n                                },\r\n                            });\r\n\r\n                            if (response2 && response2.data) {\r\n                                setAccessToken(\r\n                                    response2.data.login.accessToken\r\n                                );\r\n                                localStorage.setItem(\r\n                                    \"refreshToken\",\r\n                                    response2.data.login.refreshToken\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n                    window.location.reload();\r\n                } else if (password.length < 1 && email.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                    document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n                } else if (password.length < 1) {\r\n                    document\r\n                        .getElementById(\"password\")!\r\n                        .classList.add(\"invalid\");\r\n                }\r\n            } catch (error) {\r\n                console.log(\"error :>> \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        submitForm,\r\n    };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { RegisterMethods } from \"./RegisterMethods\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    const submitForm = RegisterMethods(history);\r\n\r\n    return (\r\n        <div className=\"loginPageWrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text\">Sign Up</h3>\r\n                    </span>\r\n\r\n                    <div className=\"table-body z-depth-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className=\"validate\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a valid email\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a password\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"username\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={username}\r\n                                    onChange={e => setUsername(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a username\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input field col s6 m6 l6 xl6\">\r\n                                <span\r\n                                    className=\"dropdown-trigger btn manage-dropdown\"\r\n                                    id=\"roleDD\"\r\n                                    data-target=\"dropdownRole\"\r\n                                >\r\n                                    Role\r\n                                </span>\r\n                                <ul\r\n                                    id=\"dropdownRole\"\r\n                                    className=\"dropdown-content\"\r\n                                >\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"admin\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Admin\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"developer\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Developer\r\n                                        </button>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"btnDropdown\"\r\n                                            name=\"project-manager\"\r\n                                            onClick={(\r\n                                                e: React.SyntheticEvent\r\n                                            ) => {\r\n                                                let target = e.target as HTMLButtonElement;\r\n                                                let N = target.name;\r\n                                                setRole(N);\r\n                                            }}\r\n                                        >\r\n                                            Project Manager\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"firstname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={firstname}\r\n                                    onChange={e => setFirstname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"firstname\">First Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your first name\"\r\n                                ></span>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s6 m6 l6 xl6\">\r\n                                <input\r\n                                    id=\"lastname\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastname(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"lastname\">Last Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter your last name \"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <span className=\"buttons\">\r\n                            <button\r\n                                className=\"btn stretched mb authAction\"\r\n                                onClick={e =>\r\n                                    submitForm(\r\n                                        email,\r\n                                        password,\r\n                                        username,\r\n                                        role,\r\n                                        firstname,\r\n                                        lastname,\r\n                                        URI\r\n                                    )\r\n                                }\r\n                            >\r\n                                Register\r\n                            </button>\r\n                            <span className=\"centered mb\">\r\n                                <span>OR</span>\r\n                            </span>\r\n                            <a href=\"#/login\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn stretched mb authAction\"\r\n                                >\r\n                                    Login Here\r\n                                </button>\r\n                            </a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { setAccessToken } from \"../../accessToken\";\r\nimport { useRegisterMutation } from \"../../generated/graphql\";\r\n\r\nexport const RegisterMethods = history => {\r\n    const [register] = useRegisterMutation();\r\n\r\n    const submitForm = async (\r\n        email: string,\r\n        password: string,\r\n        username: string,\r\n        role: string,\r\n        firstname: string,\r\n        lastname: string,\r\n        URI: string\r\n    ) => {\r\n        if (\r\n            email.length > 1 &&\r\n            password.length > 1 &&\r\n            username.length > 1 &&\r\n            firstname.length > 1 &&\r\n            lastname.length > 1\r\n        ) {\r\n            await fetch(`${URI}/check-refresh-token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n            }).then(async res => {\r\n                if (res.status === 499) {\r\n                    const response2 = await register({\r\n                        variables: {\r\n                            email,\r\n                            password,\r\n                            username,\r\n                            role,\r\n                            firstname,\r\n                            lastname,\r\n                        },\r\n                    });\r\n\r\n                    if (response2 && response2.data) {\r\n                        setAccessToken(response2.data.register.accessToken);\r\n                        localStorage.setItem(\r\n                            \"refreshToken\",\r\n                            response2.data.register.refreshToken\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            history.push(\"/\");\r\n            window.location.reload();\r\n        } else {\r\n            if (email.length < 1) {\r\n                document.getElementById(\"email\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (password.length < 1) {\r\n                document.getElementById(\"password\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (username.length < 1) {\r\n                document.getElementById(\"username\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (firstname.length < 1) {\r\n                document.getElementById(\"firstname\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (lastname.length < 1) {\r\n                document.getElementById(\"lastname\")!.classList.add(\"invalid\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return submitForm;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport { setNavActives } from \"../setNavActives\";\r\nimport M from \"materialize-css\";\r\nimport { useAddPpHrefMutation } from \"../generated/graphql\";\r\nimport Axios from \"axios\";\r\nimport Dropzone from \"react-dropzone\";\r\n\r\nexport const Sidenav: React.FC = () => {\r\n    const user = useSelector<State, User>(state => state.user!);\r\n    const [AddPpHref] = useAddPpHrefMutation();\r\n\r\n    useEffect(() => {\r\n        setNavActives(user);\r\n        var elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems, {\r\n            position: \"bottom\",\r\n        });\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <Dropzone\r\n                        onDrop={async ([file]) => {\r\n                            const form = new FormData();\r\n\r\n                            form.append(\"file\", file);\r\n                            form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                            form.append(\"upload_preset\", \"re5zmdqn\");\r\n                            form.append(\"api_key\", \"767632178961832\");\r\n                            let t = (Date.now() / 1000) | 0;\r\n                            form.append(\"timestamp\", `${t}`);\r\n\r\n                            Axios.post(\r\n                                \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                                form,\r\n                                {\r\n                                    headers: {\r\n                                        \"X-Requested-With\": \"XMLHttpRequest\",\r\n                                    },\r\n                                }\r\n                            )\r\n                                .then(res => {\r\n                                    let tmp = AddPpHref({\r\n                                        variables: {\r\n                                            ppHref: res.data.secure_url,\r\n                                        },\r\n                                    });\r\n                                    if (tmp) {\r\n                                        window.location.reload();\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    M.toast({\r\n                                        html:\r\n                                            \"An Error occured, please try again later.\",\r\n                                    });\r\n                                    console.log(\"error\", error);\r\n                                });\r\n                        }}\r\n                    >\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <img\r\n                                    src={user.ppHref}\r\n                                    alt=\"User Profile\"\r\n                                    className=\"circle noselect tooltipped\"\r\n                                    data-position=\"bottom\"\r\n                                    data-tooltip=\"Click to edit\"\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a href=\"#/manage-roles\" className=\"navLink\" id=\"man-roles\">\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Manage Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nconst PageLoader = (): JSX.Element => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-red\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-yellow\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"spinner-layer spinner-green\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageLoader;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport { useGetUserNotificationsQuery } from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport PageLoader from \"./PageLoader\";\r\n\r\nexport const MobileSideNav = () => {\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    const logout = async () => {\r\n        setAccessToken(\"\");\r\n        localStorage.setItem(\"refreshToken\", \"none\");\r\n        window.location.reload();\r\n    };\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    let unread = 0;\r\n    data?.getUserNotifications.forEach((_val, i) => {\r\n        if (!data.getUserNotifications[i].read) {\r\n            unread++;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"collection\">\r\n                <li className=\"collection-item avatar\">\r\n                    <img src={user.ppHref} className=\"circle noselect\" alt=\"\" />\r\n                    <span className=\"title noselect\">\r\n                        <b>Welcome, {user.username}</b>\r\n                    </span>\r\n                    <p>\r\n                        {user.email}\r\n                        <br />\r\n                        <span className=\"noselect capitalize\">\r\n                            Current Role: {user.role}\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/dashboard\" className=\"navLink\" id=\"mobile-dashboard\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">dashboard</i>{\" \"}\r\n                        <span className=\"left\">Dashboard</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            {user.role === \"admin\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-roles\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-roles\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">\r\n                                people_outline\r\n                            </i>\r\n                            <span className=\"left\">Manage Roles</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            {user.role === \"admin\" || user.role === \"project-manager\" ? (\r\n                <li className=\"btnli\">\r\n                    <a\r\n                        href=\"#/manage-projects\"\r\n                        className=\"navLink\"\r\n                        id=\"mobile-man-projects\"\r\n                    >\r\n                        <button className=\"btn\">\r\n                            <i className=\"left material-icons\">people</i>\r\n                            <span className=\"left\">Man Projects</span>\r\n                        </button>\r\n                    </a>\r\n                </li>\r\n            ) : null}\r\n            <li className=\"btnli\">\r\n                <a href=\"#/projects\" className=\"navLink\" id=\"mobile-projects\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">widgets</i>\r\n                        <span className=\"left\">My Projects</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                <a href=\"#/tickets\" className=\"navLink\" id=\"mobile-tickets\">\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">local_offer</i>\r\n                        <span className=\"left\">My Tickets</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"btnli\">\r\n                <a href=\"#/notifications\" className=\"navLink\">\r\n                    <button className=\"btn\">\r\n                        {unread !== 0 ? (\r\n                            <i className=\"left material-icons\">\r\n                                notifications_active\r\n                            </i>\r\n                        ) : (\r\n                            <i className=\"left material-icons\">notifications</i>\r\n                        )}\r\n                        <span className=\"left\">Notifications</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n            <li className=\"btnli\">\r\n                {/* eslint-disable-next-line */}\r\n                <a\r\n                    className=\"navLink\"\r\n                    onClick={() => {\r\n                        logout();\r\n                    }}\r\n                >\r\n                    <button className=\"btn\">\r\n                        <i className=\"left material-icons\">exit_to_app</i>\r\n                        <span className=\"left\">Logout</span>\r\n                    </button>\r\n                </a>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGetUserNotificationsQuery } from \"../generated/graphql\";\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { Sidenav } from \"./Sidenav\";\r\nimport { MobileSideNav } from \"./MobileSideNav\";\r\nimport PageLoader from \"./PageLoader\";\r\n\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nexport const UI: React.FC<Props> = ({ children }) => {\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n    });\r\n\r\n    const logout = async () => {\r\n        setAccessToken(\"\");\r\n        localStorage.setItem(\"refreshToken\", \"\");\r\n        window.location.reload();\r\n    };\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    let unread = 0;\r\n    data?.getUserNotifications.forEach((_val, i) => {\r\n        if (!data.getUserNotifications[i].read) {\r\n            unread++;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div id=\"navWrapper\" className=\"navWrapper\">\r\n            <span id=\"NAVBAR\" className=\"z-depth-4 noselect\">\r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#/dashboard\" className=\"brand-logo\">\r\n                            <i className=\"material-icons\">bug_report</i>\r\n                            <b>Bug Tracker</b>\r\n                        </a>\r\n\r\n                        {/* eslint-disable-next-line */}\r\n                        <a\r\n                            href=\"#\"\r\n                            data-target=\"slide-out\"\r\n                            className=\"sidenav-trigger\"\r\n                        >\r\n                            <i className=\"material-icons\">menu</i>\r\n                        </a>\r\n                        <ul\r\n                            id=\"nav-mobile\"\r\n                            className=\"right hide-on-med-and-down\"\r\n                        >\r\n                            <li>\r\n                                <a href=\"#/notifications\">\r\n                                    Notifications\r\n                                    {unread !== 0 ? (\r\n                                        <span className=\"new badge blue\">\r\n                                            {unread}\r\n                                        </span>\r\n                                    ) : null}\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                {/* eslint-disable-next-line */}\r\n                                <a\r\n                                    onClick={() => {\r\n                                        logout();\r\n                                    }}\r\n                                >\r\n                                    Logout\r\n                                    <i className=\"material-icons right\">\r\n                                        exit_to_app\r\n                                    </i>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </span>\r\n\r\n            <ul id=\"slide-out\" className=\"sidenav\">\r\n                <span id=\"MOBILE_SIDENAV\" className=\"z-depth-4\">\r\n                    <MobileSideNav />\r\n                </span>\r\n            </ul>\r\n\r\n            <span id=\"SIDENAV\" className=\"z-depth-4\">\r\n                <Sidenav />\r\n            </span>\r\n\r\n            <span id=\"CONTENT\">{children ? children : null}</span>\r\n        </div>\r\n    );\r\n};\r\n","import { getAccessToken } from \"./accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default checkAuth();\r\n","import React from \"react\";\r\nimport { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\r\nimport { Route, RouteProps } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (user: any) => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if (user.role === \"admin\") {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(\"error :>> \", error);\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst AdminRoute: React.FC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                checkAuth(user) ? <Component {...props} /> : null\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default AdminRoute;\r\n","import React, { useEffect } from \"react\";\r\nimport M from \"materialize-css\";\r\n\r\ninterface Props {\r\n    state: {\r\n        Cards: any;\r\n    };\r\n\r\n    setState: (\r\n        value: React.SetStateAction<{\r\n            Cards: any;\r\n        }>\r\n    ) => void;\r\n\r\n    chart: {\r\n        name: any;\r\n    };\r\n\r\n    setChart: (\r\n        value: React.SetStateAction<{\r\n            name: any;\r\n        }>\r\n    ) => void;\r\n}\r\n\r\nconst DashboardFAB: React.FC<Props> = ({\r\n    state,\r\n    setState,\r\n    chart,\r\n    setChart,\r\n}) => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".fixed-action-btn\");\r\n        M.FloatingActionButton.init(elems, {\r\n            hoverEnabled: false,\r\n        });\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems, {\r\n            position: \"left\",\r\n        });\r\n    });\r\n\r\n    const AddCard = (): void => {\r\n        let temp = state.Cards[state.Cards.length - 1];\r\n        let t1 = state.Cards.concat((temp! += 1));\r\n        setState({ ...state, Cards: state.Cards.concat((temp! += 1)) });\r\n        setChart({\r\n            ...chart,\r\n            name: chart.name.concat(\"\"),\r\n        });\r\n        localStorage.setItem(\"chart\", `${t1}`);\r\n        let tmp = chart.name;\r\n        let names = [\"Pie\", \"Bar\", \"Donut\"];\r\n        tmp.push(names[Math.floor(Math.random() * names.length)]);\r\n        setChart({\r\n            ...chart,\r\n            name: tmp,\r\n        });\r\n        localStorage.setItem(\"chartType\", `${tmp}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"fixed-action-btn\">\r\n            {/* eslint-disable-next-line */}\r\n            <a\r\n                className=\"btn-floating tooltipped btn-large\"\r\n                data-position=\"left\"\r\n                data-tooltip=\"ADD A CHART\"\r\n                style={{\r\n                    backgroundImage:\r\n                        \"linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)\",\r\n                }}\r\n                onClick={() => {\r\n                    AddCard();\r\n                }}\r\n            >\r\n                <i className=\"material-icons\">insert_chart</i>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardFAB;\r\n","export const changeIndicatorC = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul${i}`);\r\n    t?.classList.remove(\"indicator-pink\");\r\n    t?.classList.remove(\"indicator-darkblue\");\r\n    t?.classList.remove(\"indicator-cyan\");\r\n    switch (color) {\r\n        case \"pink\": {\r\n            t?.classList.add(\"indicator-pink\");\r\n            break;\r\n        }\r\n        case \"dark-blue\": {\r\n            t?.classList.add(\"indicator-darkblue\");\r\n            break;\r\n        }\r\n        case \"cyan\": {\r\n            t?.classList.add(\"indicator-cyan\");\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\nexport const changeIndicatorT = (i: string, color: string) => {\r\n    let t = document.getElementById(`ul2${i}`);\r\n    let subt = document.getElementById(`sub-tab2${i}`);\r\n    let subt2 = document.getElementById(`sub-tab2.1${i}`);\r\n    t?.classList.remove(\"indicator-blue\");\r\n    t?.classList.remove(\"indicator-yellow\");\r\n    switch (color) {\r\n        case \"yellow\": {\r\n            t?.classList.add(\"indicator-yellow\");\r\n            subt?.classList.add(\"indicator-blue\");\r\n            break;\r\n        }\r\n        case \"blue\": {\r\n            t?.classList.add(\"indicator-blue\");\r\n            subt2?.classList.add(\"indicator-yellow\");\r\n            break;\r\n        }\r\n    }\r\n};\r\n","import { useGetUserTickets } from \"./useGetUserTickets\";\r\nimport { useGetTickets } from \"./useGetTickets\";\r\n\r\nexport const DashboardTabsMethods = (forceUpdate: () => void) => {\r\n    let LStitle: any = localStorage.getItem(\"title\");\r\n    if (!!LStitle) {\r\n        LStitle = LStitle!.split(\",\");\r\n    } else {\r\n        LStitle = [\"\"];\r\n    }\r\n\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    } else {\r\n        LSdata = [\"\"];\r\n    }\r\n\r\n    const userTickets = useGetUserTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n\r\n    const tickets = useGetTickets() as [\r\n        { priority: string; status: string; type: string }\r\n    ];\r\n\r\n    if (!tickets || !userTickets) {\r\n        return {};\r\n    }\r\n\r\n    const getCircularReplacer = () => {\r\n        const seen = new WeakSet();\r\n        return (_key: any, value: any) => {\r\n            if (typeof value === \"object\" && value !== null) {\r\n                if (seen.has(value)) {\r\n                    return;\r\n                }\r\n                seen.add(value);\r\n            }\r\n            return value;\r\n        };\r\n    };\r\n\r\n    const myTicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = LStitle;\r\n        t[i] = \"My Tickets By Type\";\r\n\r\n        forceUpdate();\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = LStitle;\r\n        t[i] = \"My Tickets By Priority\";\r\n\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByP = (i: number) => {\r\n        var h = 0,\r\n            m = 0,\r\n            l = 0;\r\n\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].priority) {\r\n                case \"high\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n\r\n                case \"medium\": {\r\n                    m++;\r\n                    break;\r\n                }\r\n\r\n                case \"low\": {\r\n                    l++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"High\", \"Medium\", \"Low\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [h, m, l, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n        let t = LStitle;\r\n        t[i] = \"All Tickets By Priority\";\r\n\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const myTicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < userTickets.length; i++) {\r\n            switch (userTickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = LStitle;\r\n        t[i] = \"My Tickets By Status\";\r\n\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByS = (i: number) => {\r\n        var o = 0,\r\n            c = 0,\r\n            h = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].status) {\r\n                case \"open\": {\r\n                    o++;\r\n                    break;\r\n                }\r\n\r\n                case \"closed\": {\r\n                    c++;\r\n                    break;\r\n                }\r\n\r\n                case \"on-hold\": {\r\n                    h++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"Open\", \"Closed\", \"On Hold\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [o, c, h, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = LStitle;\r\n        t[i] = \"All Tickets By Status\";\r\n\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    const TicketsByT = (i: number) => {\r\n        var be = 0,\r\n            f = 0;\r\n        for (let i = 0; i < tickets.length; i++) {\r\n            switch (tickets[i].type) {\r\n                case \"features\": {\r\n                    f++;\r\n                    break;\r\n                }\r\n\r\n                case \"bugs/errors\": {\r\n                    be++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let tmp = LSdata;\r\n        let val = {\r\n            labels: [\"Bugs/Erros\", \"Features\"],\r\n            datasets: [\r\n                {\r\n                    label: \"Amount of Tickets\",\r\n                    data: [be, f, 0],\r\n                    backgroundColor: [\r\n                        \"#051937\",\r\n                        \"#A8EB12\",\r\n                        \"#5FFBF1\",\r\n                        \"#E13296\",\r\n                        \"#E0DF31\",\r\n                    ],\r\n                    borderWidth: 2,\r\n                },\r\n            ],\r\n        };\r\n        tmp[i] = val;\r\n        localStorage.setItem(\r\n            \"data\",\r\n            JSON.stringify(tmp, getCircularReplacer())\r\n        );\r\n\r\n        let t = LStitle;\r\n        t[i] = \"All Tickets By Type\";\r\n\r\n        localStorage.setItem(\"title\", `${t}`);\r\n    };\r\n\r\n    return {\r\n        myTicketsByT,\r\n        myTicketsByP,\r\n        myTicketsByS,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    };\r\n};\r\n","import { useGetUserTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUserTickets = () => {\r\n    const { data, loading } = useGetUserTicketsQuery();\r\n    if (loading || !data) {\r\n        return {};\r\n    }\r\n    return data.getUserTickets;\r\n};\r\n","import { useGetTicketsQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetTickets = () => {\r\n    const { data, loading } = useGetTicketsQuery();\r\n    if (loading || !data) {\r\n        return {};\r\n    }\r\n    return data.getTickets;\r\n};\r\n","import React from \"react\";\r\nimport { changeIndicatorC, changeIndicatorT } from \"./Indicators\";\r\nimport { DashboardTabsMethods } from \"./DashboardTabsMethods\";\r\n\r\ninterface Props {\r\n    i: number;\r\n    chart: {\r\n        name: any;\r\n    };\r\n    setChart: React.Dispatch<\r\n        React.SetStateAction<{\r\n            name: any;\r\n        }>\r\n    >;\r\n    forceUpdate: () => void;\r\n}\r\n\r\nconst DashboardTabs: React.FC<Props> = ({\r\n    i,\r\n    chart,\r\n    setChart,\r\n    forceUpdate,\r\n}) => {\r\n    const {\r\n        myTicketsByS,\r\n        myTicketsByP,\r\n        myTicketsByT,\r\n        TicketsByP,\r\n        TicketsByS,\r\n        TicketsByT,\r\n    } = DashboardTabsMethods(forceUpdate);\r\n\r\n    const setChartType = (e: React.SyntheticEvent, i: number): void => {\r\n        let target = e.target as any;\r\n        let name = target.name;\r\n        let tmp = chart.name;\r\n        tmp[i] = name;\r\n        if (!!name) {\r\n            setChart({\r\n                ...chart,\r\n                name: tmp,\r\n            });\r\n            localStorage.setItem(\"chartType\", `${tmp}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card-tabs\">\r\n                <ul className=\"tabs tabs-fixed-width\">\r\n                    <li className=\"tab\">\r\n                        <a className=\"active\" href={`#tab2${i}`}>\r\n                            Tickets\r\n                        </a>\r\n                    </li>\r\n                    <li className=\"tab\">\r\n                        <a href={`#tab${i}`}>Chart Type</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"card-content grey lighten-4\">\r\n                <div id={`tab${i}`}>\r\n                    <div className=\"card-tabs\">\r\n                        <ul id={`ul${i}`} className=\"tabs tabs-fixed-width\">\r\n                            <li className=\"tab\">\r\n                                {/* eslint-disable-next-line */}\r\n                                <a\r\n                                    className=\"active\"\r\n                                    onClick={() => {\r\n                                        changeIndicatorC(`${i}`, \"pink\");\r\n                                    }}\r\n                                >\r\n                                    <button\r\n                                        className=\"card-opt\"\r\n                                        key={i}\r\n                                        name={`Donut`}\r\n                                        onClick={e => setChartType(e, i)}\r\n                                    >\r\n                                        Donut\r\n                                    </button>\r\n                                </a>\r\n                            </li>\r\n                            <li\r\n                                className=\"tab\"\r\n                                onClick={() => {\r\n                                    changeIndicatorC(`${i}`, \"dark-blue\");\r\n                                }}\r\n                            >\r\n                                {/* eslint-disable-next-line */}\r\n                                <a>\r\n                                    <button\r\n                                        className=\"card-opt\"\r\n                                        key={i}\r\n                                        name={`Pie`}\r\n                                        onClick={e => {\r\n                                            setChartType(e, i);\r\n                                        }}\r\n                                    >\r\n                                        Pie\r\n                                    </button>\r\n                                </a>\r\n                            </li>\r\n                            <li\r\n                                className=\"tab\"\r\n                                onClick={() => {\r\n                                    changeIndicatorC(`${i}`, \"cyan\");\r\n                                }}\r\n                            >\r\n                                {/* eslint-disable-next-line */}\r\n                                <a>\r\n                                    <button\r\n                                        className=\"card-opt\"\r\n                                        key={i}\r\n                                        name={`Bar`}\r\n                                        onClick={e => {\r\n                                            setChartType(e, i);\r\n                                        }}\r\n                                    >\r\n                                        Bar\r\n                                    </button>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id={`tab2${i}`}>\r\n                    <ul id={`ul2${i}`} className=\"tabs tabs-fixed-width\">\r\n                        <li className=\"tab my-tickets\">\r\n                            <a\r\n                                className=\"active\"\r\n                                onClick={() =>\r\n                                    changeIndicatorT(`${i}`, \"yellow\")\r\n                                }\r\n                                href={`#sub-tab2${i}`}\r\n                            >\r\n                                My Tickets\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"tab all-tickets\">\r\n                            <a\r\n                                href={`#sub-tab2.1${i}`}\r\n                                onClick={() => changeIndicatorT(`${i}`, \"blue\")}\r\n                            >\r\n                                All Tickets\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"card-content grey lighten-4\">\r\n                        <div id={`sub-tab2${i}`}>\r\n                            <div className=\"card-tabs\">\r\n                                <ul\r\n                                    id={`ul2${i}`}\r\n                                    className=\"tabs tabs-fixed-width\"\r\n                                >\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a className=\"active yellow-text\">\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    myTicketsByP!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Priority\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    myTicketsByS!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Status\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    myTicketsByT!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Type\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id={`sub-tab2.1${i}`}>\r\n                            <div className=\"card-tabs\">\r\n                                <ul className=\"tabs tabs-fixed-width\">\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a className=\"active\">\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    TicketsByP!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Priority\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    TicketsByS!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Status\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\"tab\">\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a>\r\n                                            <button\r\n                                                className=\"card-opt\"\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    TicketsByT!(i);\r\n                                                    forceUpdate();\r\n                                                }}\r\n                                            >\r\n                                                By Type\r\n                                            </button>\r\n                                        </a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DashboardTabs;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Doughnut, Bar, Pie } from \"react-chartjs-2\";\r\nimport M from \"materialize-css\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DashboardFAB from \"./DashboardFAB\";\r\nimport DashboardTabs from \"./DashboardTabs\";\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    const [value, setValue] = useState(false);\r\n    function useForceUpdate() {\r\n        return () => setValue(!value);\r\n    }\r\n    let forceUpdate = useForceUpdate();\r\n\r\n    let LSname: any = localStorage.getItem(\"chartType\");\r\n    if (!!LSname) {\r\n        LSname = LSname!.split(\",\");\r\n    }\r\n\r\n    let LSchart: any = localStorage.getItem(\"chart\");\r\n    if (!!LSchart) {\r\n        LSchart = LSchart.split(\",\");\r\n    }\r\n\r\n    let LSdata: any = localStorage.getItem(\"data\");\r\n    if (!!LSdata) {\r\n        LSdata = JSON.parse(LSdata);\r\n    }\r\n\r\n    let LStitle: any = localStorage.getItem(\"title\");\r\n\r\n    if (!!LStitle) {\r\n        LStitle = LStitle.split(\",\");\r\n    } else {\r\n        LStitle = [\"\"];\r\n    }\r\n\r\n    const [state, setState] = useState({ Cards: LSchart || [1] });\r\n    const [chart, setChart] = useState({ name: LSname || ([] as string[]) });\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (!localStorage.getItem(\"chartType\")) {\r\n        localStorage.setItem(\"chartType\", \"Donut\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DashboardFAB\r\n                state={state}\r\n                setState={val => setState(val)}\r\n                chart={chart}\r\n                setChart={val => setChart(val)}\r\n            />\r\n\r\n            <div className=\"row noselect\">\r\n                {state.Cards.map(\r\n                    (_val: any, i: any): JSX.Element => {\r\n                        let title = LStitle[i];\r\n                        return (\r\n                            <div\r\n                                className=\"col s10 offset-s1 m6 offset-m1 l6 xl4 container\"\r\n                                key={i}\r\n                            >\r\n                                <div className=\"card\">\r\n                                    {i !== 0 ? (\r\n                                        <span\r\n                                            className=\"close-icon\"\r\n                                            onClick={() => {\r\n                                                LSchart.splice(i, 1);\r\n                                                localStorage.setItem(\r\n                                                    \"chart\",\r\n                                                    LSchart\r\n                                                );\r\n\r\n                                                let LStitle = localStorage\r\n                                                    .getItem(\"title\")!\r\n                                                    .split(\",\");\r\n                                                LStitle!.splice(i, 1);\r\n                                                localStorage.setItem(\r\n                                                    \"title\",\r\n                                                    LStitle.toString()!\r\n                                                );\r\n\r\n                                                LSname.splice(i, 1);\r\n                                                localStorage.setItem(\r\n                                                    \"chartType\",\r\n                                                    LSname.toString()\r\n                                                );\r\n\r\n                                                LSdata.splice(i, 1);\r\n                                                localStorage.setItem(\r\n                                                    \"data\",\r\n                                                    JSON.stringify(LSdata)\r\n                                                );\r\n\r\n                                                window.location.reload();\r\n                                            }}\r\n                                        >\r\n                                            <i className=\"material-icons\">\r\n                                                close\r\n                                            </i>\r\n                                        </span>\r\n                                    ) : (\r\n                                        <></>\r\n                                    )}\r\n\r\n                                    <div className=\"card-content\">\r\n                                        <div className=\"row\">\r\n                                            <span className=\"card-title center\">\r\n                                                {title}\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        <div className=\"divider\"></div>\r\n\r\n                                        <div className=\"row row-verticle-center\">\r\n                                            <div className=\"col l12 m12 s12 centered\">\r\n                                                {chart.name[i] === \"Donut\" &&\r\n                                                !!LSdata &&\r\n                                                LSdata[i] ? (\r\n                                                    <Doughnut\r\n                                                        data={LSdata[i]}\r\n                                                        options={{\r\n                                                            responsive: true,\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {chart.name[i] === \"Bar\" &&\r\n                                                !!LSdata &&\r\n                                                LSdata[i] ? (\r\n                                                    <Bar\r\n                                                        data={LSdata[i]}\r\n                                                        options={{\r\n                                                            responsive: true,\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {chart.name[i] === \"Pie\" &&\r\n                                                !!LSdata &&\r\n                                                LSdata[i] ? (\r\n                                                    <Pie\r\n                                                        data={LSdata[i]}\r\n                                                        options={{\r\n                                                            responsive: true,\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <DashboardTabs\r\n                                        i={i}\r\n                                        chart={chart}\r\n                                        setChart={value => setChart(value)}\r\n                                        forceUpdate={() => forceUpdate()}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetProjectDataQuery } from \"../../../generated/graphql\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../../setNavActives\";\r\n\r\nexport const ManageProjects: React.FC = () => {\r\n    const { data, loading, error } = useGetProjectDataQuery();\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text noselect\">Manage Projects</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <b>Project Name</b>\r\n                                </th>\r\n                                <th className=\"nonessen\">\r\n                                    <b>Description</b>\r\n                                </th>\r\n                                <th>\r\n                                    <b>Users Assigned</b>\r\n                                </th>\r\n                                <th className=\"noselect\">\r\n                                    <b>Edit/Details</b>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {data.getProjectData.map(\r\n                                (_val, i, getProjectData): JSX.Element => {\r\n                                    let projectId = getProjectData[i].projectid;\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>{getProjectData[i].title}</td>\r\n                                            <td className=\"nonessen\">\r\n                                                {getProjectData[i].description}\r\n                                            </td>\r\n                                            <td>\r\n                                                {getProjectData[i].projectid}\r\n                                            </td>\r\n                                            <td>\r\n                                                <a\r\n                                                    href={`#/edit-project:${projectId}`}\r\n                                                >\r\n                                                    <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                        edit\r\n                                                    </i>\r\n                                                </a>\r\n                                                <br />\r\n                                                <a\r\n                                                    href={`#/project-details:${projectId}`}\r\n                                                >\r\n                                                    <i className=\"material-icons blue-grey-text text-darken-4 noselect\">\r\n                                                        details\r\n                                                    </i>\r\n                                                </a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"poormans-divider\"></div>\r\n                    <a href=\"#/create-project\">\r\n                        <button className=\"btn btn-ex safe-btn center footerBtn\">\r\n                            Add Project\r\n                        </button>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\n\r\ninterface Props {\r\n    projectid: number;\r\n    keyprop: number; //Called keyprops because key is in use\r\n}\r\n\r\nexport const DetailsSubCom: React.FC<Props> = props => {\r\n    const { data, loading } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${props.projectid}` },\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <div className=\"progress\">\r\n                        <div className=\"indeterminate\"></div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    let project: any = data.getProjectDataById;\r\n\r\n    return (\r\n        <tr key={props.keyprop}>\r\n            <td>{project.title}</td>\r\n            <td className=\"nonessen\">{project.description}</td>\r\n            <td>\r\n                <a href={`#/project-details:${props.projectid}`}>Details</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetUserProjectsQuery } from \"../../generated/graphql\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport { setNavActives } from \"../../setNavActives\";\r\nimport { DetailsSubCom } from \"./DetailsSubCom\";\r\n\r\nexport const Projects: React.FC = () => {\r\n    const { data, loading, error } = useGetUserProjectsQuery();\r\n\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        setNavActives(user);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text\">My Projects</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Title</th>\r\n                                <th className=\"nonessen\">Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {data!.getUserProjects!.map(\r\n                                (_val, i, getUserProjects): JSX.Element => {\r\n                                    return (\r\n                                        <DetailsSubCom\r\n                                            projectid={\r\n                                                getUserProjects[i].projectid\r\n                                            }\r\n                                            key={i}\r\n                                            keyprop={i}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/**\r\n * Returns the id(number(s) at the end of href) from the current href\r\n */\r\nexport const GetLocationId = (): string => {\r\n    return window.location.href.split(\":\")[3];\r\n};\r\n","import { useGetProjectTicketsQuery } from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\n\r\nconst useGetProjectTickets = () => {\r\n    let id: string = GetLocationId();\r\n\r\n    const { data, loading } = useGetProjectTicketsQuery({\r\n        variables: { id },\r\n    });\r\n\r\n    if (!loading && !!data) {\r\n        let Tickets = data.getProjectTickets;\r\n        return Tickets;\r\n    }\r\n};\r\n\r\nexport default useGetProjectTickets;\r\n","import { useGetProjectUsersByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\n\r\nconst useGetProjectUsers = () => {\r\n    let projectid: string = GetLocationId();\r\n\r\n    const { data, loading } = useGetProjectUsersByIdQuery({\r\n        variables: { projectid },\r\n    });\r\n\r\n    if (loading || !data) {\r\n    } else {\r\n        let AssignedUsers = data.getProjectUsersById;\r\n        return AssignedUsers;\r\n    }\r\n};\r\n\r\nexport default useGetProjectUsers;\r\n","import React, { useEffect } from \"react\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { useGetProjectDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\nimport useGetProjectTickets from \"../QueryHooks/useGetProjectTickets\";\r\nimport { Sorting } from \"../Sorting\";\r\nimport { useState } from \"react\";\r\nimport useGetProjectUsers from \"../QueryHooks/useGetProjectUsers\";\r\n\r\nexport const ProjectDetails: React.FC<RouteComponentProps> = ({ history }) => {\r\n    let id = GetLocationId();\r\n    let Tickets = useGetProjectTickets();\r\n    let AssignedUsers = useGetProjectUsers();\r\n    console.log(\"id :>> \", id);\r\n    const { data, loading, error } = useGetProjectDataByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    const user = useSelector<State, User>(state => state.user!);\r\n    const [state, setState] = useState({\r\n        toggle: \"0\",\r\n        titleSwitch: false,\r\n        usernameSwitch: false,\r\n        emailSwitch: false,\r\n        roleSwitch: \"0\",\r\n        submitterSwitch: false,\r\n        developerSwitch: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (loading || !AssignedUsers || !Tickets) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    const { sortByProp, sortTicketsByStatus, roleSort } = Sorting();\r\n\r\n    let project: any = data.getProjectDataById;\r\n\r\n    return (\r\n        <span>\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text\">\r\n                            Details for Project #{id}\r\n                        </h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Project Name</th>\r\n                                    <th>Project Description</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{project.title}</td>\r\n                                    <td>{project.description}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s12 m5 l5 xl5\">\r\n                                <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                    <h3 className=\"white-text\">\r\n                                        Assigned Personnel\r\n                                    </h3>\r\n                                </span>\r\n\r\n                                <table className=\"striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                <b>\r\n                                                    User Name\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let usernameSwitch = sortByProp(\r\n                                                                AssignedUsers,\r\n                                                                \"username\",\r\n                                                                state.usernameSwitch\r\n                                                            );\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                usernameSwitch,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                            <th className=\"nonessen\">\r\n                                                <b>\r\n                                                    Email\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let emailSwitch = sortByProp(\r\n                                                                AssignedUsers,\r\n                                                                \"email\",\r\n                                                                state.emailSwitch\r\n                                                            );\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                emailSwitch,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                            <th>\r\n                                                <b>\r\n                                                    Role\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let roleSwitch: string =\r\n                                                                roleSort(\r\n                                                                    AssignedUsers,\r\n                                                                    state.roleSwitch\r\n                                                                ) || \"0\";\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                roleSwitch,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {AssignedUsers!.map(\r\n                                            (_val, i): JSX.Element => {\r\n                                                return (\r\n                                                    <tr key={i}>\r\n                                                        <td className=\"capitalize\">\r\n                                                            {\r\n                                                                AssignedUsers![\r\n                                                                    i\r\n                                                                ].username\r\n                                                            }\r\n                                                        </td>\r\n                                                        <td className=\"capitalize nonessen\">\r\n                                                            {\r\n                                                                AssignedUsers![\r\n                                                                    i\r\n                                                                ].email\r\n                                                            }\r\n                                                        </td>\r\n                                                        <td className=\"capitalize\">\r\n                                                            {\r\n                                                                AssignedUsers![\r\n                                                                    i\r\n                                                                ].role\r\n                                                            }\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </span>\r\n\r\n                            <span className=\"col s12 m5 l5 xl5 offset-m2 offset-l2 offset-xl2\">\r\n                                <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                    <h3 className=\"white-text\">\r\n                                        Tickets for Project #{id}\r\n                                    </h3>\r\n                                </span>\r\n\r\n                                <table className=\"striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                <b>\r\n                                                    Title\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let tmp = sortByProp(\r\n                                                                Tickets,\r\n                                                                \"title\",\r\n                                                                state.titleSwitch\r\n                                                            );\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                titleSwitch: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                            <th className=\"nonessen\">\r\n                                                <b>\r\n                                                    Submitter\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let submitterSwitch = sortByProp(\r\n                                                                Tickets,\r\n                                                                \"submitter\",\r\n                                                                state.submitterSwitch\r\n                                                            );\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                submitterSwitch,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                            <th className=\"nonessen\">\r\n                                                <b>\r\n                                                    Developer\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let developerSwitch = sortByProp(\r\n                                                                Tickets,\r\n                                                                \"developer\",\r\n                                                                state.developerSwitch\r\n                                                            );\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                developerSwitch,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                            <th>\r\n                                                <b>\r\n                                                    Status\r\n                                                    <i\r\n                                                        className=\"material-icons noselect\"\r\n                                                        onClick={() => {\r\n                                                            let toggle: string =\r\n                                                                sortTicketsByStatus(\r\n                                                                    Tickets,\r\n                                                                    state.toggle\r\n                                                                ) || \"0\";\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                toggle,\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        swap_vert\r\n                                                    </i>\r\n                                                </b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {!Tickets\r\n                                            ? null\r\n                                            : Tickets!.map((_val, i) => {\r\n                                                  return (\r\n                                                      <tr key={i}>\r\n                                                          <td className=\"capitalize\">\r\n                                                              {\r\n                                                                  Tickets![i]\r\n                                                                      .title\r\n                                                              }\r\n                                                          </td>\r\n                                                          <td className=\"capitalize nonessen\">\r\n                                                              {\r\n                                                                  Tickets![i]\r\n                                                                      .submitter\r\n                                                              }\r\n                                                          </td>\r\n                                                          <td className=\"capitalize nonessen\">\r\n                                                              {\r\n                                                                  Tickets![i]\r\n                                                                      .developer\r\n                                                              }\r\n                                                          </td>\r\n                                                          <td className=\"capitalize\">\r\n                                                              {\r\n                                                                  Tickets![i]\r\n                                                                      .status\r\n                                                              }\r\n                                                          </td>\r\n                                                          <td>\r\n                                                              <a\r\n                                                                  className=\"noselect\"\r\n                                                                  href={`#/ticket-details:${\r\n                                                                      Tickets![\r\n                                                                          i\r\n                                                                      ].ticketid\r\n                                                                  }`}\r\n                                                              >\r\n                                                                  Details\r\n                                                              </a>\r\n                                                          </td>\r\n                                                      </tr>\r\n                                                  );\r\n                                              })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n\r\n                        <button\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Go Back\r\n                        </button>\r\n                        {user.role === \"developer\" ? null : (\r\n                            <a href={`#/edit-project:${id}`}>\r\n                                <button className=\"btn right footerBtn\">\r\n                                    Edit\r\n                                </button>\r\n                            </a>\r\n                        )}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </span>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\nimport M from \"materialize-css\";\r\nimport {\r\n    useAddCommentMutation,\r\n    useGetCommentsQuery,\r\n    useDeleteCommentMutation,\r\n    useSendNot_CreateCommentMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../../css/comments.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../redux/RootReducer\";\r\n\r\nconst TicketComments: React.FC = () => {\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    let parentid: number = JSON.parse(GetLocationId());\r\n    const { data, loading, error } = useGetCommentsQuery({\r\n        variables: { parentid },\r\n    });\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    const [ADD_COMMENT] = useAddCommentMutation();\r\n    const [DELETE_COMMENT] = useDeleteCommentMutation();\r\n    const [SEND_NOTIFICATION] = useSendNot_CreateCommentMutation();\r\n\r\n    const addComment = async () => {\r\n        if (comment.length === 0) {\r\n            M.toast({ html: \"Comment cannot be empty\" });\r\n        } else {\r\n            let tmp = await ADD_COMMENT({\r\n                variables: {\r\n                    comment,\r\n                    parentid,\r\n                },\r\n            });\r\n\r\n            if (tmp) {\r\n                try {\r\n                    await SEND_NOTIFICATION({\r\n                        variables: {\r\n                            ticketid: `${parentid}`,\r\n                        },\r\n                    });\r\n                    M.toast({ html: \"Comment added successfully\" });\r\n                    M.toast({ html: \"Reloading\" });\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                    }, 1000);\r\n                } catch {\r\n                    M.toast({ html: \"Failed! Server is most likely down\" });\r\n                }\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteComment = async (commentid: number) => {\r\n        if (!!commentid) {\r\n            let tmp = await DELETE_COMMENT({ variables: { commentid } });\r\n\r\n            if (tmp) {\r\n                M.toast({ html: \"Comment Deleted Successfully\" });\r\n                M.toast({ html: \"Reloading\" });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } else {\r\n                M.toast({ html: \"Failed! Server is most likely down\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    let comments: any = data?.getComments;\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Discussion</h3>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Commenter</th>\r\n                                    <th>Comment</th>\r\n                                    <th className=\"nonessen\">Created At</th>\r\n                                    {user.role !== \"developer\" ? (\r\n                                        <th>Delete</th>\r\n                                    ) : (\r\n                                        <></>\r\n                                    )}\r\n                                </tr>\r\n\r\n                                {comments.map(\r\n                                    (_val, i): JSX.Element => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize PpWrapper\">\r\n                                                    <img\r\n                                                        src={\r\n                                                            comments[i]\r\n                                                                .commenterPp\r\n                                                        }\r\n                                                        className=\"circle noselect\"\r\n                                                        alt=\"\"\r\n                                                    />\r\n\r\n                                                    <div className=\"valign-wrapper\">\r\n                                                        {comments[i].commenter}\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {comments[i].comment}\r\n                                                </td>\r\n                                                <td className=\"capitalize nonessen\">\r\n                                                    {comments[i].createdAt}\r\n                                                </td>\r\n                                                {user.role !== \"developer\" ? (\r\n                                                    <td>\r\n                                                        <i\r\n                                                            className=\"material-icons red-text\"\r\n                                                            onClick={() =>\r\n                                                                deleteComment(\r\n                                                                    comments[i]\r\n                                                                        .commentid\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            delete\r\n                                                        </i>\r\n                                                    </td>\r\n                                                ) : (\r\n                                                    <></>\r\n                                                )}\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"comment\"\r\n                                    type=\"text\"\r\n                                    value={comment}\r\n                                    onChange={e => setComment(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"comment\">Add A Comment</label>\r\n                                <button\r\n                                    className=\"btn btn-ex safe-btn center footerBtn\"\r\n                                    onClick={() => addComment()}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketComments;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetHistoryQuery } from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\n\r\nconst TicketHistory = () => {\r\n    let parentid: number = JSON.parse(GetLocationId());\r\n    const { data, loading, error } = useGetHistoryQuery({\r\n        variables: { parentid },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper table-mb\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">\r\n                            History for Ticket #{parentid}\r\n                        </h3>\r\n                    </span>\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Property</th>\r\n                                    <th>Old Value</th>\r\n                                    <th>New Value</th>\r\n                                    <th className=\"nonessen\">Date Changed</th>\r\n                                </tr>\r\n\r\n                                {data.getHistory.map(\r\n                                    (_val, i, getHistory): JSX.Element => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"capitalize\">\r\n                                                    {\r\n                                                        getHistory[i]\r\n                                                            .propertyChanged\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {getHistory[i].oldValue}\r\n                                                </td>\r\n                                                <td className=\"capitalize\">\r\n                                                    {getHistory[i].newValue}\r\n                                                </td>\r\n                                                <td className=\"capitalize nonessen\">\r\n                                                    {getHistory[i].dateChanged}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicketHistory;\r\n","import { useGetColumnsByParentIdQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetColumns = (columnParentId: string) => {\r\n    const { data, loading } = useGetColumnsByParentIdQuery({\r\n        variables: { columnParentId },\r\n    });\r\n\r\n    if (!loading && !!data) {\r\n        let Columns = data.getColumnsByParentId;\r\n        return Columns;\r\n    }\r\n};\r\n","import { useGetTicketsTagsQuery } from \"../../generated/graphql\";\r\n\r\nconst useGetTicketTags = (ticketid: number) => {\r\n    if (!ticketid) {\r\n        ticketid = -1;\r\n    }\r\n    const { data, loading } = useGetTicketsTagsQuery({\r\n        variables: {\r\n            ticketid,\r\n        },\r\n    });\r\n\r\n    if (!loading && !!data) {\r\n        return data.getTicketsTags;\r\n    }\r\n};\r\n\r\nexport default useGetTicketTags;\r\n","import * as React from \"react\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { useGetTicketDataByIdQuery } from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\nimport { useEffect } from \"react\";\r\nimport TicketComments from \"./TicketComments\";\r\nimport TicketHistory from \"./TicketHistory\";\r\nimport { useGetColumns } from \"../QueryHooks/useGetColumns\";\r\nimport useGetTicketTags from \"../QueryHooks/useGetTicketTags\";\r\nimport M from \"materialize-css\";\r\n\r\nexport const TicketDetails: React.FC<RouteComponentProps> = ({ history }) => {\r\n    let id = GetLocationId();\r\n    let ticketid: number = JSON.parse(id);\r\n\r\n    let Columns = useGetColumns(id);\r\n    let TicketTags = useGetTicketTags(ticketid);\r\n\r\n    const { data, loading, error } = useGetTicketDataByIdQuery({\r\n        variables: { ticketid },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        elems = document.querySelectorAll(\".chips\");\r\n        M.Chips.init(elems);\r\n        let chips: any = document.getElementsByClassName(\"chip\");\r\n        if (!!chips[0]) {\r\n            for (let i = 0; i < TicketTags!.length; i++) {\r\n                if (TicketTags![i].tagColor.includes(\"$WT\")) {\r\n                    chips[i].style.color = \"#fff\";\r\n                    chips[i].style.backgroundColor = TicketTags![i].tagColor\r\n                        .split(\"$\")\r\n                        .shift();\r\n                } else {\r\n                    chips[i].style.backgroundColor = TicketTags![i].tagColor;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading || !Columns || !TicketTags) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    const mappedColumns = [] as any[];\r\n\r\n    for (let i = 0; i < Columns!.length; i = i + 2) {\r\n        let j = Math.random();\r\n        // Fix keys\r\n        mappedColumns.push(\r\n            <>\r\n                <tr key={i}>\r\n                    <th>{Columns![i].columnName}</th>\r\n                    {!!Columns[i + 1] ? (\r\n                        <th>{Columns![i + 1].columnName}</th>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </tr>\r\n\r\n                <tr key={j + i}>\r\n                    <td className=\"capitalize\">\r\n                        {Columns![i].columnData || \"NULL\"}\r\n                    </td>\r\n                    <td className=\"capitalize\">\r\n                        {!!Columns[i + 1] ? (\r\n                            Columns![i + 1].columnData || \"NULL\"\r\n                        ) : (\r\n                            <></>\r\n                        )}\r\n                    </td>\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n\r\n    let ticket: any = data.getTicketDataById;\r\n\r\n    return (\r\n        <span>\r\n            {ticket.length === 0 ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                <>\r\n                    <div className=\"container \">\r\n                        <div className=\"center-align table-wrapper\">\r\n                            <span className=\"table-header z-depth-2\">\r\n                                <h3 className=\"white-text noselect\">\r\n                                    Details For Ticket #{id}\r\n                                </h3>\r\n                            </span>\r\n\r\n                            <span className=\"table-body z-depth-1\">\r\n                                <div className=\"row\">\r\n                                    Tags =&gt;{\" \"}\r\n                                    {TicketTags.map((_val, i) => {\r\n                                        return (\r\n                                            <div\r\n                                                className=\"chip \"\r\n                                                key={i}\r\n                                                style={{\r\n                                                    backgroundColor: `${\r\n                                                        TicketTags![i].tagColor\r\n                                                    }`,\r\n                                                }}\r\n                                            >\r\n                                                {TicketTags![i].tagName}\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                                <table className=\"striped responsive\">\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>TITLE</th>\r\n                                            <th>DESCRIPTION</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.title}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.description || \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>ASSIGNED DEVELOPER</th>\r\n                                            <th>SUBMITTER</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.developer}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.submitter}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>BELONGS TO PROJECT</th>\r\n                                            <th>TICKET PRIORITY</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td>#{ticket.belongsto}</td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.priority}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <th>TICKET STATUS</th>\r\n                                            <th>TICKET TYPE</th>\r\n                                        </tr>\r\n\r\n                                        <tr>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.status}\r\n                                            </td>\r\n                                            <td className=\"capitalize\">\r\n                                                {ticket.type || \"NONE\"}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        {mappedColumns}\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className=\"divider\"></div>\r\n                                <button\r\n                                    className=\"btn left footerBtn\"\r\n                                    onClick={() => history.goBack()}\r\n                                >\r\n                                    Back\r\n                                </button>\r\n                                <a href={`#/edit-ticket:${id}`}>\r\n                                    <button className=\"btn right footerBtn\">\r\n                                        Edit\r\n                                    </button>\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TicketComments />\r\n                    <TicketHistory />\r\n                </>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n","/**\r\n * Checks if an array of Users is in a project\r\n */\r\nexport const CheckIfInProject = (userId: any, projectUsers: any) => {\r\n    var tmp = false;\r\n    let users = projectUsers.projectUsers;\r\n    for (let x = 0; x < users.length; x++) {\r\n        if (users[x].id === userId) {\r\n            tmp = true;\r\n        }\r\n    }\r\n\r\n    return tmp;\r\n};\r\n","import {\r\n    useGetUsersQuery,\r\n    useAddProjectUserMutation,\r\n    useRemoveProjectUserMutation,\r\n} from \"../../../generated/graphql\";\r\nimport React, { useEffect } from \"react\";\r\nimport { CheckIfInProject } from \"./CheckIfInProject\";\r\nimport { GetLocationId } from \"../../GetLocationId\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    projectUsers: any;\r\n}\r\n\r\nexport const USERS: React.FC<Props> = projectUsers => {\r\n    let projectid: number = JSON.parse(GetLocationId());\r\n    const { data, loading, error } = useGetUsersQuery();\r\n\r\n    const [addUser] = useAddProjectUserMutation();\r\n    const [removeUser] = useRemoveProjectUserMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\"select\");\r\n        M.FormSelect.init(elems);\r\n    });\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <td>\r\n                <div className=\"progress\">\r\n                    <div className=\"indeterminate\"></div>\r\n                </div>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    const modPersonnel = async i => {\r\n        if (CheckIfInProject(data!.getUsers![i].id, projectUsers)) {\r\n            try {\r\n                await removeUser({\r\n                    variables: {\r\n                        userid: data!.getUsers![i].id,\r\n                        projectid,\r\n                    },\r\n                });\r\n                M.toast({ html: `Removed ${data!.getUsers![i].username}` });\r\n            } catch (error) {\r\n                M.toast({ html: \"Could not remove user\" });\r\n                M.toast({ html: `Error: ${error}` });\r\n            }\r\n        } else {\r\n            try {\r\n                await addUser({\r\n                    variables: {\r\n                        projectid,\r\n                        userid: data!.getUsers![i].id,\r\n                    },\r\n                });\r\n                M.toast({ html: `Added ${data!.getUsers![i].username}` });\r\n            } catch (error) {\r\n                M.toast({ html: \"Could not add user\" });\r\n                M.toast({ html: `Error: ${error}` });\r\n            }\r\n        }\r\n\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <td>\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    className=\"browser-default\"\r\n                    value=\"default\"\r\n                    onChange={e => {\r\n                        modPersonnel(e.target.value);\r\n                    }}\r\n                >\r\n                    <option value=\"default\" disabled hidden>\r\n                        Click to add/remove\r\n                    </option>\r\n\r\n                    {data!.getUsers!.map((_val, i, getUsers) => {\r\n                        return (\r\n                            <option value={i} key={i}>\r\n                                {getUsers[i].username}\r\n                            </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </td>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGetProjectUsersByIdQuery } from \"../../../generated/graphql\";\r\nimport { USERS } from \"./UserSelect\";\r\nimport { GetLocationId } from \"../../GetLocationId\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport const EditAssigned: React.FC = () => {\r\n    const id = GetLocationId();\r\n\r\n    const { data, loading, error } = useGetProjectUsersByIdQuery({\r\n        variables: { projectid: `${id}` },\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data.getProjectUsersById.map((_val, i, getProjectUsersById) => {\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className=\"capitalize\">\r\n                            {getProjectUsersById[i].username}\r\n                        </td>\r\n                        <td className=\"capitalize nonessen\">\r\n                            {getProjectUsersById[i].email}\r\n                        </td>\r\n                        <td className=\"capitalize\">\r\n                            {getProjectUsersById[i].role}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n\r\n            <tr>\r\n                <USERS projectUsers={data.getProjectUsersById} />\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useGetProjectTicketsQuery } from \"../../../generated/graphql\";\r\nimport { GetLocationId } from \"../../GetLocationId\";\r\n\r\nexport const EditPTTable: React.FC = () => {\r\n    let projectId = GetLocationId();\r\n    const { data, loading, error } = useGetProjectTicketsQuery({\r\n        variables: {\r\n            id: `${projectId}`,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"progress\">\r\n                            <div className=\"indeterminate\"></div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {data!.getProjectTickets.map(\r\n                (_val, i, getProjectTickets): JSX.Element => {\r\n                    return (\r\n                        <tr key={i}>\r\n                            <td className=\"capitalize\">\r\n                                {getProjectTickets[i].title}\r\n                            </td>\r\n                            <td className=\"capitalize nonessen\">\r\n                                {getProjectTickets[i].submitter}\r\n                            </td>\r\n                            <td className=\"capitalize nonessen\">\r\n                                {getProjectTickets[i].developer}\r\n                            </td>\r\n                            <td className=\"capitalize\">\r\n                                {getProjectTickets[i].status}\r\n                            </td>\r\n                            <td>\r\n                                <a\r\n                                    href={`#/edit-ticket:${getProjectTickets[i].ticketid}`}\r\n                                >\r\n                                    EDIT\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            )}\r\n            <tr>\r\n                <td>\r\n                    <a href={`#/project-add:${projectId}`}>\r\n                        <button className=\"btn safe-btn white-text w-100\">\r\n                            AddTicket\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n};\r\n","export const JsFooterStyling = () => {\r\n    let doc = document;\r\n    if (window.innerWidth !== undefined) {\r\n        if (window.innerWidth < 1200) {\r\n            if (doc!.getElementById(\"backBtn\")) {\r\n                doc!.getElementById(\"backBtn\")!.classList.add(\"hide\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.remove(\"center\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.add(\"left\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.add(\"btn-ex-40\");\r\n                doc!.getElementById(\"submitBtn\")!.classList.add(\"btn-ex-40\");\r\n            }\r\n        }\r\n        if (window.innerWidth > 1200) {\r\n            if (doc!.getElementById(\"backBtn\")) {\r\n                doc!.getElementById(\"backBtn\")!.classList.remove(\"hide\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.add(\"center\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.remove(\"left\");\r\n                doc!.getElementById(\"deleteBtn\")!.classList.remove(\"btn-ex-40\");\r\n                doc!.getElementById(\"submitBtn\")!.classList.remove(\"btn-ex-40\");\r\n            }\r\n        }\r\n    }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport {\r\n    useGetProjectDataByIdQuery,\r\n    useSetProjectDescMutation,\r\n    useSetProjectTitleMutation,\r\n    useDeleteProjectMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { EditAssigned } from \"./EditAssigned\";\r\nimport { EditPTTable } from \"./EditPTTable\";\r\nimport { GetLocationId } from \"../../GetLocationId\";\r\nimport { JsFooterStyling } from \"../../../css/JsStyling\";\r\n\r\nconst EditProject: React.FC<RouteComponentProps> = ({ history }) => {\r\n    let projectid: string = GetLocationId();\r\n    const { data, loading, error } = useGetProjectDataByIdQuery({\r\n        variables: { projectid },\r\n    });\r\n\r\n    const [state, setState] = useState({\r\n        pTitle: \"\",\r\n        pDesc: \"\",\r\n    });\r\n\r\n    const [setDesc] = useSetProjectDescMutation();\r\n    const [setTitle] = useSetProjectTitleMutation();\r\n    const [delProj] = useDeleteProjectMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n\r\n        JsFooterStyling();\r\n    });\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    const updateProject = async () => {\r\n        if (!!state.pDesc || !!state.pTitle) {\r\n            try {\r\n                if (!!state.pTitle) {\r\n                    setTitle({\r\n                        variables: {\r\n                            projectid,\r\n                            title: `${state.pTitle}`,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                if (!!state.pDesc) {\r\n                    setDesc({\r\n                        variables: {\r\n                            projectid,\r\n                            description: `${state.pDesc}`,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                M.toast({ html: \"Successfully updated Project\" });\r\n\r\n                setTimeout(() => {\r\n                    history.push({\r\n                        pathname: `project-details:${projectid}`,\r\n                        state: true,\r\n                    });\r\n                }, 1000);\r\n            } catch (error) {\r\n                M.toast({ html: \"An Error occurred while updating project\" });\r\n                M.toast({ html: `Error:>> ${error}` });\r\n            }\r\n        } else {\r\n            M.toast({ html: \"No changes were made\" });\r\n        }\r\n    };\r\n\r\n    const deleteProject = async () => {\r\n        try {\r\n            await delProj({\r\n                variables: {\r\n                    projectid: JSON.parse(projectid),\r\n                },\r\n            });\r\n\r\n            M.toast({ html: \"Successfully deleted Project\" });\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1000);\r\n        } catch (error) {\r\n            M.toast({ html: \"An Error Occured while deleting project\" });\r\n            M.toast({ html: `Error:>> ${error}` });\r\n        }\r\n    };\r\n\r\n    let projects: any = data.getProjectDataById;\r\n\r\n    return (\r\n        <div className=\"detailsWrapper container-fluid\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text\">Edit Project #{projectid}</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Project Title</th>\r\n                                <th>Project Description</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"project-name\"\r\n                                            value={state.pTitle}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    pTitle: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"project-name\">\r\n                                            {state.pTitle !== \"\" ? (\r\n                                                <span>{state.pTitle}</span>\r\n                                            ) : (\r\n                                                projects.title\r\n                                            )}\r\n                                        </label>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"project-desc\"\r\n                                            value={state.pDesc}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    pDesc: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"project-desc\">\r\n                                            {state.pDesc !== \"\" ? (\r\n                                                <span>{state.pDesc}</span>\r\n                                            ) : (\r\n                                                projects.description\r\n                                            )}\r\n                                        </label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"row\">\r\n                        <span className=\"col s12 m5 l5 xl5\">\r\n                            <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className=\"white-text\">\r\n                                    Assigned Personnel\r\n                                </h3>\r\n                            </span>\r\n\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <b>User Name</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Email</b>\r\n                                        </th>\r\n                                        <th>\r\n                                            <b>Role</b>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditAssigned />\r\n                            </table>\r\n                        </span>\r\n\r\n                        <span className=\"col s12 m5 l5 xl5 offset-m2 offset-l2 offset-xl2\">\r\n                            <span className=\"tickets-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                <h3 className=\"white-text\">\r\n                                    Tickets for Project #{projectid}\r\n                                </h3>\r\n                            </span>\r\n\r\n                            <table className=\"striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <b>Title</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Submitter</b>\r\n                                        </th>\r\n                                        <th className=\"nonessen\">\r\n                                            <b>Developer</b>\r\n                                        </th>\r\n                                        <th>\r\n                                            <b>Status</b>\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <EditPTTable />\r\n                            </table>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => {\r\n                                updateProject();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>\r\n                            ARE YOU SURE YOU WANT TO DELETE PROJECT #{projectid}\r\n                        </h4>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteProject()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditProject;\r\n","import { useGetUsersQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetUsers = () => {\r\n    const { data, loading } = useGetUsersQuery();\r\n\r\n    if (!loading && !!data) {\r\n        let UsersArray = data.getUsers;\r\n        return UsersArray;\r\n    }\r\n};\r\n","import { useGetTagsQuery } from \"../../generated/graphql\";\r\n\r\nconst useGetTags = () => {\r\n    const { data, loading } = useGetTagsQuery();\r\n\r\n    if (!loading && !!data) {\r\n        return data.getTags;\r\n    }\r\n};\r\n\r\nexport default useGetTags;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useGetTicketDataByIdQuery } from \"../../../generated/graphql\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport M from \"materialize-css\";\r\nimport { GetLocationId } from \"../../GetLocationId\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../../../redux/RootReducer\";\r\nimport { JsFooterStyling } from \"../../../css/JsStyling\";\r\nimport { useGetProjects } from \"../../QueryHooks/useGetProjects\";\r\nimport { useGetUsers } from \"../../QueryHooks/useGetUsers\";\r\nimport { EditTicketMethods } from \"./EditTicketMethods\";\r\nimport { useGetColumns } from \"../../QueryHooks/useGetColumns\";\r\nimport useGetTicketTags from \"../../QueryHooks/useGetTicketTags\";\r\nimport useGetTags from \"../../QueryHooks/useGetTags\";\r\n\r\nexport const EditTicket: React.FC<RouteComponentProps> = ({ history }) => {\r\n    let ticketid: number = JSON.parse(GetLocationId()),\r\n        Projects = useGetProjects(),\r\n        Users = useGetUsers(),\r\n        Columns = useGetColumns(`${ticketid}`),\r\n        TicketTags = useGetTicketTags(ticketid),\r\n        Tags = useGetTags();\r\n\r\n    var mappedColumns = [] as any[],\r\n        relationIds = [] as number[],\r\n        newTags = [] as any[],\r\n        t = true,\r\n        tmp = [] as number[];\r\n\r\n    const { data, loading, error } = useGetTicketDataByIdQuery({\r\n        variables: { ticketid },\r\n    });\r\n\r\n    const user = useSelector<State, User>(state => state.user!),\r\n        [state, setState] = useState({\r\n            status: \"\",\r\n            type: \"\",\r\n            title: \"\",\r\n            description: \"\",\r\n            priority: \"\",\r\n            projectid: \"\",\r\n            parentTitle: \"\",\r\n            assignedTo: \"\",\r\n            developer: \"\",\r\n            new: false,\r\n            columns: [] as string[],\r\n            columnIds: [] as string[],\r\n            newColumnTitle: \"\",\r\n            newColumnData: \"\",\r\n        });\r\n\r\n    const { updateTicket, deleteTicket } = EditTicketMethods(`${ticketid}`);\r\n\r\n    const onChipDeleteCB = (_e, i) => {\r\n        let tagName = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n        for (let j = 0; j < TicketTags!.length; j++) {\r\n            if (TicketTags![j].tagName === tagName) {\r\n                relationIds.push(TicketTags![j].id);\r\n                break;\r\n            }\r\n        }\r\n\r\n        let index;\r\n        for (let j = 0; j < newTags.length; j++) {\r\n            if (newTags[j].tagName === tagName) {\r\n                index = j;\r\n                break;\r\n            }\r\n        }\r\n        newTags.splice(index, 1);\r\n    };\r\n\r\n    const onChipAddCB = (_e, i) => {\r\n        let tagName = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n        if (tagName.includes(\"#\")) {\r\n            tagName = tagName.slice(0, tagName.indexOf(\"#\"));\r\n        }\r\n        if (tagName.includes(\"$WT\")) {\r\n            tagName = tagName.split(\"$\").shift();\r\n        }\r\n\r\n        //get User defined color if it exist\r\n        let tagColor =\r\n            i.innerHTML.slice(\r\n                i.innerHTML.indexOf(\"#\"),\r\n                i.innerHTML.indexOf(\"<\")\r\n            ) || \"#e4e4e4\";\r\n\r\n        //if it does not exist check if a color exist within existising Tags\r\n        if (tagColor === \"#e4e4e4\") {\r\n            for (let i = 0; i < Tags!.length; i++) {\r\n                if (Tags![i].tagName === tagName) {\r\n                    tagColor = Tags![i].tagColor;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tagColor.includes(\"$WT\")) {\r\n            i.style.color = \"#fff\";\r\n        }\r\n\r\n        if (tagColor.includes(\"$WT\")) {\r\n            i.style.backgroundColor = tagColor.split(\"$\").shift();\r\n        } else {\r\n            i.style.backgroundColor = tagColor;\r\n        }\r\n        i.innerHTML = `${tagName}<i class=\"material-icons close\">close</i>`;\r\n        newTags.push({ tagName, tagColor });\r\n    };\r\n\r\n    useEffect(() => {\r\n        let autoCompleteData = {},\r\n            initialChips = [] as any[];\r\n\r\n        if (!!Tags) {\r\n            Tags.forEach((_val, i) => {\r\n                autoCompleteData[`${Tags![i].tagName}`] = null;\r\n            });\r\n        }\r\n\r\n        if (!!TicketTags) {\r\n            TicketTags.forEach((_val, i) => {\r\n                initialChips[i] = { tag: TicketTags![i].tagName };\r\n            });\r\n        }\r\n\r\n        var elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n        elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        elems = document.querySelectorAll(\".tooltipped\");\r\n        M.Tooltip.init(elems);\r\n        elems = document.querySelectorAll(\".chips\");\r\n\r\n        let options;\r\n        if (initialChips.length !== 0) {\r\n            options = {\r\n                autocompleteOptions: {\r\n                    data: autoCompleteData,\r\n                },\r\n                data: initialChips,\r\n                onChipDelete: onChipDeleteCB,\r\n                onChipAdd: onChipAddCB,\r\n            };\r\n        } else {\r\n            options = {\r\n                autocompleteOptions: {\r\n                    data: autoCompleteData,\r\n                },\r\n                onChipDelete: onChipDeleteCB,\r\n                onChipAdd: onChipAddCB,\r\n            };\r\n        }\r\n        M.Chips.init(elems, options);\r\n        JsFooterStyling();\r\n        let chips: any = document.getElementsByClassName(\"chip\");\r\n        if (!!chips[0]) {\r\n            for (let i = 0; i < TicketTags!.length; i++) {\r\n                if (TicketTags![i].tagColor.includes(\"$WT\")) {\r\n                    chips[i].style.color = \"#fff\";\r\n                    chips[i].style.backgroundColor = TicketTags![i].tagColor\r\n                        .split(\"$\")\r\n                        .shift();\r\n                } else {\r\n                    chips[i].style.backgroundColor = TicketTags![i].tagColor;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    if (loading || !Projects || !Users || !Columns || !TicketTags || !Tags) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/manage-projects\" />;\r\n    }\r\n\r\n    window.onresize = () => {\r\n        JsFooterStyling();\r\n    };\r\n\r\n    for (let i in Columns) {\r\n        tmp.push(Columns![i].columnId);\r\n    }\r\n\r\n    let columnIds: string = JSON.stringify(tmp);\r\n\r\n    for (let i = 0; i < Columns!.length; i = i + 2) {\r\n        if (!Columns[i + 1]) {\r\n            t = false;\r\n        }\r\n\r\n        mappedColumns.push(\r\n            <>\r\n                <tr key={i}>\r\n                    <th>{Columns![i].columnName}</th>\r\n                    {!!Columns[i + 1] ? (\r\n                        <th>{Columns![i + 1].columnName}</th>\r\n                    ) : (\r\n                        <td>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id={`add-column`}\r\n                                    type=\"text\"\r\n                                    value={state.newColumnTitle}\r\n                                    onChange={e =>\r\n                                        setState({\r\n                                            ...state,\r\n                                            newColumnTitle: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor={`add-column`}>\r\n                                    Add a title\r\n                                </label>\r\n                            </div>\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n                <tr key={i + 1}>\r\n                    <td>\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id={`custom-column:${i}`}\r\n                                type=\"text\"\r\n                                value={state.columns[i]}\r\n                                onChange={e => {\r\n                                    let columns = state.columns;\r\n                                    columns[i] = e.target.value;\r\n\r\n                                    setState({\r\n                                        ...state,\r\n                                        columns,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <label htmlFor={`custom-column:${i}`}>\r\n                                {Columns![i].columnData || \"NULL\"}\r\n                            </label>\r\n                        </div>\r\n                    </td>\r\n\r\n                    {!!Columns[i + 1] ? (\r\n                        <td>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id={`custom-column:${i + 1}`}\r\n                                    type=\"text\"\r\n                                    value={state.columns[i + 1]}\r\n                                    onChange={e => {\r\n                                        let columns = state.columns;\r\n                                        columns[i + 1] = e.target.value;\r\n\r\n                                        setState({\r\n                                            ...state,\r\n                                            columns,\r\n                                        });\r\n                                    }}\r\n                                />\r\n                                <label htmlFor={`custom-column:${i + 1}`}>\r\n                                    {Columns![i + 1].columnData || \"NULL\"}\r\n                                </label>\r\n                            </div>\r\n                        </td>\r\n                    ) : (\r\n                        <td>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id={`add-column`}\r\n                                    type=\"text\"\r\n                                    value={state.newColumnData}\r\n                                    onChange={e =>\r\n                                        setState({\r\n                                            ...state,\r\n                                            newColumnData: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor={`add-column`}>\r\n                                    Add some data\r\n                                </label>\r\n                            </div>\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (t) {\r\n        mappedColumns.push(\r\n            <>\r\n                <tr>\r\n                    <th>\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id={`add-column`}\r\n                                type=\"text\"\r\n                                value={state.newColumnTitle}\r\n                                onChange={e =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        newColumnTitle: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                            <label htmlFor={`add-column`}>Add a title</label>\r\n                        </div>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                                id={`add-column`}\r\n                                type=\"text\"\r\n                                value={state.newColumnData}\r\n                                onChange={e =>\r\n                                    setState({\r\n                                        ...state,\r\n                                        newColumnData: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                            <label htmlFor={`add-column`}>Add some data</label>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n\r\n    let ticket = data.getTicketDataById!;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text noselect\">\r\n                        Edit Ticket #{ticketid}\r\n                    </h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    tags:\r\n                    {/* eslint-disable-next-line */}\r\n                    <a\r\n                        className=\"tooltipped\"\r\n                        data-position=\"top\"\r\n                        data-tooltip=\"Add #hex after your tag to add a backgroundColor then $WT for white text. Ex. Tag1#9017d7$WT\"\r\n                    >\r\n                        <div className=\"chips chips-initial\" id=\"chips-initial\">\r\n                            <input className=\"custom-class\" />\r\n                        </div>\r\n                    </a>\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            {state.new ? (\r\n                                                <span>{state.title}</span>\r\n                                            ) : (\r\n                                                ticket.title || (\r\n                                                    <span>No Title</span>\r\n                                                )\r\n                                            )}\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                {state.new ? (\r\n                                                    <span>\r\n                                                        {state.description}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    ticket.description || (\r\n                                                        <span>\r\n                                                            No description\r\n                                                        </span>\r\n                                                    )\r\n                                                )}\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGNED DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {user.role === \"admin\" ||\r\n                                    user.role === \"project-manager\" ? (\r\n                                        <span>\r\n                                            <a\r\n                                                className=\"dropdown-trigger btn manage-dropdown\"\r\n                                                href=\"#!\"\r\n                                                data-target=\"dropdowndev\"\r\n                                            >\r\n                                                {state.developer !== \"\" ? (\r\n                                                    <span>\r\n                                                        {state.developer}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    (\r\n                                                        <span>\r\n                                                            {ticket.developer}\r\n                                                        </span>\r\n                                                    ) || <span>No Status</span>\r\n                                                )}\r\n                                            </a>\r\n                                            <ul\r\n                                                id=\"dropdowndev\"\r\n                                                className=\"dropdown-content\"\r\n                                            >\r\n                                                {Users!.map((_val, i) => {\r\n                                                    return (\r\n                                                        <li key={i}>\r\n                                                            <button\r\n                                                                className=\"btnDropdown\"\r\n                                                                name={`${\r\n                                                                    Users![i]\r\n                                                                        .username\r\n                                                                }`}\r\n                                                                onClick={e =>\r\n                                                                    setState({\r\n                                                                        ...state,\r\n                                                                        developer: Users![\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .username,\r\n                                                                    })\r\n                                                                }\r\n                                                            >\r\n                                                                {\r\n                                                                    Users![i]\r\n                                                                        .username\r\n                                                                }\r\n                                                            </button>\r\n                                                        </li>\r\n                                                    );\r\n                                                })}\r\n                                            </ul>\r\n                                        </span>\r\n                                    ) : (\r\n                                        <span className=\"capitalize\">\r\n                                            {ticket.developer}\r\n                                        </span>\r\n                                    )}\r\n                                </td>\r\n                                <td>\r\n                                    <span className=\"capitalize\">\r\n                                        {ticket.submitter}\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {user.role === \"developer\" ? (\r\n                                    <td>{ticket.title}</td>\r\n                                ) : (\r\n                                    <td>\r\n                                        {/* eslint-disable-next-line */}\r\n                                        <a\r\n                                            className=\"dropdown-trigger btn manage-dropdown\"\r\n                                            data-target=\"dropdownassign\"\r\n                                        >\r\n                                            {state.parentTitle === \"\" ? (\r\n                                                // eslint-disable-next-line\r\n                                                Projects.map((_val, i) => {\r\n                                                    if (\r\n                                                        `${\r\n                                                            Projects![i]\r\n                                                                .projectid\r\n                                                        }` ===\r\n                                                        `${ticket.belongsto!}`\r\n                                                    ) {\r\n                                                        return Projects![i]\r\n                                                            .title;\r\n                                                    }\r\n                                                })\r\n                                            ) : (\r\n                                                <>{state.parentTitle}</>\r\n                                            )}\r\n                                        </a>\r\n                                        <ul\r\n                                            id=\"dropdownassign\"\r\n                                            className=\"dropdown-content\"\r\n                                        >\r\n                                            {!!Projects.map\r\n                                                ? Projects.map((_val, i) => {\r\n                                                      return (\r\n                                                          <li key={i}>\r\n                                                              <button\r\n                                                                  className=\"btnDropdown\"\r\n                                                                  onClick={() =>\r\n                                                                      setState({\r\n                                                                          ...state,\r\n                                                                          projectid: `${Projects![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .projectid!}`,\r\n                                                                          parentTitle: Projects![\r\n                                                                              i\r\n                                                                          ]\r\n                                                                              .title!,\r\n                                                                      })\r\n                                                                  }\r\n                                                              >\r\n                                                                  {\r\n                                                                      Projects![\r\n                                                                          i\r\n                                                                      ].title\r\n                                                                  }\r\n                                                              </button>\r\n                                                          </li>\r\n                                                      );\r\n                                                  })\r\n                                                : null}\r\n                                        </ul>\r\n                                    </td>\r\n                                )}\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        {state.priority !== \"\" ? (\r\n                                            <span>{state.priority}</span>\r\n                                        ) : (\r\n                                            ticket.priority || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"low\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"medium\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"high\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            ticket.status || (\r\n                                                <span>No Status</span>\r\n                                            )\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"open\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"closed\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"closed\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                name=\"on-hold\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"on-hold\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        {state.type !== \"\" ? (\r\n                                            <span>{state.type}</span>\r\n                                        ) : (\r\n                                            ticket.type || <span>No Type</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"bugs/errors\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"features\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            {mappedColumns}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            id=\"backBtn\"\r\n                            className=\"btn left footerBtn\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            Back\r\n                        </button>\r\n\r\n                        <button\r\n                            id=\"deleteBtn\"\r\n                            className=\"btn center danger-btn modal-trigger\"\r\n                            data-target=\"modal1\"\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n\r\n                        <button\r\n                            id=\"submitBtn\"\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => {\r\n                                let tmp = true,\r\n                                    tagsTmp = false;\r\n\r\n                                if (\r\n                                    !!state.newColumnTitle ||\r\n                                    !!state.newColumnData\r\n                                ) {\r\n                                    if (!state.newColumnTitle) {\r\n                                        M.toast({\r\n                                            html: `Column title cannot be empty`,\r\n                                        });\r\n                                        tmp = false;\r\n                                    } else if (!state.newColumnData) {\r\n                                        M.toast({\r\n                                            html: `Column data cannot be empty`,\r\n                                        });\r\n                                        tmp = false;\r\n                                    }\r\n                                }\r\n\r\n                                if (!tmp) return;\r\n\r\n                                for (let y = 0; y < newTags.length; y++) {\r\n                                    let tag = newTags[y];\r\n\r\n                                    if (!tag.tagName) {\r\n                                        tagsTmp = true;\r\n                                        break;\r\n                                    }\r\n\r\n                                    if (tag.tagName.search(/[^\\w]/g) !== -1) {\r\n                                        tagsTmp = true;\r\n                                        break;\r\n                                    }\r\n\r\n                                    if (\r\n                                        tag.tagColor.search(/[^\\w#$]/g) !== -1\r\n                                    ) {\r\n                                        tagsTmp = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\r\n                                if (tagsTmp) {\r\n                                    M.toast({\r\n                                        html: \"Tags cannot: \",\r\n                                    });\r\n                                    M.toast({\r\n                                        html:\r\n                                            \"contain any special characters excluding: #$\",\r\n                                    });\r\n                                    M.toast({\r\n                                        html: \"start with # or $\",\r\n                                    });\r\n\r\n                                    return;\r\n                                }\r\n\r\n                                if (tmp && !tagsTmp) {\r\n                                    updateTicket(\r\n                                        state,\r\n                                        setState,\r\n                                        ticket,\r\n                                        user,\r\n                                        columnIds,\r\n                                        relationIds,\r\n                                        newTags\r\n                                    );\r\n                                }\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"modal1\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>\r\n                            ARE YOU SURE YOU WANT TO DELETE TICKET #{ticketid}\r\n                        </h4>\r\n                        <p>This action cannot be undone</p>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            CANCEL\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => deleteTicket()}\r\n                        >\r\n                            DELETE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"tagsModal\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        all tags\r\n                        <br />\r\n                        create a tag button\r\n                    </div>\r\n\r\n                    <div className=\"modal-footer\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useGetProjectDataQuery } from \"../../generated/graphql\";\r\n\r\nexport const useGetProjects = () => {\r\n    const { data, loading } = useGetProjectDataQuery();\r\n\r\n    if (!loading && !!data) {\r\n        let Projects = data.getProjectData;\r\n        return Projects;\r\n    }\r\n};\r\n","import { useHistory } from \"react-router\";\r\nimport {\r\n    useSetTicketStatusMutation,\r\n    useSetTicketTypeMutation,\r\n    useSetTicketTitleMutation,\r\n    useSetTicketDescMutation,\r\n    useSetTicketPriorityMutation,\r\n    useSetTicketProjectMutation,\r\n    useDeleteTicketMutation,\r\n    useAddTicketHistoryMutation,\r\n    useSetTicketDeveloperMutation,\r\n    useSendNotificationByUsernameMutation,\r\n    useUpdateColumnsMutation,\r\n    useCreateColumnMutation,\r\n    useDeleteTagFromTicketMutation,\r\n    useCreateTagMutation,\r\n} from \"../../../generated/graphql\";\r\n\r\nexport const EditTicketMethods = (ticketid: string) => {\r\n    let history = useHistory();\r\n    const [setStatus] = useSetTicketStatusMutation(),\r\n        [setType] = useSetTicketTypeMutation(),\r\n        [setTitle] = useSetTicketTitleMutation(),\r\n        [setDesc] = useSetTicketDescMutation(),\r\n        [setPriority] = useSetTicketPriorityMutation(),\r\n        [SetTicketProject] = useSetTicketProjectMutation(),\r\n        [DeleteThisTicket] = useDeleteTicketMutation(),\r\n        [addHistory] = useAddTicketHistoryMutation(),\r\n        [setDeveloper] = useSetTicketDeveloperMutation(),\r\n        [sendNotification] = useSendNotificationByUsernameMutation(),\r\n        [createColumn] = useCreateColumnMutation(),\r\n        [updateColumns] = useUpdateColumnsMutation(),\r\n        [REMOVE_TAG] = useDeleteTagFromTicketMutation(),\r\n        [CREATE_TAG] = useCreateTagMutation();\r\n\r\n    const updateTicket = async (\r\n        state,\r\n        setState,\r\n        ticket,\r\n        user,\r\n        columnIds: string,\r\n        relationIds?: number[],\r\n        newTags?: any[]\r\n    ) => {\r\n        let updated = false;\r\n        let updated2 = true; // used to overwrite default notification\r\n        var parentid: number = JSON.parse(ticketid);\r\n\r\n        if (\r\n            !state.title &&\r\n            !state.description &&\r\n            !state.status &&\r\n            !state.priority &&\r\n            !state.projectid &&\r\n            !state.type &&\r\n            !state.developer &&\r\n            !state.newColumnTitle &&\r\n            !state.newColumnData &&\r\n            state.columns.length === 0 &&\r\n            (!relationIds || relationIds.length === 0) &&\r\n            (!newTags || newTags.length === 0)\r\n        ) {\r\n            M.toast({ html: `No changes were made` });\r\n        } else {\r\n            try {\r\n                if (!!state.title) {\r\n                    let oldValue: string = ticket.title!;\r\n                    setState({ ...state, new: true });\r\n                    if (!!state.title) {\r\n                        await setTitle({\r\n                            variables: {\r\n                                ticketid: `${ticketid}`,\r\n                                title: `${state.title}`,\r\n                            },\r\n                        });\r\n                        addHistory({\r\n                            variables: {\r\n                                propertyChanged: \"TicketTitle\",\r\n                                newValue: state.title,\r\n                                oldValue,\r\n                                parentid,\r\n                            },\r\n                        });\r\n\r\n                        updated = true;\r\n                    }\r\n                }\r\n\r\n                if (!!state.description) {\r\n                    await setDesc({\r\n                        variables: {\r\n                            ticketid: `${ticketid}`,\r\n                            desc: `${state.description}`,\r\n                        },\r\n                    });\r\n                    let oldValue: string = ticket.description!;\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketDescription\",\r\n                            newValue: state.description,\r\n                            oldValue,\r\n                            parentid,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n\r\n                if (!!state.status) {\r\n                    let oldValue: string = ticket.status!;\r\n                    await setStatus({\r\n                        variables: {\r\n                            ticketid: `${ticketid}`,\r\n                            status: `${state.status}`,\r\n                        },\r\n                    });\r\n                    await addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketStatus\",\r\n                            oldValue,\r\n                            parentid,\r\n                            newValue: state.status,\r\n                        },\r\n                    });\r\n\r\n                    if (state.status === \"closed\") {\r\n                        await sendNotification({\r\n                            variables: {\r\n                                message: `Your Ticket#${ticketid} has been closed *T${ticketid}`,\r\n                                username: ticket.submitter,\r\n                            },\r\n                        });\r\n                        updated2 = false;\r\n                    } else {\r\n                        updated = true;\r\n                    }\r\n                }\r\n\r\n                if (!!state.priority) {\r\n                    let oldValue: string = ticket.priority!;\r\n                    await setPriority({\r\n                        variables: {\r\n                            ticketid: `${ticketid}`,\r\n                            priority: `${state.priority}`,\r\n                        },\r\n                    });\r\n\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketPriority\",\r\n                            oldValue,\r\n                            parentid,\r\n                            newValue: state.priority,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n\r\n                if (!!state.type) {\r\n                    let oldValue: string = ticket.type!;\r\n                    await setType({\r\n                        variables: {\r\n                            ticketid: `${ticketid}`,\r\n                            type: `${state.type}`,\r\n                        },\r\n                    });\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"TicketType\",\r\n                            oldValue,\r\n                            parentid,\r\n                            newValue: state.type,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n\r\n                if (!!state.projectid) {\r\n                    let oldValue: string = ticket.belongsto;\r\n                    await SetTicketProject({\r\n                        variables: {\r\n                            ticketid,\r\n                            projectid: state.projectid,\r\n                        },\r\n                    });\r\n\r\n                    addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"ParentOfTicket\",\r\n                            oldValue: `ProjectId: ${oldValue}`,\r\n                            parentid,\r\n                            newValue: `ProjectId: ${state.projectid}`,\r\n                        },\r\n                    });\r\n\r\n                    updated = true;\r\n                }\r\n\r\n                if (!!state.developer) {\r\n                    let oldValue: string = ticket.developer;\r\n                    if (\r\n                        user.role === \"admin\" ||\r\n                        user.role === \"project-manager\"\r\n                    ) {\r\n                        await setDeveloper({\r\n                            variables: {\r\n                                ticketid,\r\n                                developer: state.developer,\r\n                            },\r\n                        });\r\n\r\n                        addHistory({\r\n                            variables: {\r\n                                propertyChanged: \"AssignedDeveloper\",\r\n                                oldValue,\r\n                                parentid,\r\n                                newValue: state.developer,\r\n                            },\r\n                        });\r\n\r\n                        updated = true;\r\n                    }\r\n                }\r\n\r\n                if (!!state.newColumnTitle && !!state.newColumnData) {\r\n                    await createColumn({\r\n                        variables: {\r\n                            columnName: state.newColumnTitle,\r\n                            columnParentId: `${parentid}`,\r\n                            columnData: state.newColumnData,\r\n                        },\r\n                    });\r\n\r\n                    await addHistory({\r\n                        variables: {\r\n                            propertyChanged: \"NewColumn\",\r\n                            oldValue: \"N/A\",\r\n                            parentid,\r\n                            newValue: state.newColumnTitle,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                if (!!state.columns) {\r\n                    // history is added serverside\r\n                    await updateColumns({\r\n                        variables: {\r\n                            columnIds,\r\n                            newValues: JSON.stringify(state.columns),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                if (!!relationIds && relationIds.length !== 0) {\r\n                    for (let i = 0; i < relationIds.length; i++) {\r\n                        let tmp = await REMOVE_TAG({\r\n                            variables: {\r\n                                relationId: relationIds[i],\r\n                            },\r\n                        });\r\n\r\n                        if (!tmp) {\r\n                            i = relationIds.length;\r\n                            M.toast({ html: \"An error occured\" });\r\n                            M.toast({ html: \"Please try again later\" });\r\n                            setTimeout(() => {\r\n                                history.push({\r\n                                    pathname: `ticket-details:${ticketid}`,\r\n                                    state: true,\r\n                                });\r\n                            }, 1000);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!!newTags && newTags.length !== 0) {\r\n                    for (let i = 0; i < newTags.length; i++) {\r\n                        await CREATE_TAG({\r\n                            variables: {\r\n                                tagName: newTags[i].tagName,\r\n                                tagColor: newTags[i].tagColor,\r\n                                ticketid: ticket.ticketid,\r\n                            },\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (updated && updated2) {\r\n                    await sendNotification({\r\n                        variables: {\r\n                            message: `Your Ticket#${ticketid} has been updated *T${ticketid}`,\r\n                            username: ticket.submitter,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                M.toast({ html: \"Successfully updated Ticket\" });\r\n                setTimeout(() => {\r\n                    history.push({\r\n                        pathname: `ticket-details:${ticketid}`,\r\n                        state: true,\r\n                    });\r\n                }, 1000);\r\n            } catch (err) {\r\n                M.toast({ html: \"Could not update Ticket\" });\r\n                M.toast({ html: `Error:>> ${err}` });\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteTicket = async () => {\r\n        try {\r\n            await DeleteThisTicket({\r\n                variables: {\r\n                    ticketid,\r\n                },\r\n            });\r\n\r\n            M.toast({ html: \"successfully deleted ticket\" });\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1000);\r\n        } catch (error) {\r\n            M.toast({ html: \"Could not delete this ticket\" });\r\n            M.toast({ html: `Error:>> ${error}` });\r\n        }\r\n    };\r\n\r\n    return {\r\n        updateTicket,\r\n        deleteTicket,\r\n    };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../redux/RootReducer\";\r\nimport { User } from \"../../redux/RootReducer\";\r\nimport { useGetUsers } from \"../QueryHooks/useGetUsers\";\r\nimport {\r\n    useCreateTicketMutation,\r\n    useSendNot_CreateTicketMutation,\r\n} from \"../../generated/graphql\";\r\nimport { GetLocationId } from \"../GetLocationId\";\r\n\r\nconst AddTicketToProject: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const id = GetLocationId();\r\n    const UsersArray = useGetUsers();\r\n\r\n    const user = useSelector<State, User>(state => state.user!);\r\n    const [state, setState] = useState({\r\n        status: \"\",\r\n        type: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"\",\r\n        dev: \"\",\r\n    });\r\n\r\n    const [Submit] = useCreateTicketMutation();\r\n    const [SendNotification] = useSendNot_CreateTicketMutation();\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    if (!UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const addHide = (elms: string[]) => {\r\n        elms.forEach((_val, i) => {\r\n            document.getElementById(elms[i])?.classList.add(\"hide\");\r\n        });\r\n    };\r\n\r\n    const toggleHide = (elms: string[]) => {\r\n        elms.forEach((_val, i) => {\r\n            document.getElementById(elms[i])?.classList.toggle(\"hide\");\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (\r\n            state.status === \"\" ||\r\n            state.type === \"\" ||\r\n            state.title === \"\" ||\r\n            state.description === \"\" ||\r\n            state.priority === \"\"\r\n        ) {\r\n            M.toast({ html: \"Missing Data\" });\r\n            addHide([\r\n                \"dev-hpr-br\",\r\n                \"dev-hpr\",\r\n                \"status-hpr-br\",\r\n                \"status-hpr\",\r\n                \"type-hpr-br\",\r\n                \"type-hpr\",\r\n                \"pri-hpr-br\",\r\n                \"pri-hpr\",\r\n            ]);\r\n\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n\r\n            if (state.type === \"\") {\r\n                toggleHide([\"type-hpr-br\", \"type-hpr\"]);\r\n            }\r\n\r\n            if (state.status === \"\") {\r\n                toggleHide([\"status-hpr-br\", \"status-hpr\"]);\r\n            }\r\n\r\n            if (state.dev === \"\") {\r\n                toggleHide([\"dev-hpr-br\", \"dev-hpr\"]);\r\n            }\r\n\r\n            if (state.priority === \"\") {\r\n                toggleHide([\"pri-hpr-br\", \"pri-hpr\"]);\r\n            }\r\n        } else {\r\n            try {\r\n                await Submit({\r\n                    variables: {\r\n                        title: state.title,\r\n                        description: state.description,\r\n                        belongsto: id,\r\n                        developer: state.dev,\r\n                        priority: state.priority,\r\n                        status: state.status,\r\n                        submitter: user.username,\r\n                        type: state.type,\r\n                    },\r\n                });\r\n\r\n                await SendNotification({\r\n                    variables: {\r\n                        projectid: id,\r\n                    },\r\n                });\r\n\r\n                M.toast({ html: `Successfully submitted Ticket` });\r\n                setTimeout(() => {\r\n                    history.push({\r\n                        pathname: `edit-project:${id}`,\r\n                        state: true,\r\n                    });\r\n                }, 1000);\r\n            } catch (error) {\r\n                M.toast({ html: \"Could not submit Ticket\" });\r\n                M.toast({ html: `Error:>> ${error}` });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text noselect\">Create Ticket</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table className=\"striped responsive\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>TITLE</th>\r\n                                <th>DESCRIPTION</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"title\"\r\n                                            className=\"validate\"\r\n                                            value={state.title}\r\n                                            onChange={e =>\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    title: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"title\">\r\n                                            ADD A TITLE\r\n                                        </label>\r\n                                        <span\r\n                                            className=\"helper-text\"\r\n                                            data-error=\"Please enter a title\"\r\n                                        ></span>\r\n                                    </div>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <form>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"desc\"\r\n                                                className=\"validate\"\r\n                                                value={state.description}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        description:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"desc\">\r\n                                                ADD A DESCRIPTION\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a Description\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </form>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>ASSIGN A DEVELOPER</th>\r\n                                <th>SUBMITTER</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        data-target=\"dropdownDev\"\r\n                                    >\r\n                                        {state.dev !== \"\" ? (\r\n                                            <span>{state.dev}</span>\r\n                                        ) : (\r\n                                            <span>Assign a Developer</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownDev\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        {UsersArray!.map(\r\n                                            (_val, i): JSX.Element => {\r\n                                                let dev =\r\n                                                    UsersArray[i].username;\r\n                                                return (\r\n                                                    <li key={i}>\r\n                                                        <button\r\n                                                            className=\"btnDropdown\"\r\n                                                            name={dev}\r\n                                                            onClick={() =>\r\n                                                                setState({\r\n                                                                    ...state,\r\n                                                                    dev,\r\n                                                                })\r\n                                                            }\r\n                                                        >\r\n                                                            {dev}\r\n                                                        </button>\r\n                                                    </li>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"dev-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"dev-hpr\"\r\n                                    >\r\n                                        Please Assign a Developer\r\n                                    </span>\r\n                                </td>\r\n                                <td>{user.username} (Me)</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>BELONGS TO PROJECT</th>\r\n                                <th>TICKET PRIORITY</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>#{id}</td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownpriority\"\r\n                                    >\r\n                                        <span>\r\n                                            {state.priority !== \"\" ? (\r\n                                                state.priority\r\n                                            ) : (\r\n                                                <>Ticket Priority</>\r\n                                            )}\r\n                                        </span>\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownpriority\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"low\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Low\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"medium\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Medium\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        priority: \"high\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                High\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"pri-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"pri-hpr\"\r\n                                    >\r\n                                        Please Assign a Ticket Priority\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>TICKET STATUS</th>\r\n                                <th>TICKET TYPE</th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdownstatus\"\r\n                                    >\r\n                                        {state.status !== \"\" ? (\r\n                                            <span>{state.status}</span>\r\n                                        ) : (\r\n                                            <span>Set Ticket Status</span>\r\n                                        )}\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdownstatus\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"open\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Open\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"closed\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Closed\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        status: \"on-hold\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                On Hold\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"status-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"status-hpr\"\r\n                                    >\r\n                                        Please Select a Ticket Status\r\n                                    </span>\r\n                                </td>\r\n\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        className=\"dropdown-trigger btn manage-dropdown\"\r\n                                        href=\"#!\"\r\n                                        data-target=\"dropdowntype\"\r\n                                    >\r\n                                        <span>\r\n                                            {state.type !== \"\" ? (\r\n                                                state.type\r\n                                            ) : (\r\n                                                <>Set Ticket Type</>\r\n                                            )}\r\n                                        </span>\r\n                                    </a>\r\n                                    <ul\r\n                                        id=\"dropdowntype\"\r\n                                        className=\"dropdown-content\"\r\n                                    >\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"bugs/errors\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Bugs/Errors\r\n                                            </button>\r\n                                        </li>\r\n                                        <li>\r\n                                            <button\r\n                                                className=\"btnDropdown\"\r\n                                                onClick={() =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        type: \"features\",\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                Features\r\n                                            </button>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br\r\n                                        className=\"helper-br hide\"\r\n                                        id=\"type-hpr-br\"\r\n                                    />\r\n                                    <span\r\n                                        className=\"fake-helper-text red-text hide\"\r\n                                        id=\"type-hpr\"\r\n                                    >\r\n                                        Please Select a Ticket Type\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <div className=\"row\">\r\n                        <button\r\n                            className=\"btn left footerBtn modal-trigger\"\r\n                            data-target=\"cancelModal\"\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        <button\r\n                            className=\"btn right safe-btn\"\r\n                            onClick={() => handleSubmit()}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </span>\r\n\r\n                <div id=\"cancelModal\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                        <h6>All of your Data will be erased</h6>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                            Stay On Page\r\n                        </button>\r\n                        <button\r\n                            className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                            onClick={() => history.goBack()}\r\n                        >\r\n                            CANCEL\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTicketToProject;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGetUsersQuery } from \"../../../generated/graphql\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { useGetUsers } from \"../../QueryHooks/useGetUsers\";\r\nimport { CreateProjectMethods } from \"./CreateProjectMethods\";\r\n\r\nexport const CreateProject: React.FC<RouteComponentProps> = ({ history }) => {\r\n    const { data, loading, error } = useGetUsersQuery();\r\n    const UsersArray = useGetUsers();\r\n\r\n    const [state, setState] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        userids: [] as number[],\r\n        usernames: [] as string[],\r\n        userString: \"\",\r\n    });\r\n\r\n    const { handleSubmit, addUser } = CreateProjectMethods(state, setState);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading || !UsersArray) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"#/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detailsWrapper container-fluid\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Create Project</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>TITLE</th>\r\n                                    <th>DESCRIPTION</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"input-field\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                id=\"title\"\r\n                                                className=\"validate\"\r\n                                                value={state.title}\r\n                                                onChange={e =>\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        title: e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                            <label htmlFor=\"title\">\r\n                                                ADD A TITLE\r\n                                            </label>\r\n                                            <span\r\n                                                className=\"helper-text\"\r\n                                                data-error=\"Please enter a title\"\r\n                                            ></span>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <form>\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    id=\"desc\"\r\n                                                    className=\"validate\"\r\n                                                    value={state.description}\r\n                                                    onChange={e =>\r\n                                                        setState({\r\n                                                            ...state,\r\n                                                            description:\r\n                                                                e.target.value,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"desc\">\r\n                                                    ADD A DESCRIPTION\r\n                                                </label>\r\n                                                <span\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\"Please enter a Description\"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <div className=\"row\">\r\n                            <span className=\"col s5 m5 l5 xl5\">\r\n                                <span className=\"personnel-header z-depth-2 col s12 m12 l12 xl12\">\r\n                                    <h3 className=\"white-text\">\r\n                                        Assign Personnel\r\n                                    </h3>\r\n                                </span>\r\n\r\n                                <table className=\"responsive-table striped\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"centered\">\r\n                                                <b>User Name</b>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {state.usernames.map(\r\n                                            (_val, i): JSX.Element => {\r\n                                                return (\r\n                                                    <tr key={i}>\r\n                                                        {state.usernames[i]}\r\n                                                    </tr>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className=\"input-field col s12\">\r\n                                    <select className=\"browser-default\">\r\n                                        <option value=\"\" disabled selected>\r\n                                            Click to add/remove\r\n                                        </option>\r\n                                        {data.getUsers!.map(\r\n                                            (_val, i, getUsers) => {\r\n                                                return (\r\n                                                    <option\r\n                                                        key={i}\r\n                                                        onClick={() => {\r\n                                                            addUser(\r\n                                                                getUsers[i].id,\r\n                                                                getUsers[i]\r\n                                                                    .username\r\n                                                            );\r\n                                                        }}\r\n                                                    >\r\n                                                        {getUsers[i].username}\r\n                                                    </option>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </select>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <button\r\n                                className=\"btn left footerBtn modal-trigger modal-trigger\"\r\n                                data-target=\"cancelModal\"\r\n                            >\r\n                                Back\r\n                            </button>\r\n                            <button\r\n                                className=\"btn right safe-btn\"\r\n                                onClick={() => handleSubmit()}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                    </span>\r\n\r\n                    <div id=\"cancelModal\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>ARE YOU SURE YOU WANT TO CANCEL?</h4>\r\n                            <h6>All of your Data will be erased</h6>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"modal-close waves-effect waves-green btn-flat\">\r\n                                Stay On Page\r\n                            </button>\r\n                            <button\r\n                                className=\"modal-close red white-text waves-effect waves-red btn-flat\"\r\n                                onClick={() => history.goBack()}\r\n                            >\r\n                                CANCEL\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import {\r\n    useAddNotificationMutation,\r\n    useAddProjectMutation,\r\n} from \"../../../generated/graphql\";\r\n\r\nexport const CreateProjectMethods = (state, setState) => {\r\n    const [SUBMIT] = useAddProjectMutation();\r\n    const [sendNotification] = useAddNotificationMutation();\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.title === \"\" || state.description === \"\") {\r\n            if (state.title === \"\") {\r\n                document.getElementById(\"title\")?.classList.add(\"invalid\");\r\n            }\r\n            if (state.description === \"\") {\r\n                document.getElementById(\"desc\")?.classList.add(\"invalid\");\r\n            }\r\n\r\n            M.toast({ html: \"Missing Data\" });\r\n        } else {\r\n            let users = JSON.stringify(state.userids);\r\n            let projectid: any = await SUBMIT({\r\n                variables: {\r\n                    description: state.description,\r\n                    title: state.title,\r\n                    users,\r\n                },\r\n            });\r\n\r\n            state.userids.forEach(async (_val: any, i: number) => {\r\n                await sendNotification({\r\n                    variables: {\r\n                        message: `You have been assigned a new project`,\r\n                        userId: `${state.userids[i]}`,\r\n                    },\r\n                });\r\n            });\r\n\r\n            M.toast({ html: \"Project added successfully\" });\r\n            setTimeout(() => {\r\n                window.location.replace(\r\n                    `#/project-details:${projectid.data.addProject}`\r\n                );\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    const addUser = async (id: number, username: string) => {\r\n        let tmp = state.userids as number[];\r\n        let tmp2 = state.usernames as string[];\r\n\r\n        if (tmp.indexOf(id) === 0) {\r\n            tmp.shift();\r\n        } else if (tmp.indexOf(id) !== -1) {\r\n            let q = tmp.slice(0, tmp.indexOf(id));\r\n            let q2 = tmp.slice(tmp.indexOf(id), tmp.length);\r\n            tmp = q;\r\n            tmp = tmp.concat(q2);\r\n        } else {\r\n            tmp = tmp.concat(id);\r\n        }\r\n\r\n        if (tmp2.indexOf(username) === 0) {\r\n            tmp2.shift();\r\n        } else if (tmp2.indexOf(username) !== -1) {\r\n            let q = tmp2.slice(0, tmp2.indexOf(username));\r\n            let q2 = tmp2.slice(tmp2.indexOf(username) + 1, tmp2.length);\r\n            tmp2 = q;\r\n            tmp2 = tmp2.concat(q2);\r\n        } else {\r\n            tmp2 = tmp2.concat(username);\r\n        }\r\n        let tmp3 = state.userString + ` ${tmp}`;\r\n\r\n        setState({ ...state, userids: tmp, usernames: tmp2, userString: tmp3 });\r\n    };\r\n\r\n    return {\r\n        handleSubmit,\r\n        addUser,\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport { Route, RouteProps } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (user: any): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token);\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            if (user.role === \"project-manager\" || user.role === \"admin\") {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(\"error :>> \", error);\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAdminRouteProps extends RouteProps {\r\n    component: any;\r\n    user: any;\r\n}\r\n\r\nconst PmRoute: React.FC<IAdminRouteProps> = ({\r\n    component: Component,\r\n    user,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                checkAuth(user) ? <Component {...props} /> : null\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PmRoute;\r\n","import React from \"react\";\r\nimport {\r\n    useGetUserNotificationsQuery,\r\n    useSetReadMutation,\r\n    useDeleteNotificationMutation,\r\n    useDeleteUsersNotMutation,\r\n    useSetAllUsersNotToReadMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Notifications: React.FC = () => {\r\n    const { data, loading } = useGetUserNotificationsQuery();\r\n\r\n    const [SET_READ] = useSetReadMutation();\r\n    const [DELETE_NOTIFICATION] = useDeleteNotificationMutation();\r\n    const [deleteUsersNot] = useDeleteUsersNotMutation();\r\n    const [setAllUsersNotToRead] = useSetAllUsersNotToReadMutation();\r\n\r\n    if (loading || !data) {\r\n        return (\r\n            <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let UserNotifications = [] as any[];\r\n    // array.reverse() wouldn't work; this for reverses\r\n    for (let i = data.getUserNotifications.length - 1, j = 0; i > 0; i--) {\r\n        UserNotifications[j] = data.getUserNotifications[i];\r\n        j++;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"center-align table-wrapper\">\r\n                <span className=\"table-header z-depth-2\">\r\n                    <h3 className=\"white-text\">Notifications</h3>\r\n                </span>\r\n\r\n                <span className=\"table-body z-depth-1\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Message</td>\r\n                                <td>Status</td>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        onClick={() => {\r\n                                            setAllUsersNotToRead();\r\n                                            window.location.reload();\r\n                                        }}\r\n                                    >\r\n                                        Read All\r\n                                    </a>\r\n                                </td>\r\n                                <td>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a\r\n                                        onClick={() => {\r\n                                            deleteUsersNot();\r\n                                            window.location.reload();\r\n                                        }}\r\n                                    >\r\n                                        Delete All\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {UserNotifications.map(\r\n                                (_val, i): JSX.Element => {\r\n                                    let current = UserNotifications[i];\r\n                                    let tmp = \"\";\r\n                                    if (current.message.includes(\"*\")) {\r\n                                        // turns *T{id} into a href for View details\r\n                                        tmp = current.message.slice(\r\n                                            current.message.indexOf(\"*\"),\r\n                                            current.message.length\r\n                                        );\r\n                                        if (tmp.includes(\"*T\")) {\r\n                                            let tmp2 = tmp.slice(\r\n                                                tmp.indexOf(\"T\") + 1,\r\n                                                tmp.length\r\n                                            );\r\n                                            tmp = `#/ticket-details:${tmp2}`;\r\n                                        }\r\n                                    }\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>\r\n                                                {current.message.includes(\r\n                                                    \"*\"\r\n                                                ) ? (\r\n                                                    <>\r\n                                                        {current.message.slice(\r\n                                                            0,\r\n                                                            current.message.indexOf(\r\n                                                                \"*\"\r\n                                                            )\r\n                                                        )}\r\n                                                        <a href={tmp}>\r\n                                                            View details\r\n                                                        </a>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    current.message\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {current.read\r\n                                                    ? \"Read\"\r\n                                                    : \"Unread\"}\r\n                                            </td>\r\n                                            <td>\r\n                                                {current.read ? null : (\r\n                                                    <i\r\n                                                        className=\"material-icons green-text noselect\"\r\n                                                        onClick={async () => {\r\n                                                            if (!current.read) {\r\n                                                                try {\r\n                                                                    await SET_READ(\r\n                                                                        {\r\n                                                                            variables: {\r\n                                                                                ids: `${current.notificationId}`,\r\n                                                                            },\r\n                                                                        }\r\n                                                                    );\r\n                                                                } catch (error) {\r\n                                                                    M.toast({\r\n                                                                        html:\r\n                                                                            \"Could not update notification\",\r\n                                                                    });\r\n                                                                    M.toast({\r\n                                                                        html: `Error :>> ${error}`,\r\n                                                                    });\r\n                                                                }\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        check\r\n                                                    </i>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                <i\r\n                                                    className=\"material-icons red-text noselect\"\r\n                                                    onClick={async () => {\r\n                                                        try {\r\n                                                            await DELETE_NOTIFICATION(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        notificationId:\r\n                                                                            current.notificationId,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n                                                        } catch {\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Could not update notification\",\r\n                                                            });\r\n                                                        }\r\n                                                        window.location.reload();\r\n                                                    }}\r\n                                                >\r\n                                                    delete\r\n                                                </i>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notifications;\r\n","import AuthRoute from \"./authRoute\";\r\nimport AdminRoute from \"./adminRoute\";\r\nimport React from \"react\";\r\nimport { Switch, Redirect, Route, useLocation } from \"react-router-dom\";\r\nimport { Dashboard } from \"../components/Dashboard/Dashboard\";\r\nimport { ManageRoles } from \"../components/manage/roles/Roles\";\r\nimport { ManageProjects } from \"../components/manage/projects/ManProjects\";\r\nimport { Projects } from \"../components/project/Projects\";\r\nimport { Tickets } from \"../components/tickets/Tickets\";\r\nimport { ProjectDetails } from \"../components/project/ProjectDetails\";\r\nimport { TicketDetails } from \"../components/tickets/TicketDetails\";\r\nimport EditProject from \"../components/project/edit-project/EditProject\";\r\nimport { EditTicket } from \"../components/tickets/edit-ticket/EditTicket\";\r\nimport AddTicketToProject from \"../components/project/AddTicketToProject\";\r\nimport { CreateProject } from \"../components/project/create-project/CreateProject\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State, User } from \"../redux/RootReducer\";\r\nimport PmRoute from \"./pmRoute\";\r\nimport TicketComments from \"../components/tickets/TicketComments\";\r\nimport Notifications from \"../components/Notifications\";\r\nimport FilteredTickets from \"../components/tickets/FilteredTickets\";\r\n\r\nexport const Routes: React.FC = () => {\r\n    let location = useLocation();\r\n    if (location.state) {\r\n        window.location.reload();\r\n    }\r\n    const user = useSelector<State, User>(state => state.user!);\r\n\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <AdminRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-roles\"\r\n                component={ManageRoles}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/manage-projects\"\r\n                component={ManageProjects}\r\n            />\r\n            <AuthRoute exact path=\"/projects\" component={Projects} />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/create-project\"\r\n                component={CreateProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/edit-project:id\"\r\n                component={EditProject}\r\n            />\r\n            <PmRoute\r\n                user={user}\r\n                exact\r\n                path=\"/project-add:id\"\r\n                component={AddTicketToProject}\r\n            />\r\n            <AuthRoute path=\"/project-details:id\" component={ProjectDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketDetails} />\r\n            <AuthRoute path=\"/ticket-details:id\" component={TicketComments} />\r\n            <AuthRoute path=\"/edit-ticket:id\" component={EditTicket} />\r\n            <AuthRoute exact path=\"/tickets\" component={Tickets} />\r\n            <AuthRoute path=\"/filter-tickets:id\" component={FilteredTickets} />\r\n            <AuthRoute exact path=\"/notifications\" component={Notifications} />\r\n            <Route render={() => <Redirect to=\"/dashboard\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { useGetUserQuery } from \"./generated/graphql\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { Register } from \"./components/auth/Register\";\nimport { UI } from \"./components/UI\";\nimport { checkAuth } from \"./checkAuth\";\nimport { Routes } from \"./routes/Routes\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"./redux/actions/userActions\";\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch();\n    const { data, loading, error } = useGetUserQuery();\n\n    if (loading) {\n        return (\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                </div>\n\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                </div>\n            </div>\n        );\n    } else if (!error && data) {\n        const user = data.getUser;\n        if (checkAuth()) {\n            if (!!user) {\n                dispatch(setUserInfo(user));\n            }\n        }\n    }\n\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <UI children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/register\" component={Register} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import { User } from \"../RootReducer\";\r\n\r\nexport const setUserInfo = (user: User) => {\r\n    return {\r\n        type: \"ADD_USER_INFO\",\r\n        user: user,\r\n    };\r\n};\r\n","import App from \"./App\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport \"./css/dashboard.scss\";\r\nimport \"./css/login.scss\";\r\nimport \"./css/manage.scss\";\r\nimport \"./css/medias.scss\";\r\nimport \"./css/nav.scss\";\r\nimport PageLoader from \"./components/PageLoader\";\r\n\r\nexport const AppWrapper: React.FC = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    var URI = \"\";\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\r\n    } else {\r\n        URI = \"http://localhost:4000\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        let tmp = localStorage.getItem(\"refreshToken\") as string;\r\n\r\n        fetch(`${URI}/refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"refreshToken\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n        M.AutoInit();\r\n    }, [URI]);\r\n\r\n    if (loading) {\r\n        return <PageLoader />;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","export type User = {\r\n    id: number;\r\n    email: string;\r\n    role: string;\r\n    username: string;\r\n    firstname: string;\r\n    lastname: string;\r\n    ppHref: string;\r\n};\r\n\r\nexport type Project = {\r\n    title: string;\r\n    description: string;\r\n    projectid: number;\r\n};\r\n\r\nexport interface State {\r\n    user?: User;\r\n    project?: Project;\r\n}\r\n\r\nconst initState = {\r\n    user: {\r\n        id: 0,\r\n        email: \"\",\r\n        role: \"\",\r\n        username: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        ppHref: \"\",\r\n    },\r\n\r\n    project: {\r\n        title: \"\",\r\n        description: \"\",\r\n        projectid: 0,\r\n    },\r\n};\r\n\r\ntype Actions = {\r\n    user?: any;\r\n    type: string;\r\n    project: Project;\r\n};\r\n\r\nexport const RootReducer = (state: State = initState, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"ADD_USER_INFO\": {\r\n            return { ...state, user: action.user };\r\n        }\r\n        case \"PASS_PROJECT_INFO\": {\r\n            return { ...state, project: action.project };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from 'redux';\r\nimport { RootReducer } from './RootReducer';\r\n\r\nexport const store = createStore(RootReducer);","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { store } from \"./redux/ReduxStore\";\nimport { Provider } from \"react-redux\";\n\nconst cache = new InMemoryCache({});\nvar URI = \"\";\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nif (process.env.NODE_ENV === \"production\") {\n    URI = \"https://murmuring-wildwood-31770.herokuapp.com\";\n} else {\n    URI = \"http://localhost:4000\";\n}\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <AppWrapper />\n            </Provider>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { User } from \"./redux/RootReducer\";\r\n\r\nexport const setNavActives = (user: User) => {\r\n    const rmvActives = (ids: string[]) => {\r\n        ids.forEach((_val, i) => {\r\n            if (!!document.getElementById(ids[i])) {\r\n                document.getElementById(ids[i])!.classList.remove(\"active\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const addActives = (ids: string[]) => {\r\n        ids.forEach((_val, i) => {\r\n            if (!!document.getElementById(ids[i])) {\r\n                document.getElementById(ids[i])!.classList.add(\"active\");\r\n            }\r\n        });\r\n    };\r\n\r\n    rmvActives([\r\n        \"dashboard\",\r\n        \"mobile-dashboard\",\r\n        \"projects\",\r\n        \"mobile-projects\",\r\n        \"tickets\",\r\n        \"mobile-tickets\",\r\n    ]);\r\n\r\n    if (user.role === \"admin\") {\r\n        rmvActives([\"man-roles\", \"mobile-man-roles\"]);\r\n    }\r\n\r\n    if (user.role === \"project-manager\" || user.role === \"admin\") {\r\n        rmvActives([\"man-projects\", \"mobile-man-projects\"]);\r\n    }\r\n\r\n    let loc: string = `${window.location}`;\r\n    loc = loc.slice(loc.indexOf(\"#\"), loc.length);\r\n\r\n    switch (loc) {\r\n        case \"#/tickets\": {\r\n            addActives([\"tickets\", \"mobile-tickets\"]);\r\n            break;\r\n        }\r\n        case \"#/projects\": {\r\n            addActives([\"projects\", \"mobile-projects\"]);\r\n            break;\r\n        }\r\n        case \"#/manage-projects\": {\r\n            addActives([\"man-projects\", \"mobile-man-projects\"]);\r\n            break;\r\n        }\r\n        case \"#/manage-roles\": {\r\n            addActives([\"man-roles\", \"mobile-man-roles\"]);\r\n            break;\r\n        }\r\n        case \"#/dashboard\": {\r\n            addActives([\"dashboard\", \"mobile-dashboard\"]);\r\n            break;\r\n        }\r\n    }\r\n};\r\n","export const Sorting = () => {\r\n    const pagination = (e: React.SyntheticEvent) => {\r\n        let target = e.target as any;\r\n        let id = target.id;\r\n        const els = document.getElementsByClassName(\"pag-active\");\r\n        for (const el of (els as unknown) as any[]) {\r\n            el.classList.remove(\"active\");\r\n            el.classList.remove(\"pag-active\");\r\n        }\r\n\r\n        if (!!document.getElementById(`${id}li`)) {\r\n            document.getElementById(`${id}li`)!.classList.add(\"active\");\r\n            document.getElementById(`${id}li`)!.classList.add(\"pag-active\");\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val, i) => {\r\n            props[i] = arr[i][prop].toLowerCase();\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop].toLowerCase() !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const sortTicketsByPriority = (arr: any, prioritySwitch: string) => {\r\n        if (prioritySwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"high\" &&\r\n                        (arr[j - 1].priority === \"medium\" ||\r\n                            arr[j - 1].priority === \"low\")) ||\r\n                        (arr[j].priority === \"medium\" &&\r\n                            arr[j - 1].priority === \"low\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (prioritySwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"medium\" &&\r\n                        (arr[j - 1].priority === \"low\" ||\r\n                            arr[j - 1].priority === \"high\")) ||\r\n                        (arr[j].priority === \"low\" &&\r\n                            arr[j - 1].priority === \"high\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (prioritySwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].priority === \"low\" &&\r\n                        (arr[j - 1].priority === \"high\" ||\r\n                            arr[j - 1].priority === \"medium\")) ||\r\n                        (arr[j].priority === \"high\" &&\r\n                            arr[j - 1].priority === \"medium\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByStatus = (arr: any, toggle: string) => {\r\n        if (toggle === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"open\" &&\r\n                        (arr[j - 1].status === \"on-hold\" ||\r\n                            arr[j - 1].status === \"closed\")) ||\r\n                        (arr[j].status === \"on-hold\" &&\r\n                            arr[j - 1].status === \"closed\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (!!arr && toggle === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"on-hold\" &&\r\n                        (arr[j - 1].status === \"closed\" ||\r\n                            arr[j - 1].status === \"open\")) ||\r\n                        (arr[j].status === \"closed\" &&\r\n                            arr[j - 1].status === \"open\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (!!arr && toggle === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].status === \"closed\" &&\r\n                        (arr[j - 1].status === \"open\" ||\r\n                            arr[j - 1].status === \"on-hold\")) ||\r\n                        (arr[j].status === \"open\" &&\r\n                            arr[j - 1].status === \"on-hold\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    const sortTicketsByType = (arr: any) => {\r\n        let t = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (\r\n                j > 0 &&\r\n                arr[j].type === \"features\" &&\r\n                arr[j - 1].type === \"bugs/errors\"\r\n            ) {\r\n                let tmp = arr.slice(j - 1, j + 1);\r\n                tmp.reverse();\r\n                arr[j - 1] = tmp[0];\r\n                arr[j] = tmp[1];\r\n                j = j - 1;\r\n                t = true;\r\n            }\r\n        }\r\n\r\n        if (!t && !!arr) {\r\n            arr.reverse();\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    const roleSort = (arr: any, roleSwitch: string) => {\r\n        if (roleSwitch === \"0\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"admin\" &&\r\n                        (arr[j - 1].role === \"project-manager\" ||\r\n                            arr[j - 1].role === \"developer\")) ||\r\n                        (arr[j].role === \"project-manager\" &&\r\n                            arr[j - 1].role === \"developer\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"1\";\r\n        } else if (roleSwitch === \"1\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"project-manager\" &&\r\n                        (arr[j - 1].role === \"developer\" ||\r\n                            arr[j - 1].role === \"admin\")) ||\r\n                        (arr[j].role === \"developer\" &&\r\n                            arr[j - 1].role === \"admin\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"2\";\r\n        } else if (roleSwitch === \"2\") {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let j = i;\r\n                while (\r\n                    j > 0 &&\r\n                    ((arr[j].role === \"developer\" &&\r\n                        (arr[j - 1].role === \"admin\" ||\r\n                            arr[j - 1].role === \"project-manager\")) ||\r\n                        (arr[j].role === \"admin\" &&\r\n                            arr[j - 1].role === \"project-manager\"))\r\n                ) {\r\n                    let tmp = arr.slice(j - 1, j + 1);\r\n                    tmp.reverse();\r\n                    arr[j - 1] = tmp[0];\r\n                    arr[j] = tmp[1];\r\n                    j = j - 1;\r\n                }\r\n            }\r\n            return \"0\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        pagination,\r\n        sortByProp,\r\n        sortTicketsByPriority,\r\n        sortTicketsByStatus,\r\n        sortTicketsByType,\r\n        roleSort,\r\n    };\r\n};\r\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsers?: Maybe<Array<UserData>>;\n  getUser?: Maybe<User>;\n  getProjectData: Array<Projects>;\n  getProjectDataById: Projects;\n  getProjectTickets: Array<ProjectTickets>;\n  getProjectUsersById: Array<ProjectUsers>;\n  getUserProjects?: Maybe<Array<UserProjects>>;\n  getTickets: Array<Tickets>;\n  getTicketDataById?: Maybe<Tickets>;\n  getUserTickets: Array<UserTicketsPlus>;\n  test: Array<UserTicketsPlus>;\n  getTicketProject: Array<ProjectsTickets>;\n  getComments: Array<Comments>;\n  getHistory: Array<History>;\n  getUserNotifications: Array<Notifications>;\n  getColumnsByParentId: Array<Columns>;\n  getTags: Array<Tags>;\n  getTicketsByTag: Array<TicketsWithTags>;\n  getTicketsTags: Array<TicketsAndTagsJoin>;\n  userDefQuery: Array<UserDefinedQuery>;\n};\n\n\nexport type QueryGetProjectDataByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetProjectTicketsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetProjectUsersByIdArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type QueryGetTicketDataByIdArgs = {\n  ticketid: Scalars['Float'];\n};\n\n\nexport type QueryTestArgs = {\n  userId: Scalars['Float'];\n};\n\n\nexport type QueryGetTicketProjectArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type QueryGetCommentsArgs = {\n  parentid: Scalars['Float'];\n};\n\n\nexport type QueryGetHistoryArgs = {\n  parentid: Scalars['Float'];\n};\n\n\nexport type QueryGetColumnsByParentIdArgs = {\n  columnParentId: Scalars['String'];\n};\n\n\nexport type QueryGetTicketsByTagArgs = {\n  tagName: Scalars['String'];\n};\n\n\nexport type QueryGetTicketsTagsArgs = {\n  ticketid: Scalars['Float'];\n};\n\n\nexport type QueryUserDefQueryArgs = {\n  query: Scalars['String'];\n};\n\nexport type UserData = {\n  __typename?: 'UserData';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n  ppHref: Scalars['String'];\n};\n\nexport type Projects = {\n  __typename?: 'Projects';\n  projectid?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type ProjectTickets = {\n  __typename?: 'projectTickets';\n  ticketid: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type ProjectUsers = {\n  __typename?: 'projectUsers';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserProjects = {\n  __typename?: 'UserProjects';\n  id: Scalars['Int'];\n  projectid: Scalars['Int'];\n  userid: Scalars['Int'];\n};\n\nexport type Tickets = {\n  __typename?: 'Tickets';\n  ticketid: Scalars['Int'];\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n};\n\nexport type UserTicketsPlus = {\n  __typename?: 'UserTicketsPlus';\n  ticketid?: Maybe<Scalars['Int']>;\n  title: Scalars['String'];\n  userid?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Tags>>;\n};\n\nexport type Tags = {\n  __typename?: 'Tags';\n  tagid: Scalars['Int'];\n  tagName: Scalars['String'];\n  tagColor: Scalars['String'];\n};\n\nexport type ProjectsTickets = {\n  __typename?: 'ProjectsTickets';\n  id: Scalars['Int'];\n  ticketid: Scalars['Int'];\n  projectid: Scalars['Int'];\n};\n\nexport type Comments = {\n  __typename?: 'Comments';\n  commentid: Scalars['Int'];\n  comment: Scalars['String'];\n  parentid: Scalars['Int'];\n  commenterid: Scalars['Int'];\n  commenter: Scalars['String'];\n  commenterPp: Scalars['String'];\n  createdAt: Scalars['String'];\n};\n\nexport type History = {\n  __typename?: 'History';\n  id: Scalars['Int'];\n  parentid: Scalars['Int'];\n  propertyChanged: Scalars['String'];\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  dateChanged: Scalars['String'];\n};\n\nexport type Notifications = {\n  __typename?: 'Notifications';\n  notificationId: Scalars['Int'];\n  message: Scalars['String'];\n  read: Scalars['Boolean'];\n  userId: Scalars['String'];\n};\n\nexport type Columns = {\n  __typename?: 'Columns';\n  columnId: Scalars['Int'];\n  columnParentId: Scalars['String'];\n  columnName: Scalars['String'];\n  columnData?: Maybe<Scalars['String']>;\n};\n\nexport type TicketsWithTags = {\n  __typename?: 'TicketsWithTags';\n  ticketid?: Maybe<Scalars['Int']>;\n  title: Scalars['String'];\n  priority?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  tags: Array<Tags>;\n};\n\nexport type TicketsAndTagsJoin = {\n  __typename?: 'TicketsAndTagsJoin';\n  tagid: Scalars['Int'];\n  tagName: Scalars['String'];\n  tagColor: Scalars['String'];\n  ticketid: Scalars['Int'];\n  id: Scalars['Int'];\n};\n\nexport type UserDefinedQuery = {\n  __typename?: 'UserDefinedQuery';\n  columnId?: Maybe<Scalars['Float']>;\n  columnParentId?: Maybe<Scalars['String']>;\n  columnName?: Maybe<Scalars['String']>;\n  columnData?: Maybe<Scalars['String']>;\n  parentid?: Maybe<Scalars['Float']>;\n  propertyChanged?: Maybe<Scalars['String']>;\n  oldValue?: Maybe<Scalars['String']>;\n  dateChanged?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  projectid?: Maybe<Scalars['Float']>;\n  ticketid?: Maybe<Scalars['Float']>;\n  tagid?: Maybe<Scalars['Float']>;\n  tagName?: Maybe<Scalars['String']>;\n  tagColor?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Float']>;\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  role?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  firstname?: Maybe<Scalars['String']>;\n  lastname?: Maybe<Scalars['String']>;\n  ppHref?: Maybe<Scalars['String']>;\n  userid?: Maybe<Scalars['Float']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  updateRole: Scalars['Boolean'];\n  login: AuthResponse;\n  register: AuthResponse;\n  deleteUser: Scalars['Boolean'];\n  demoLogin: AuthResponse;\n  addPpHref: Scalars['Boolean'];\n  addProject: Scalars['Int'];\n  deleteProject: Scalars['Boolean'];\n  setProjectDesc: Scalars['Boolean'];\n  setProjectTitle: Scalars['Boolean'];\n  removeProjectUser: Scalars['Boolean'];\n  addProjectUser: Scalars['Boolean'];\n  createTicket: Scalars['Boolean'];\n  setTicketType: Scalars['Boolean'];\n  setTicketStatus: Scalars['Boolean'];\n  setTicketDesc: Scalars['Boolean'];\n  setTicketTitle: Scalars['Boolean'];\n  setTicketPriority: Scalars['Boolean'];\n  setTicketDeveloper: Scalars['Boolean'];\n  deleteTicket: Scalars['Boolean'];\n  setTicketProject: Scalars['Boolean'];\n  addComment: Scalars['Boolean'];\n  deleteComment: Scalars['Boolean'];\n  updateComment: Scalars['Boolean'];\n  addTicketHistory: Scalars['Boolean'];\n  addNotification: Scalars['Boolean'];\n  setRead: Scalars['Boolean'];\n  deleteNotification: Scalars['Boolean'];\n  deleteUsersNot: Scalars['Boolean'];\n  setAllUsersNotToRead: Scalars['Boolean'];\n  sendNot_CreateTicket: Scalars['Boolean'];\n  sendNot_CreateComment: Scalars['Boolean'];\n  sendNotificationByUsername: Scalars['Boolean'];\n  createColumn: Scalars['Boolean'];\n  updateColumns: Scalars['Boolean'];\n  createTag: Scalars['Boolean'];\n  deleteTag: Scalars['Boolean'];\n  deleteTagFromTicket: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  id: Scalars['String'];\n  role: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  lastname: Scalars['String'];\n  firstname: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationDemoLoginArgs = {\n  role: Scalars['String'];\n};\n\n\nexport type MutationAddPpHrefArgs = {\n  ppHref: Scalars['String'];\n};\n\n\nexport type MutationAddProjectArgs = {\n  users: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectid: Scalars['Float'];\n};\n\n\nexport type MutationSetProjectDescArgs = {\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type MutationSetProjectTitleArgs = {\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n};\n\n\nexport type MutationRemoveProjectUserArgs = {\n  userid: Scalars['Float'];\n  projectid: Scalars['Float'];\n};\n\n\nexport type MutationAddProjectUserArgs = {\n  userid: Scalars['Float'];\n  projectid: Scalars['Float'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  belongsto: Scalars['String'];\n  status: Scalars['String'];\n  developer: Scalars['String'];\n  submitter: Scalars['String'];\n  type: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  priority: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTypeArgs = {\n  type: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketStatusArgs = {\n  status: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDescArgs = {\n  desc: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketTitleArgs = {\n  title: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketPriorityArgs = {\n  priority: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketDeveloperArgs = {\n  developer: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSetTicketProjectArgs = {\n  projectid: Scalars['String'];\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationAddCommentArgs = {\n  parentid: Scalars['Float'];\n  comment: Scalars['String'];\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationUpdateCommentArgs = {\n  updatedMessage: Scalars['String'];\n  commentid: Scalars['Float'];\n};\n\n\nexport type MutationAddTicketHistoryArgs = {\n  oldValue: Scalars['String'];\n  newValue: Scalars['String'];\n  propertyChanged: Scalars['String'];\n  parentid: Scalars['Float'];\n};\n\n\nexport type MutationAddNotificationArgs = {\n  userId: Scalars['String'];\n  message: Scalars['String'];\n};\n\n\nexport type MutationSetReadArgs = {\n  ids: Scalars['String'];\n};\n\n\nexport type MutationDeleteNotificationArgs = {\n  notificationId: Scalars['Float'];\n};\n\n\nexport type MutationSendNot_CreateTicketArgs = {\n  projectid: Scalars['String'];\n};\n\n\nexport type MutationSendNot_CreateCommentArgs = {\n  ticketid: Scalars['String'];\n};\n\n\nexport type MutationSendNotificationByUsernameArgs = {\n  username: Scalars['String'];\n  message: Scalars['String'];\n};\n\n\nexport type MutationCreateColumnArgs = {\n  columnData: Scalars['String'];\n  columnParentId: Scalars['String'];\n  columnName: Scalars['String'];\n};\n\n\nexport type MutationUpdateColumnsArgs = {\n  newValues: Scalars['String'];\n  columnIds: Scalars['String'];\n};\n\n\nexport type MutationCreateTagArgs = {\n  tagColor: Scalars['String'];\n  ticketid: Scalars['Float'];\n  tagName: Scalars['String'];\n};\n\n\nexport type MutationDeleteTagArgs = {\n  tagid: Scalars['Float'];\n};\n\n\nexport type MutationDeleteTagFromTicketArgs = {\n  relationId: Scalars['Float'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type AddCommentMutationVariables = Exact<{\n  comment: Scalars['String'];\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type AddCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addComment'>\n);\n\nexport type AddNotificationMutationVariables = Exact<{\n  message: Scalars['String'];\n  userId: Scalars['String'];\n}>;\n\n\nexport type AddNotificationMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addNotification'>\n);\n\nexport type AddPpHrefMutationVariables = Exact<{\n  ppHref: Scalars['String'];\n}>;\n\n\nexport type AddPpHrefMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPpHref'>\n);\n\nexport type AddProjectMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Scalars['String'];\n}>;\n\n\nexport type AddProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProject'>\n);\n\nexport type AddProjectUserMutationVariables = Exact<{\n  projectid: Scalars['Float'];\n  userid: Scalars['Float'];\n}>;\n\n\nexport type AddProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProjectUser'>\n);\n\nexport type AddTicketHistoryMutationVariables = Exact<{\n  parentid: Scalars['Float'];\n  propertyChanged: Scalars['String'];\n  newValue: Scalars['String'];\n  oldValue: Scalars['String'];\n}>;\n\n\nexport type AddTicketHistoryMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTicketHistory'>\n);\n\nexport type CreateColumnMutationVariables = Exact<{\n  columnName: Scalars['String'];\n  columnParentId: Scalars['String'];\n  columnData: Scalars['String'];\n}>;\n\n\nexport type CreateColumnMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createColumn'>\n);\n\nexport type CreateTagMutationVariables = Exact<{\n  tagName: Scalars['String'];\n  ticketid: Scalars['Float'];\n  tagColor: Scalars['String'];\n}>;\n\n\nexport type CreateTagMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTag'>\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  priority: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  type: Scalars['String'];\n  submitter: Scalars['String'];\n  developer: Scalars['String'];\n  status: Scalars['String'];\n  belongsto: Scalars['String'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTicket'>\n);\n\nexport type DeleteCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n}>;\n\n\nexport type DeleteCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteComment'>\n);\n\nexport type DeleteNotificationMutationVariables = Exact<{\n  notificationId: Scalars['Float'];\n}>;\n\n\nexport type DeleteNotificationMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteNotification'>\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectid: Scalars['Float'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTagMutationVariables = Exact<{\n  tagid: Scalars['Float'];\n}>;\n\n\nexport type DeleteTagMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTag'>\n);\n\nexport type DeleteTagFromTicketMutationVariables = Exact<{\n  relationId: Scalars['Float'];\n}>;\n\n\nexport type DeleteTagFromTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTagFromTicket'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type DeleteUserMutationVariables = Exact<{\n  id: Scalars['Float'];\n}>;\n\n\nexport type DeleteUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUser'>\n);\n\nexport type DeleteUsersNotMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type DeleteUsersNotMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteUsersNot'>\n);\n\nexport type DemoLoginMutationVariables = Exact<{\n  role: Scalars['String'];\n}>;\n\n\nexport type DemoLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { demoLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type GetColumnsByParentIdQueryVariables = Exact<{\n  columnParentId: Scalars['String'];\n}>;\n\n\nexport type GetColumnsByParentIdQuery = (\n  { __typename?: 'Query' }\n  & { getColumnsByParentId: Array<(\n    { __typename?: 'Columns' }\n    & Pick<Columns, 'columnId' | 'columnParentId' | 'columnName' | 'columnData'>\n  )> }\n);\n\nexport type GetCommentsQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetCommentsQuery = (\n  { __typename?: 'Query' }\n  & { getComments: Array<(\n    { __typename?: 'Comments' }\n    & Pick<Comments, 'commentid' | 'comment' | 'commenterPp' | 'commenter' | 'createdAt'>\n  )> }\n);\n\nexport type GetHistoryQueryVariables = Exact<{\n  parentid: Scalars['Float'];\n}>;\n\n\nexport type GetHistoryQuery = (\n  { __typename?: 'Query' }\n  & { getHistory: Array<(\n    { __typename?: 'History' }\n    & Pick<History, 'id' | 'propertyChanged' | 'oldValue' | 'newValue' | 'dateChanged'>\n  )> }\n);\n\nexport type GetProjectDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProjectDataQuery = (\n  { __typename?: 'Query' }\n  & { getProjectData: Array<(\n    { __typename?: 'Projects' }\n    & Pick<Projects, 'title' | 'description' | 'projectid'>\n  )> }\n);\n\nexport type GetProjectDataByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectDataById: (\n    { __typename?: 'Projects' }\n    & Pick<Projects, 'title' | 'projectid' | 'description'>\n  ) }\n);\n\nexport type GetProjectUsersByIdQueryVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type GetProjectUsersByIdQuery = (\n  { __typename?: 'Query' }\n  & { getProjectUsersById: Array<(\n    { __typename?: 'projectUsers' }\n    & Pick<ProjectUsers, 'id' | 'email' | 'role' | 'username'>\n  )> }\n);\n\nexport type GetTagsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTagsQuery = (\n  { __typename?: 'Query' }\n  & { getTags: Array<(\n    { __typename?: 'Tags' }\n    & Pick<Tags, 'tagid' | 'tagName' | 'tagColor'>\n  )> }\n);\n\nexport type GetTicketDataByIdQueryVariables = Exact<{\n  ticketid: Scalars['Float'];\n}>;\n\n\nexport type GetTicketDataByIdQuery = (\n  { __typename?: 'Query' }\n  & { getTicketDataById?: Maybe<(\n    { __typename?: 'Tickets' }\n    & Pick<Tickets, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketProjectQueryVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type GetTicketProjectQuery = (\n  { __typename?: 'Query' }\n  & { getTicketProject: Array<(\n    { __typename?: 'ProjectsTickets' }\n    & Pick<ProjectsTickets, 'ticketid' | 'projectid'>\n  )> }\n);\n\nexport type GetTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getTickets: Array<(\n    { __typename?: 'Tickets' }\n    & Pick<Tickets, 'ticketid' | 'priority' | 'title' | 'description' | 'type' | 'submitter' | 'developer' | 'status' | 'belongsto'>\n  )> }\n);\n\nexport type GetTicketsByTagQueryVariables = Exact<{\n  tagName: Scalars['String'];\n}>;\n\n\nexport type GetTicketsByTagQuery = (\n  { __typename?: 'Query' }\n  & { getTicketsByTag: Array<(\n    { __typename?: 'TicketsWithTags' }\n    & Pick<TicketsWithTags, 'ticketid' | 'title' | 'priority' | 'type' | 'status'>\n    & { tags: Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'tagid' | 'tagName' | 'tagColor'>\n    )> }\n  )> }\n);\n\nexport type GetTicketsTagsQueryVariables = Exact<{\n  ticketid: Scalars['Float'];\n}>;\n\n\nexport type GetTicketsTagsQuery = (\n  { __typename?: 'Query' }\n  & { getTicketsTags: Array<(\n    { __typename?: 'TicketsAndTagsJoin' }\n    & Pick<TicketsAndTagsJoin, 'tagid' | 'tagName' | 'tagColor' | 'ticketid' | 'id'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname' | 'ppHref'>\n  )> }\n);\n\nexport type GetUserNotificationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserNotificationsQuery = (\n  { __typename?: 'Query' }\n  & { getUserNotifications: Array<(\n    { __typename?: 'Notifications' }\n    & Pick<Notifications, 'notificationId' | 'message' | 'read' | 'userId'>\n  )> }\n);\n\nexport type GetUserProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserProjectsQuery = (\n  { __typename?: 'Query' }\n  & { getUserProjects?: Maybe<Array<(\n    { __typename?: 'UserProjects' }\n    & Pick<UserProjects, 'projectid' | 'userid' | 'id'>\n  )>> }\n);\n\nexport type GetUserTicketsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getUserTickets: Array<(\n    { __typename?: 'UserTicketsPlus' }\n    & Pick<UserTicketsPlus, 'ticketid' | 'title' | 'userid' | 'id' | 'priority' | 'type' | 'status'>\n    & { tags?: Maybe<Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'tagid' | 'tagName' | 'tagColor'>\n    )>> }\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type GetProjectTicketsQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetProjectTicketsQuery = (\n  { __typename?: 'Query' }\n  & { getProjectTickets: Array<(\n    { __typename?: 'projectTickets' }\n    & Pick<ProjectTickets, 'ticketid' | 'title' | 'description' | 'submitter' | 'developer' | 'status'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n  role: Scalars['String'];\n  firstname: Scalars['String'];\n  lastname: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type RemoveProjectUserMutationVariables = Exact<{\n  userid: Scalars['Float'];\n  projectid: Scalars['Float'];\n}>;\n\n\nexport type RemoveProjectUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProjectUser'>\n);\n\nexport type SendNot_CreateCommentMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n}>;\n\n\nexport type SendNot_CreateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNot_CreateComment'>\n);\n\nexport type SendNot_CreateTicketMutationVariables = Exact<{\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SendNot_CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNot_CreateTicket'>\n);\n\nexport type SendNotificationByUsernameMutationVariables = Exact<{\n  message: Scalars['String'];\n  username: Scalars['String'];\n}>;\n\n\nexport type SendNotificationByUsernameMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'sendNotificationByUsername'>\n);\n\nexport type SetAllUsersNotToReadMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type SetAllUsersNotToReadMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setAllUsersNotToRead'>\n);\n\nexport type SetProjectDescMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type SetProjectDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectDesc'>\n);\n\nexport type SetProjectTitleMutationVariables = Exact<{\n  projectid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetProjectTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setProjectTitle'>\n);\n\nexport type SetReadMutationVariables = Exact<{\n  ids: Scalars['String'];\n}>;\n\n\nexport type SetReadMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setRead'>\n);\n\nexport type SetTicketDescMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  desc: Scalars['String'];\n}>;\n\n\nexport type SetTicketDescMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDesc'>\n);\n\nexport type SetTicketDeveloperMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  developer: Scalars['String'];\n}>;\n\n\nexport type SetTicketDeveloperMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketDeveloper'>\n);\n\nexport type SetTicketPriorityMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  priority: Scalars['String'];\n}>;\n\n\nexport type SetTicketPriorityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketPriority'>\n);\n\nexport type SetTicketProjectMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  projectid: Scalars['String'];\n}>;\n\n\nexport type SetTicketProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketProject'>\n);\n\nexport type SetTicketStatusMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  status: Scalars['String'];\n}>;\n\n\nexport type SetTicketStatusMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketStatus'>\n);\n\nexport type SetTicketTitleMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  title: Scalars['String'];\n}>;\n\n\nexport type SetTicketTitleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketTitle'>\n);\n\nexport type SetTicketTypeMutationVariables = Exact<{\n  ticketid: Scalars['String'];\n  type: Scalars['String'];\n}>;\n\n\nexport type SetTicketTypeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setTicketType'>\n);\n\nexport type UpdateColumnsMutationVariables = Exact<{\n  columnIds: Scalars['String'];\n  newValues: Scalars['String'];\n}>;\n\n\nexport type UpdateColumnsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateColumns'>\n);\n\nexport type UpdateCommentMutationVariables = Exact<{\n  commentid: Scalars['Float'];\n  updatedMessage: Scalars['String'];\n}>;\n\n\nexport type UpdateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateComment'>\n);\n\nexport type UpdateRoleMutationVariables = Exact<{\n  role: Scalars['String'];\n  id: Scalars['String'];\n}>;\n\n\nexport type UpdateRoleMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateRole'>\n);\n\nexport type UserDefQueryQueryVariables = Exact<{\n  query: Scalars['String'];\n}>;\n\n\nexport type UserDefQueryQuery = (\n  { __typename?: 'Query' }\n  & { userDefQuery: Array<(\n    { __typename?: 'UserDefinedQuery' }\n    & Pick<UserDefinedQuery, 'columnId' | 'columnParentId' | 'columnName' | 'columnData' | 'parentid' | 'propertyChanged' | 'oldValue' | 'dateChanged' | 'title' | 'description' | 'projectid' | 'ticketid' | 'tagid' | 'tagName' | 'tagColor' | 'id' | 'email' | 'password' | 'role' | 'username' | 'firstname' | 'lastname' | 'ppHref' | 'userid'>\n  )> }\n);\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getUsers?: Maybe<Array<(\n    { __typename?: 'UserData' }\n    & Pick<UserData, 'id' | 'email' | 'role' | 'username' | 'firstname' | 'lastname'>\n  )>> }\n);\n\n\nexport const AddCommentDocument = gql`\n    mutation addComment($comment: String!, $parentid: Float!) {\n  addComment(comment: $comment, parentid: $parentid)\n}\n    `;\nexport type AddCommentMutationFn = ApolloReactCommon.MutationFunction<AddCommentMutation, AddCommentMutationVariables>;\n\n/**\n * __useAddCommentMutation__\n *\n * To run a mutation, you first call `useAddCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommentMutation, { data, loading, error }] = useAddCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useAddCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommentMutation, AddCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommentMutation, AddCommentMutationVariables>(AddCommentDocument, baseOptions);\n      }\nexport type AddCommentMutationHookResult = ReturnType<typeof useAddCommentMutation>;\nexport type AddCommentMutationResult = ApolloReactCommon.MutationResult<AddCommentMutation>;\nexport type AddCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommentMutation, AddCommentMutationVariables>;\nexport const AddNotificationDocument = gql`\n    mutation addNotification($message: String!, $userId: String!) {\n  addNotification(message: $message, userId: $userId)\n}\n    `;\nexport type AddNotificationMutationFn = ApolloReactCommon.MutationFunction<AddNotificationMutation, AddNotificationMutationVariables>;\n\n/**\n * __useAddNotificationMutation__\n *\n * To run a mutation, you first call `useAddNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNotificationMutation, { data, loading, error }] = useAddNotificationMutation({\n *   variables: {\n *      message: // value for 'message'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useAddNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddNotificationMutation, AddNotificationMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddNotificationMutation, AddNotificationMutationVariables>(AddNotificationDocument, baseOptions);\n      }\nexport type AddNotificationMutationHookResult = ReturnType<typeof useAddNotificationMutation>;\nexport type AddNotificationMutationResult = ApolloReactCommon.MutationResult<AddNotificationMutation>;\nexport type AddNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<AddNotificationMutation, AddNotificationMutationVariables>;\nexport const AddPpHrefDocument = gql`\n    mutation addPpHref($ppHref: String!) {\n  addPpHref(ppHref: $ppHref)\n}\n    `;\nexport type AddPpHrefMutationFn = ApolloReactCommon.MutationFunction<AddPpHrefMutation, AddPpHrefMutationVariables>;\n\n/**\n * __useAddPpHrefMutation__\n *\n * To run a mutation, you first call `useAddPpHrefMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPpHrefMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPpHrefMutation, { data, loading, error }] = useAddPpHrefMutation({\n *   variables: {\n *      ppHref: // value for 'ppHref'\n *   },\n * });\n */\nexport function useAddPpHrefMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddPpHrefMutation, AddPpHrefMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddPpHrefMutation, AddPpHrefMutationVariables>(AddPpHrefDocument, baseOptions);\n      }\nexport type AddPpHrefMutationHookResult = ReturnType<typeof useAddPpHrefMutation>;\nexport type AddPpHrefMutationResult = ApolloReactCommon.MutationResult<AddPpHrefMutation>;\nexport type AddPpHrefMutationOptions = ApolloReactCommon.BaseMutationOptions<AddPpHrefMutation, AddPpHrefMutationVariables>;\nexport const AddProjectDocument = gql`\n    mutation addProject($title: String!, $description: String!, $users: String!) {\n  addProject(title: $title, description: $description, users: $users)\n}\n    `;\nexport type AddProjectMutationFn = ApolloReactCommon.MutationFunction<AddProjectMutation, AddProjectMutationVariables>;\n\n/**\n * __useAddProjectMutation__\n *\n * To run a mutation, you first call `useAddProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectMutation, { data, loading, error }] = useAddProjectMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      users: // value for 'users'\n *   },\n * });\n */\nexport function useAddProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectMutation, AddProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectMutation, AddProjectMutationVariables>(AddProjectDocument, baseOptions);\n      }\nexport type AddProjectMutationHookResult = ReturnType<typeof useAddProjectMutation>;\nexport type AddProjectMutationResult = ApolloReactCommon.MutationResult<AddProjectMutation>;\nexport type AddProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectMutation, AddProjectMutationVariables>;\nexport const AddProjectUserDocument = gql`\n    mutation addProjectUser($projectid: Float!, $userid: Float!) {\n  addProjectUser(projectid: $projectid, userid: $userid)\n}\n    `;\nexport type AddProjectUserMutationFn = ApolloReactCommon.MutationFunction<AddProjectUserMutation, AddProjectUserMutationVariables>;\n\n/**\n * __useAddProjectUserMutation__\n *\n * To run a mutation, you first call `useAddProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProjectUserMutation, { data, loading, error }] = useAddProjectUserMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useAddProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddProjectUserMutation, AddProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddProjectUserMutation, AddProjectUserMutationVariables>(AddProjectUserDocument, baseOptions);\n      }\nexport type AddProjectUserMutationHookResult = ReturnType<typeof useAddProjectUserMutation>;\nexport type AddProjectUserMutationResult = ApolloReactCommon.MutationResult<AddProjectUserMutation>;\nexport type AddProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<AddProjectUserMutation, AddProjectUserMutationVariables>;\nexport const AddTicketHistoryDocument = gql`\n    mutation addTicketHistory($parentid: Float!, $propertyChanged: String!, $newValue: String!, $oldValue: String!) {\n  addTicketHistory(parentid: $parentid, propertyChanged: $propertyChanged, newValue: $newValue, oldValue: $oldValue)\n}\n    `;\nexport type AddTicketHistoryMutationFn = ApolloReactCommon.MutationFunction<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\n\n/**\n * __useAddTicketHistoryMutation__\n *\n * To run a mutation, you first call `useAddTicketHistoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTicketHistoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTicketHistoryMutation, { data, loading, error }] = useAddTicketHistoryMutation({\n *   variables: {\n *      parentid: // value for 'parentid'\n *      propertyChanged: // value for 'propertyChanged'\n *      newValue: // value for 'newValue'\n *      oldValue: // value for 'oldValue'\n *   },\n * });\n */\nexport function useAddTicketHistoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>(AddTicketHistoryDocument, baseOptions);\n      }\nexport type AddTicketHistoryMutationHookResult = ReturnType<typeof useAddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationResult = ApolloReactCommon.MutationResult<AddTicketHistoryMutation>;\nexport type AddTicketHistoryMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTicketHistoryMutation, AddTicketHistoryMutationVariables>;\nexport const CreateColumnDocument = gql`\n    mutation createColumn($columnName: String!, $columnParentId: String!, $columnData: String!) {\n  createColumn(columnName: $columnName, columnParentId: $columnParentId, columnData: $columnData)\n}\n    `;\nexport type CreateColumnMutationFn = ApolloReactCommon.MutationFunction<CreateColumnMutation, CreateColumnMutationVariables>;\n\n/**\n * __useCreateColumnMutation__\n *\n * To run a mutation, you first call `useCreateColumnMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateColumnMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createColumnMutation, { data, loading, error }] = useCreateColumnMutation({\n *   variables: {\n *      columnName: // value for 'columnName'\n *      columnParentId: // value for 'columnParentId'\n *      columnData: // value for 'columnData'\n *   },\n * });\n */\nexport function useCreateColumnMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateColumnMutation, CreateColumnMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateColumnMutation, CreateColumnMutationVariables>(CreateColumnDocument, baseOptions);\n      }\nexport type CreateColumnMutationHookResult = ReturnType<typeof useCreateColumnMutation>;\nexport type CreateColumnMutationResult = ApolloReactCommon.MutationResult<CreateColumnMutation>;\nexport type CreateColumnMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateColumnMutation, CreateColumnMutationVariables>;\nexport const CreateTagDocument = gql`\n    mutation createTag($tagName: String!, $ticketid: Float!, $tagColor: String!) {\n  createTag(tagName: $tagName, ticketid: $ticketid, tagColor: $tagColor)\n}\n    `;\nexport type CreateTagMutationFn = ApolloReactCommon.MutationFunction<CreateTagMutation, CreateTagMutationVariables>;\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      tagName: // value for 'tagName'\n *      ticketid: // value for 'ticketid'\n *      tagColor: // value for 'tagColor'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTagMutation, CreateTagMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTagMutation, CreateTagMutationVariables>(CreateTagDocument, baseOptions);\n      }\nexport type CreateTagMutationHookResult = ReturnType<typeof useCreateTagMutation>;\nexport type CreateTagMutationResult = ApolloReactCommon.MutationResult<CreateTagMutation>;\nexport type CreateTagMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTagMutation, CreateTagMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation createTicket($priority: String!, $title: String!, $description: String!, $type: String!, $submitter: String!, $developer: String!, $status: String!, $belongsto: String!) {\n  createTicket(priority: $priority, title: $title, description: $description, type: $type, submitter: $submitter, developer: $developer, status: $status, belongsto: $belongsto)\n}\n    `;\nexport type CreateTicketMutationFn = ApolloReactCommon.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      priority: // value for 'priority'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      type: // value for 'type'\n *      submitter: // value for 'submitter'\n *      developer: // value for 'developer'\n *      status: // value for 'status'\n *      belongsto: // value for 'belongsto'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, baseOptions);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = ApolloReactCommon.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteCommentDocument = gql`\n    mutation deleteComment($commentid: Float!) {\n  deleteComment(commentid: $commentid)\n}\n    `;\nexport type DeleteCommentMutationFn = ApolloReactCommon.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;\n\n/**\n * __useDeleteCommentMutation__\n *\n * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *   },\n * });\n */\nexport function useDeleteCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, baseOptions);\n      }\nexport type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;\nexport type DeleteCommentMutationResult = ApolloReactCommon.MutationResult<DeleteCommentMutation>;\nexport type DeleteCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;\nexport const DeleteNotificationDocument = gql`\n    mutation deleteNotification($notificationId: Float!) {\n  deleteNotification(notificationId: $notificationId)\n}\n    `;\nexport type DeleteNotificationMutationFn = ApolloReactCommon.MutationFunction<DeleteNotificationMutation, DeleteNotificationMutationVariables>;\n\n/**\n * __useDeleteNotificationMutation__\n *\n * To run a mutation, you first call `useDeleteNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteNotificationMutation, { data, loading, error }] = useDeleteNotificationMutation({\n *   variables: {\n *      notificationId: // value for 'notificationId'\n *   },\n * });\n */\nexport function useDeleteNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteNotificationMutation, DeleteNotificationMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteNotificationMutation, DeleteNotificationMutationVariables>(DeleteNotificationDocument, baseOptions);\n      }\nexport type DeleteNotificationMutationHookResult = ReturnType<typeof useDeleteNotificationMutation>;\nexport type DeleteNotificationMutationResult = ApolloReactCommon.MutationResult<DeleteNotificationMutation>;\nexport type DeleteNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteNotificationMutation, DeleteNotificationMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectid: Float!) {\n  deleteProject(projectid: $projectid)\n}\n    `;\nexport type DeleteProjectMutationFn = ApolloReactCommon.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = ApolloReactCommon.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTagDocument = gql`\n    mutation deleteTag($tagid: Float!) {\n  deleteTag(tagid: $tagid)\n}\n    `;\nexport type DeleteTagMutationFn = ApolloReactCommon.MutationFunction<DeleteTagMutation, DeleteTagMutationVariables>;\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagid: // value for 'tagid'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTagMutation, DeleteTagMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTagMutation, DeleteTagMutationVariables>(DeleteTagDocument, baseOptions);\n      }\nexport type DeleteTagMutationHookResult = ReturnType<typeof useDeleteTagMutation>;\nexport type DeleteTagMutationResult = ApolloReactCommon.MutationResult<DeleteTagMutation>;\nexport type DeleteTagMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTagMutation, DeleteTagMutationVariables>;\nexport const DeleteTagFromTicketDocument = gql`\n    mutation deleteTagFromTicket($relationId: Float!) {\n  deleteTagFromTicket(relationId: $relationId)\n}\n    `;\nexport type DeleteTagFromTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTagFromTicketMutation, DeleteTagFromTicketMutationVariables>;\n\n/**\n * __useDeleteTagFromTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTagFromTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagFromTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagFromTicketMutation, { data, loading, error }] = useDeleteTagFromTicketMutation({\n *   variables: {\n *      relationId: // value for 'relationId'\n *   },\n * });\n */\nexport function useDeleteTagFromTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTagFromTicketMutation, DeleteTagFromTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTagFromTicketMutation, DeleteTagFromTicketMutationVariables>(DeleteTagFromTicketDocument, baseOptions);\n      }\nexport type DeleteTagFromTicketMutationHookResult = ReturnType<typeof useDeleteTagFromTicketMutation>;\nexport type DeleteTagFromTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTagFromTicketMutation>;\nexport type DeleteTagFromTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTagFromTicketMutation, DeleteTagFromTicketMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation deleteTicket($ticketid: String!) {\n  deleteTicket(ticketid: $ticketid)\n}\n    `;\nexport type DeleteTicketMutationFn = ApolloReactCommon.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, baseOptions);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = ApolloReactCommon.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation deleteUser($id: Float!) {\n  deleteUser(id: $id)\n}\n    `;\nexport type DeleteUserMutationFn = ApolloReactCommon.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = ApolloReactCommon.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const DeleteUsersNotDocument = gql`\n    mutation deleteUsersNot {\n  deleteUsersNot\n}\n    `;\nexport type DeleteUsersNotMutationFn = ApolloReactCommon.MutationFunction<DeleteUsersNotMutation, DeleteUsersNotMutationVariables>;\n\n/**\n * __useDeleteUsersNotMutation__\n *\n * To run a mutation, you first call `useDeleteUsersNotMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUsersNotMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUsersNotMutation, { data, loading, error }] = useDeleteUsersNotMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useDeleteUsersNotMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUsersNotMutation, DeleteUsersNotMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteUsersNotMutation, DeleteUsersNotMutationVariables>(DeleteUsersNotDocument, baseOptions);\n      }\nexport type DeleteUsersNotMutationHookResult = ReturnType<typeof useDeleteUsersNotMutation>;\nexport type DeleteUsersNotMutationResult = ApolloReactCommon.MutationResult<DeleteUsersNotMutation>;\nexport type DeleteUsersNotMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUsersNotMutation, DeleteUsersNotMutationVariables>;\nexport const DemoLoginDocument = gql`\n    mutation demoLogin($role: String!) {\n  demoLogin(role: $role) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type DemoLoginMutationFn = ApolloReactCommon.MutationFunction<DemoLoginMutation, DemoLoginMutationVariables>;\n\n/**\n * __useDemoLoginMutation__\n *\n * To run a mutation, you first call `useDemoLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDemoLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [demoLoginMutation, { data, loading, error }] = useDemoLoginMutation({\n *   variables: {\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useDemoLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DemoLoginMutation, DemoLoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<DemoLoginMutation, DemoLoginMutationVariables>(DemoLoginDocument, baseOptions);\n      }\nexport type DemoLoginMutationHookResult = ReturnType<typeof useDemoLoginMutation>;\nexport type DemoLoginMutationResult = ApolloReactCommon.MutationResult<DemoLoginMutation>;\nexport type DemoLoginMutationOptions = ApolloReactCommon.BaseMutationOptions<DemoLoginMutation, DemoLoginMutationVariables>;\nexport const GetColumnsByParentIdDocument = gql`\n    query getColumnsByParentId($columnParentId: String!) {\n  getColumnsByParentId(columnParentId: $columnParentId) {\n    columnId\n    columnParentId\n    columnName\n    columnData\n  }\n}\n    `;\n\n/**\n * __useGetColumnsByParentIdQuery__\n *\n * To run a query within a React component, call `useGetColumnsByParentIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetColumnsByParentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetColumnsByParentIdQuery({\n *   variables: {\n *      columnParentId: // value for 'columnParentId'\n *   },\n * });\n */\nexport function useGetColumnsByParentIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetColumnsByParentIdQuery, GetColumnsByParentIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetColumnsByParentIdQuery, GetColumnsByParentIdQueryVariables>(GetColumnsByParentIdDocument, baseOptions);\n      }\nexport function useGetColumnsByParentIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetColumnsByParentIdQuery, GetColumnsByParentIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetColumnsByParentIdQuery, GetColumnsByParentIdQueryVariables>(GetColumnsByParentIdDocument, baseOptions);\n        }\nexport type GetColumnsByParentIdQueryHookResult = ReturnType<typeof useGetColumnsByParentIdQuery>;\nexport type GetColumnsByParentIdLazyQueryHookResult = ReturnType<typeof useGetColumnsByParentIdLazyQuery>;\nexport type GetColumnsByParentIdQueryResult = ApolloReactCommon.QueryResult<GetColumnsByParentIdQuery, GetColumnsByParentIdQueryVariables>;\nexport const GetCommentsDocument = gql`\n    query getComments($parentid: Float!) {\n  getComments(parentid: $parentid) {\n    commentid\n    comment\n    commenterPp\n    commenter\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetCommentsQuery__\n *\n * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCommentsQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n      }\nexport function useGetCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);\n        }\nexport type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;\nexport type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;\nexport type GetCommentsQueryResult = ApolloReactCommon.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;\nexport const GetHistoryDocument = gql`\n    query getHistory($parentid: Float!) {\n  getHistory(parentid: $parentid) {\n    id\n    propertyChanged\n    oldValue\n    newValue\n    dateChanged\n  }\n}\n    `;\n\n/**\n * __useGetHistoryQuery__\n *\n * To run a query within a React component, call `useGetHistoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetHistoryQuery({\n *   variables: {\n *      parentid: // value for 'parentid'\n *   },\n * });\n */\nexport function useGetHistoryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n      }\nexport function useGetHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetHistoryQuery, GetHistoryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetHistoryQuery, GetHistoryQueryVariables>(GetHistoryDocument, baseOptions);\n        }\nexport type GetHistoryQueryHookResult = ReturnType<typeof useGetHistoryQuery>;\nexport type GetHistoryLazyQueryHookResult = ReturnType<typeof useGetHistoryLazyQuery>;\nexport type GetHistoryQueryResult = ApolloReactCommon.QueryResult<GetHistoryQuery, GetHistoryQueryVariables>;\nexport const GetProjectDataDocument = gql`\n    query getProjectData {\n  getProjectData {\n    title\n    description\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataQuery__\n *\n * To run a query within a React component, call `useGetProjectDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProjectDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n      }\nexport function useGetProjectDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataQuery, GetProjectDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataQuery, GetProjectDataQueryVariables>(GetProjectDataDocument, baseOptions);\n        }\nexport type GetProjectDataQueryHookResult = ReturnType<typeof useGetProjectDataQuery>;\nexport type GetProjectDataLazyQueryHookResult = ReturnType<typeof useGetProjectDataLazyQuery>;\nexport type GetProjectDataQueryResult = ApolloReactCommon.QueryResult<GetProjectDataQuery, GetProjectDataQueryVariables>;\nexport const GetProjectDataByIdDocument = gql`\n    query getProjectDataById($projectid: String!) {\n  getProjectDataById(projectid: $projectid) {\n    title\n    projectid\n    description\n  }\n}\n    `;\n\n/**\n * __useGetProjectDataByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectDataByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n      }\nexport function useGetProjectDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>(GetProjectDataByIdDocument, baseOptions);\n        }\nexport type GetProjectDataByIdQueryHookResult = ReturnType<typeof useGetProjectDataByIdQuery>;\nexport type GetProjectDataByIdLazyQueryHookResult = ReturnType<typeof useGetProjectDataByIdLazyQuery>;\nexport type GetProjectDataByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectDataByIdQuery, GetProjectDataByIdQueryVariables>;\nexport const GetProjectUsersByIdDocument = gql`\n    query getProjectUsersById($projectid: String!) {\n  getProjectUsersById(projectid: $projectid) {\n    id\n    email\n    role\n    username\n  }\n}\n    `;\n\n/**\n * __useGetProjectUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetProjectUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectUsersByIdQuery({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useGetProjectUsersByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n      }\nexport function useGetProjectUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>(GetProjectUsersByIdDocument, baseOptions);\n        }\nexport type GetProjectUsersByIdQueryHookResult = ReturnType<typeof useGetProjectUsersByIdQuery>;\nexport type GetProjectUsersByIdLazyQueryHookResult = ReturnType<typeof useGetProjectUsersByIdLazyQuery>;\nexport type GetProjectUsersByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectUsersByIdQuery, GetProjectUsersByIdQueryVariables>;\nexport const GetTagsDocument = gql`\n    query getTags {\n  getTags {\n    tagid\n    tagName\n    tagColor\n  }\n}\n    `;\n\n/**\n * __useGetTagsQuery__\n *\n * To run a query within a React component, call `useGetTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTagsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTagsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTagsQuery, GetTagsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTagsQuery, GetTagsQueryVariables>(GetTagsDocument, baseOptions);\n      }\nexport function useGetTagsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTagsQuery, GetTagsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTagsQuery, GetTagsQueryVariables>(GetTagsDocument, baseOptions);\n        }\nexport type GetTagsQueryHookResult = ReturnType<typeof useGetTagsQuery>;\nexport type GetTagsLazyQueryHookResult = ReturnType<typeof useGetTagsLazyQuery>;\nexport type GetTagsQueryResult = ApolloReactCommon.QueryResult<GetTagsQuery, GetTagsQueryVariables>;\nexport const GetTicketDataByIdDocument = gql`\n    query getTicketDataById($ticketid: Float!) {\n  getTicketDataById(ticketid: $ticketid) {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketDataByIdQuery__\n *\n * To run a query within a React component, call `useGetTicketDataByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketDataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketDataByIdQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketDataByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n      }\nexport function useGetTicketDataByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>(GetTicketDataByIdDocument, baseOptions);\n        }\nexport type GetTicketDataByIdQueryHookResult = ReturnType<typeof useGetTicketDataByIdQuery>;\nexport type GetTicketDataByIdLazyQueryHookResult = ReturnType<typeof useGetTicketDataByIdLazyQuery>;\nexport type GetTicketDataByIdQueryResult = ApolloReactCommon.QueryResult<GetTicketDataByIdQuery, GetTicketDataByIdQueryVariables>;\nexport const GetTicketProjectDocument = gql`\n    query getTicketProject($ticketid: String!) {\n  getTicketProject(ticketid: $ticketid) {\n    ticketid\n    projectid\n  }\n}\n    `;\n\n/**\n * __useGetTicketProjectQuery__\n *\n * To run a query within a React component, call `useGetTicketProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketProjectQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketProjectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n      }\nexport function useGetTicketProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketProjectQuery, GetTicketProjectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketProjectQuery, GetTicketProjectQueryVariables>(GetTicketProjectDocument, baseOptions);\n        }\nexport type GetTicketProjectQueryHookResult = ReturnType<typeof useGetTicketProjectQuery>;\nexport type GetTicketProjectLazyQueryHookResult = ReturnType<typeof useGetTicketProjectLazyQuery>;\nexport type GetTicketProjectQueryResult = ApolloReactCommon.QueryResult<GetTicketProjectQuery, GetTicketProjectQueryVariables>;\nexport const GetTicketsDocument = gql`\n    query getTickets {\n  getTickets {\n    ticketid\n    priority\n    title\n    description\n    type\n    submitter\n    developer\n    status\n    belongsto\n  }\n}\n    `;\n\n/**\n * __useGetTicketsQuery__\n *\n * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n      }\nexport function useGetTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsQuery, GetTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsQuery, GetTicketsQueryVariables>(GetTicketsDocument, baseOptions);\n        }\nexport type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;\nexport type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;\nexport type GetTicketsQueryResult = ApolloReactCommon.QueryResult<GetTicketsQuery, GetTicketsQueryVariables>;\nexport const GetTicketsByTagDocument = gql`\n    query getTicketsByTag($tagName: String!) {\n  getTicketsByTag(tagName: $tagName) {\n    ticketid\n    title\n    priority\n    type\n    status\n    tags {\n      tagid\n      tagName\n      tagColor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetTicketsByTagQuery__\n *\n * To run a query within a React component, call `useGetTicketsByTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsByTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsByTagQuery({\n *   variables: {\n *      tagName: // value for 'tagName'\n *   },\n * });\n */\nexport function useGetTicketsByTagQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsByTagQuery, GetTicketsByTagQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsByTagQuery, GetTicketsByTagQueryVariables>(GetTicketsByTagDocument, baseOptions);\n      }\nexport function useGetTicketsByTagLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsByTagQuery, GetTicketsByTagQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsByTagQuery, GetTicketsByTagQueryVariables>(GetTicketsByTagDocument, baseOptions);\n        }\nexport type GetTicketsByTagQueryHookResult = ReturnType<typeof useGetTicketsByTagQuery>;\nexport type GetTicketsByTagLazyQueryHookResult = ReturnType<typeof useGetTicketsByTagLazyQuery>;\nexport type GetTicketsByTagQueryResult = ApolloReactCommon.QueryResult<GetTicketsByTagQuery, GetTicketsByTagQueryVariables>;\nexport const GetTicketsTagsDocument = gql`\n    query getTicketsTags($ticketid: Float!) {\n  getTicketsTags(ticketid: $ticketid) {\n    tagid\n    tagName\n    tagColor\n    ticketid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetTicketsTagsQuery__\n *\n * To run a query within a React component, call `useGetTicketsTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTicketsTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTicketsTagsQuery({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useGetTicketsTagsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTicketsTagsQuery, GetTicketsTagsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTicketsTagsQuery, GetTicketsTagsQueryVariables>(GetTicketsTagsDocument, baseOptions);\n      }\nexport function useGetTicketsTagsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTicketsTagsQuery, GetTicketsTagsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTicketsTagsQuery, GetTicketsTagsQueryVariables>(GetTicketsTagsDocument, baseOptions);\n        }\nexport type GetTicketsTagsQueryHookResult = ReturnType<typeof useGetTicketsTagsQuery>;\nexport type GetTicketsTagsLazyQueryHookResult = ReturnType<typeof useGetTicketsTagsLazyQuery>;\nexport type GetTicketsTagsQueryResult = ApolloReactCommon.QueryResult<GetTicketsTagsQuery, GetTicketsTagsQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n    ppHref\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUserNotificationsDocument = gql`\n    query getUserNotifications {\n  getUserNotifications {\n    notificationId\n    message\n    read\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetUserNotificationsQuery__\n *\n * To run a query within a React component, call `useGetUserNotificationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserNotificationsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserNotificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>(GetUserNotificationsDocument, baseOptions);\n      }\nexport function useGetUserNotificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>(GetUserNotificationsDocument, baseOptions);\n        }\nexport type GetUserNotificationsQueryHookResult = ReturnType<typeof useGetUserNotificationsQuery>;\nexport type GetUserNotificationsLazyQueryHookResult = ReturnType<typeof useGetUserNotificationsLazyQuery>;\nexport type GetUserNotificationsQueryResult = ApolloReactCommon.QueryResult<GetUserNotificationsQuery, GetUserNotificationsQueryVariables>;\nexport const GetUserProjectsDocument = gql`\n    query getUserProjects {\n  getUserProjects {\n    projectid\n    userid\n    id\n  }\n}\n    `;\n\n/**\n * __useGetUserProjectsQuery__\n *\n * To run a query within a React component, call `useGetUserProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n      }\nexport function useGetUserProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserProjectsQuery, GetUserProjectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserProjectsQuery, GetUserProjectsQueryVariables>(GetUserProjectsDocument, baseOptions);\n        }\nexport type GetUserProjectsQueryHookResult = ReturnType<typeof useGetUserProjectsQuery>;\nexport type GetUserProjectsLazyQueryHookResult = ReturnType<typeof useGetUserProjectsLazyQuery>;\nexport type GetUserProjectsQueryResult = ApolloReactCommon.QueryResult<GetUserProjectsQuery, GetUserProjectsQueryVariables>;\nexport const GetUserTicketsDocument = gql`\n    query getUserTickets {\n  getUserTickets {\n    ticketid\n    title\n    userid\n    id\n    priority\n    type\n    status\n    tags {\n      tagid\n      tagName\n      tagColor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUserTicketsQuery__\n *\n * To run a query within a React component, call `useGetUserTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserTicketsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n      }\nexport function useGetUserTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTicketsQuery, GetUserTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserTicketsQuery, GetUserTicketsQueryVariables>(GetUserTicketsDocument, baseOptions);\n        }\nexport type GetUserTicketsQueryHookResult = ReturnType<typeof useGetUserTicketsQuery>;\nexport type GetUserTicketsLazyQueryHookResult = ReturnType<typeof useGetUserTicketsLazyQuery>;\nexport type GetUserTicketsQueryResult = ApolloReactCommon.QueryResult<GetUserTicketsQuery, GetUserTicketsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const GetProjectTicketsDocument = gql`\n    query getProjectTickets($id: String!) {\n  getProjectTickets(id: $id) {\n    ticketid\n    title\n    description\n    submitter\n    developer\n    status\n  }\n}\n    `;\n\n/**\n * __useGetProjectTicketsQuery__\n *\n * To run a query within a React component, call `useGetProjectTicketsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectTicketsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProjectTicketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n      }\nexport function useGetProjectTicketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>(GetProjectTicketsDocument, baseOptions);\n        }\nexport type GetProjectTicketsQueryHookResult = ReturnType<typeof useGetProjectTicketsQuery>;\nexport type GetProjectTicketsLazyQueryHookResult = ReturnType<typeof useGetProjectTicketsLazyQuery>;\nexport type GetProjectTicketsQueryResult = ApolloReactCommon.QueryResult<GetProjectTicketsQuery, GetProjectTicketsQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!, $role: String!, $firstname: String!, $lastname: String!) {\n  register(email: $email, password: $password, username: $username, role: $role, firstname: $firstname, lastname: $lastname) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *      role: // value for 'role'\n *      firstname: // value for 'firstname'\n *      lastname: // value for 'lastname'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RemoveProjectUserDocument = gql`\n    mutation removeProjectUser($userid: Float!, $projectid: Float!) {\n  removeProjectUser(userid: $userid, projectid: $projectid)\n}\n    `;\nexport type RemoveProjectUserMutationFn = ApolloReactCommon.MutationFunction<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\n\n/**\n * __useRemoveProjectUserMutation__\n *\n * To run a mutation, you first call `useRemoveProjectUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProjectUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProjectUserMutation, { data, loading, error }] = useRemoveProjectUserMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useRemoveProjectUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>(RemoveProjectUserDocument, baseOptions);\n      }\nexport type RemoveProjectUserMutationHookResult = ReturnType<typeof useRemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationResult = ApolloReactCommon.MutationResult<RemoveProjectUserMutation>;\nexport type RemoveProjectUserMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveProjectUserMutation, RemoveProjectUserMutationVariables>;\nexport const SendNot_CreateCommentDocument = gql`\n    mutation sendNot_CreateComment($ticketid: String!) {\n  sendNot_CreateComment(ticketid: $ticketid)\n}\n    `;\nexport type SendNot_CreateCommentMutationFn = ApolloReactCommon.MutationFunction<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>;\n\n/**\n * __useSendNot_CreateCommentMutation__\n *\n * To run a mutation, you first call `useSendNot_CreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNot_CreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotCreateCommentMutation, { data, loading, error }] = useSendNot_CreateCommentMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *   },\n * });\n */\nexport function useSendNot_CreateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>(SendNot_CreateCommentDocument, baseOptions);\n      }\nexport type SendNot_CreateCommentMutationHookResult = ReturnType<typeof useSendNot_CreateCommentMutation>;\nexport type SendNot_CreateCommentMutationResult = ApolloReactCommon.MutationResult<SendNot_CreateCommentMutation>;\nexport type SendNot_CreateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNot_CreateCommentMutation, SendNot_CreateCommentMutationVariables>;\nexport const SendNot_CreateTicketDocument = gql`\n    mutation sendNot_CreateTicket($projectid: String!) {\n  sendNot_CreateTicket(projectid: $projectid)\n}\n    `;\nexport type SendNot_CreateTicketMutationFn = ApolloReactCommon.MutationFunction<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>;\n\n/**\n * __useSendNot_CreateTicketMutation__\n *\n * To run a mutation, you first call `useSendNot_CreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNot_CreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotCreateTicketMutation, { data, loading, error }] = useSendNot_CreateTicketMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSendNot_CreateTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>(SendNot_CreateTicketDocument, baseOptions);\n      }\nexport type SendNot_CreateTicketMutationHookResult = ReturnType<typeof useSendNot_CreateTicketMutation>;\nexport type SendNot_CreateTicketMutationResult = ApolloReactCommon.MutationResult<SendNot_CreateTicketMutation>;\nexport type SendNot_CreateTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNot_CreateTicketMutation, SendNot_CreateTicketMutationVariables>;\nexport const SendNotificationByUsernameDocument = gql`\n    mutation sendNotificationByUsername($message: String!, $username: String!) {\n  sendNotificationByUsername(message: $message, username: $username)\n}\n    `;\nexport type SendNotificationByUsernameMutationFn = ApolloReactCommon.MutationFunction<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>;\n\n/**\n * __useSendNotificationByUsernameMutation__\n *\n * To run a mutation, you first call `useSendNotificationByUsernameMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendNotificationByUsernameMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendNotificationByUsernameMutation, { data, loading, error }] = useSendNotificationByUsernameMutation({\n *   variables: {\n *      message: // value for 'message'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useSendNotificationByUsernameMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>(SendNotificationByUsernameDocument, baseOptions);\n      }\nexport type SendNotificationByUsernameMutationHookResult = ReturnType<typeof useSendNotificationByUsernameMutation>;\nexport type SendNotificationByUsernameMutationResult = ApolloReactCommon.MutationResult<SendNotificationByUsernameMutation>;\nexport type SendNotificationByUsernameMutationOptions = ApolloReactCommon.BaseMutationOptions<SendNotificationByUsernameMutation, SendNotificationByUsernameMutationVariables>;\nexport const SetAllUsersNotToReadDocument = gql`\n    mutation setAllUsersNotToRead {\n  setAllUsersNotToRead\n}\n    `;\nexport type SetAllUsersNotToReadMutationFn = ApolloReactCommon.MutationFunction<SetAllUsersNotToReadMutation, SetAllUsersNotToReadMutationVariables>;\n\n/**\n * __useSetAllUsersNotToReadMutation__\n *\n * To run a mutation, you first call `useSetAllUsersNotToReadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetAllUsersNotToReadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setAllUsersNotToReadMutation, { data, loading, error }] = useSetAllUsersNotToReadMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useSetAllUsersNotToReadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetAllUsersNotToReadMutation, SetAllUsersNotToReadMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetAllUsersNotToReadMutation, SetAllUsersNotToReadMutationVariables>(SetAllUsersNotToReadDocument, baseOptions);\n      }\nexport type SetAllUsersNotToReadMutationHookResult = ReturnType<typeof useSetAllUsersNotToReadMutation>;\nexport type SetAllUsersNotToReadMutationResult = ApolloReactCommon.MutationResult<SetAllUsersNotToReadMutation>;\nexport type SetAllUsersNotToReadMutationOptions = ApolloReactCommon.BaseMutationOptions<SetAllUsersNotToReadMutation, SetAllUsersNotToReadMutationVariables>;\nexport const SetProjectDescDocument = gql`\n    mutation setProjectDesc($projectid: String!, $description: String!) {\n  setProjectDesc(projectid: $projectid, description: $description)\n}\n    `;\nexport type SetProjectDescMutationFn = ApolloReactCommon.MutationFunction<SetProjectDescMutation, SetProjectDescMutationVariables>;\n\n/**\n * __useSetProjectDescMutation__\n *\n * To run a mutation, you first call `useSetProjectDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectDescMutation, { data, loading, error }] = useSetProjectDescMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useSetProjectDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectDescMutation, SetProjectDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectDescMutation, SetProjectDescMutationVariables>(SetProjectDescDocument, baseOptions);\n      }\nexport type SetProjectDescMutationHookResult = ReturnType<typeof useSetProjectDescMutation>;\nexport type SetProjectDescMutationResult = ApolloReactCommon.MutationResult<SetProjectDescMutation>;\nexport type SetProjectDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectDescMutation, SetProjectDescMutationVariables>;\nexport const SetProjectTitleDocument = gql`\n    mutation setProjectTitle($projectid: String!, $title: String!) {\n  setProjectTitle(projectid: $projectid, title: $title)\n}\n    `;\nexport type SetProjectTitleMutationFn = ApolloReactCommon.MutationFunction<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\n\n/**\n * __useSetProjectTitleMutation__\n *\n * To run a mutation, you first call `useSetProjectTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProjectTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProjectTitleMutation, { data, loading, error }] = useSetProjectTitleMutation({\n *   variables: {\n *      projectid: // value for 'projectid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetProjectTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetProjectTitleMutation, SetProjectTitleMutationVariables>(SetProjectTitleDocument, baseOptions);\n      }\nexport type SetProjectTitleMutationHookResult = ReturnType<typeof useSetProjectTitleMutation>;\nexport type SetProjectTitleMutationResult = ApolloReactCommon.MutationResult<SetProjectTitleMutation>;\nexport type SetProjectTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetProjectTitleMutation, SetProjectTitleMutationVariables>;\nexport const SetReadDocument = gql`\n    mutation setRead($ids: String!) {\n  setRead(ids: $ids)\n}\n    `;\nexport type SetReadMutationFn = ApolloReactCommon.MutationFunction<SetReadMutation, SetReadMutationVariables>;\n\n/**\n * __useSetReadMutation__\n *\n * To run a mutation, you first call `useSetReadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetReadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setReadMutation, { data, loading, error }] = useSetReadMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useSetReadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetReadMutation, SetReadMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetReadMutation, SetReadMutationVariables>(SetReadDocument, baseOptions);\n      }\nexport type SetReadMutationHookResult = ReturnType<typeof useSetReadMutation>;\nexport type SetReadMutationResult = ApolloReactCommon.MutationResult<SetReadMutation>;\nexport type SetReadMutationOptions = ApolloReactCommon.BaseMutationOptions<SetReadMutation, SetReadMutationVariables>;\nexport const SetTicketDescDocument = gql`\n    mutation setTicketDesc($ticketid: String!, $desc: String!) {\n  setTicketDesc(ticketid: $ticketid, desc: $desc)\n}\n    `;\nexport type SetTicketDescMutationFn = ApolloReactCommon.MutationFunction<SetTicketDescMutation, SetTicketDescMutationVariables>;\n\n/**\n * __useSetTicketDescMutation__\n *\n * To run a mutation, you first call `useSetTicketDescMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDescMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDescMutation, { data, loading, error }] = useSetTicketDescMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      desc: // value for 'desc'\n *   },\n * });\n */\nexport function useSetTicketDescMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDescMutation, SetTicketDescMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDescMutation, SetTicketDescMutationVariables>(SetTicketDescDocument, baseOptions);\n      }\nexport type SetTicketDescMutationHookResult = ReturnType<typeof useSetTicketDescMutation>;\nexport type SetTicketDescMutationResult = ApolloReactCommon.MutationResult<SetTicketDescMutation>;\nexport type SetTicketDescMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDescMutation, SetTicketDescMutationVariables>;\nexport const SetTicketDeveloperDocument = gql`\n    mutation setTicketDeveloper($ticketid: String!, $developer: String!) {\n  setTicketDeveloper(ticketid: $ticketid, developer: $developer)\n}\n    `;\nexport type SetTicketDeveloperMutationFn = ApolloReactCommon.MutationFunction<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\n\n/**\n * __useSetTicketDeveloperMutation__\n *\n * To run a mutation, you first call `useSetTicketDeveloperMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketDeveloperMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketDeveloperMutation, { data, loading, error }] = useSetTicketDeveloperMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      developer: // value for 'developer'\n *   },\n * });\n */\nexport function useSetTicketDeveloperMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>(SetTicketDeveloperDocument, baseOptions);\n      }\nexport type SetTicketDeveloperMutationHookResult = ReturnType<typeof useSetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationResult = ApolloReactCommon.MutationResult<SetTicketDeveloperMutation>;\nexport type SetTicketDeveloperMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketDeveloperMutation, SetTicketDeveloperMutationVariables>;\nexport const SetTicketPriorityDocument = gql`\n    mutation setTicketPriority($ticketid: String!, $priority: String!) {\n  setTicketPriority(ticketid: $ticketid, priority: $priority)\n}\n    `;\nexport type SetTicketPriorityMutationFn = ApolloReactCommon.MutationFunction<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\n\n/**\n * __useSetTicketPriorityMutation__\n *\n * To run a mutation, you first call `useSetTicketPriorityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketPriorityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketPriorityMutation, { data, loading, error }] = useSetTicketPriorityMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      priority: // value for 'priority'\n *   },\n * });\n */\nexport function useSetTicketPriorityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>(SetTicketPriorityDocument, baseOptions);\n      }\nexport type SetTicketPriorityMutationHookResult = ReturnType<typeof useSetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationResult = ApolloReactCommon.MutationResult<SetTicketPriorityMutation>;\nexport type SetTicketPriorityMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketPriorityMutation, SetTicketPriorityMutationVariables>;\nexport const SetTicketProjectDocument = gql`\n    mutation setTicketProject($ticketid: String!, $projectid: String!) {\n  setTicketProject(ticketid: $ticketid, projectid: $projectid)\n}\n    `;\nexport type SetTicketProjectMutationFn = ApolloReactCommon.MutationFunction<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\n\n/**\n * __useSetTicketProjectMutation__\n *\n * To run a mutation, you first call `useSetTicketProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketProjectMutation, { data, loading, error }] = useSetTicketProjectMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      projectid: // value for 'projectid'\n *   },\n * });\n */\nexport function useSetTicketProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketProjectMutation, SetTicketProjectMutationVariables>(SetTicketProjectDocument, baseOptions);\n      }\nexport type SetTicketProjectMutationHookResult = ReturnType<typeof useSetTicketProjectMutation>;\nexport type SetTicketProjectMutationResult = ApolloReactCommon.MutationResult<SetTicketProjectMutation>;\nexport type SetTicketProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketProjectMutation, SetTicketProjectMutationVariables>;\nexport const SetTicketStatusDocument = gql`\n    mutation setTicketStatus($ticketid: String!, $status: String!) {\n  setTicketStatus(ticketid: $ticketid, status: $status)\n}\n    `;\nexport type SetTicketStatusMutationFn = ApolloReactCommon.MutationFunction<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\n\n/**\n * __useSetTicketStatusMutation__\n *\n * To run a mutation, you first call `useSetTicketStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketStatusMutation, { data, loading, error }] = useSetTicketStatusMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useSetTicketStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketStatusMutation, SetTicketStatusMutationVariables>(SetTicketStatusDocument, baseOptions);\n      }\nexport type SetTicketStatusMutationHookResult = ReturnType<typeof useSetTicketStatusMutation>;\nexport type SetTicketStatusMutationResult = ApolloReactCommon.MutationResult<SetTicketStatusMutation>;\nexport type SetTicketStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketStatusMutation, SetTicketStatusMutationVariables>;\nexport const SetTicketTitleDocument = gql`\n    mutation setTicketTitle($ticketid: String!, $title: String!) {\n  setTicketTitle(ticketid: $ticketid, title: $title)\n}\n    `;\nexport type SetTicketTitleMutationFn = ApolloReactCommon.MutationFunction<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\n\n/**\n * __useSetTicketTitleMutation__\n *\n * To run a mutation, you first call `useSetTicketTitleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTitleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTitleMutation, { data, loading, error }] = useSetTicketTitleMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSetTicketTitleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTitleMutation, SetTicketTitleMutationVariables>(SetTicketTitleDocument, baseOptions);\n      }\nexport type SetTicketTitleMutationHookResult = ReturnType<typeof useSetTicketTitleMutation>;\nexport type SetTicketTitleMutationResult = ApolloReactCommon.MutationResult<SetTicketTitleMutation>;\nexport type SetTicketTitleMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTitleMutation, SetTicketTitleMutationVariables>;\nexport const SetTicketTypeDocument = gql`\n    mutation setTicketType($ticketid: String!, $type: String!) {\n  setTicketType(ticketid: $ticketid, type: $type)\n}\n    `;\nexport type SetTicketTypeMutationFn = ApolloReactCommon.MutationFunction<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\n\n/**\n * __useSetTicketTypeMutation__\n *\n * To run a mutation, you first call `useSetTicketTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetTicketTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setTicketTypeMutation, { data, loading, error }] = useSetTicketTypeMutation({\n *   variables: {\n *      ticketid: // value for 'ticketid'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSetTicketTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetTicketTypeMutation, SetTicketTypeMutationVariables>(SetTicketTypeDocument, baseOptions);\n      }\nexport type SetTicketTypeMutationHookResult = ReturnType<typeof useSetTicketTypeMutation>;\nexport type SetTicketTypeMutationResult = ApolloReactCommon.MutationResult<SetTicketTypeMutation>;\nexport type SetTicketTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<SetTicketTypeMutation, SetTicketTypeMutationVariables>;\nexport const UpdateColumnsDocument = gql`\n    mutation updateColumns($columnIds: String!, $newValues: String!) {\n  updateColumns(columnIds: $columnIds, newValues: $newValues)\n}\n    `;\nexport type UpdateColumnsMutationFn = ApolloReactCommon.MutationFunction<UpdateColumnsMutation, UpdateColumnsMutationVariables>;\n\n/**\n * __useUpdateColumnsMutation__\n *\n * To run a mutation, you first call `useUpdateColumnsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateColumnsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateColumnsMutation, { data, loading, error }] = useUpdateColumnsMutation({\n *   variables: {\n *      columnIds: // value for 'columnIds'\n *      newValues: // value for 'newValues'\n *   },\n * });\n */\nexport function useUpdateColumnsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateColumnsMutation, UpdateColumnsMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateColumnsMutation, UpdateColumnsMutationVariables>(UpdateColumnsDocument, baseOptions);\n      }\nexport type UpdateColumnsMutationHookResult = ReturnType<typeof useUpdateColumnsMutation>;\nexport type UpdateColumnsMutationResult = ApolloReactCommon.MutationResult<UpdateColumnsMutation>;\nexport type UpdateColumnsMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateColumnsMutation, UpdateColumnsMutationVariables>;\nexport const UpdateCommentDocument = gql`\n    mutation updateComment($commentid: Float!, $updatedMessage: String!) {\n  updateComment(commentid: $commentid, updatedMessage: $updatedMessage)\n}\n    `;\nexport type UpdateCommentMutationFn = ApolloReactCommon.MutationFunction<UpdateCommentMutation, UpdateCommentMutationVariables>;\n\n/**\n * __useUpdateCommentMutation__\n *\n * To run a mutation, you first call `useUpdateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCommentMutation, { data, loading, error }] = useUpdateCommentMutation({\n *   variables: {\n *      commentid: // value for 'commentid'\n *      updatedMessage: // value for 'updatedMessage'\n *   },\n * });\n */\nexport function useUpdateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCommentMutation, UpdateCommentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument, baseOptions);\n      }\nexport type UpdateCommentMutationHookResult = ReturnType<typeof useUpdateCommentMutation>;\nexport type UpdateCommentMutationResult = ApolloReactCommon.MutationResult<UpdateCommentMutation>;\nexport type UpdateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCommentMutation, UpdateCommentMutationVariables>;\nexport const UpdateRoleDocument = gql`\n    mutation updateRole($role: String!, $id: String!) {\n  updateRole(role: $role, id: $id)\n}\n    `;\nexport type UpdateRoleMutationFn = ApolloReactCommon.MutationFunction<UpdateRoleMutation, UpdateRoleMutationVariables>;\n\n/**\n * __useUpdateRoleMutation__\n *\n * To run a mutation, you first call `useUpdateRoleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateRoleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateRoleMutation, { data, loading, error }] = useUpdateRoleMutation({\n *   variables: {\n *      role: // value for 'role'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateRoleMutation, UpdateRoleMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateRoleMutation, UpdateRoleMutationVariables>(UpdateRoleDocument, baseOptions);\n      }\nexport type UpdateRoleMutationHookResult = ReturnType<typeof useUpdateRoleMutation>;\nexport type UpdateRoleMutationResult = ApolloReactCommon.MutationResult<UpdateRoleMutation>;\nexport type UpdateRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRoleMutation, UpdateRoleMutationVariables>;\nexport const UserDefQueryDocument = gql`\n    query userDefQuery($query: String!) {\n  userDefQuery(query: $query) {\n    columnId\n    columnParentId\n    columnName\n    columnData\n    parentid\n    propertyChanged\n    oldValue\n    dateChanged\n    title\n    description\n    projectid\n    ticketid\n    tagid\n    tagName\n    tagColor\n    id\n    email\n    password\n    role\n    username\n    firstname\n    lastname\n    ppHref\n    userid\n  }\n}\n    `;\n\n/**\n * __useUserDefQueryQuery__\n *\n * To run a query within a React component, call `useUserDefQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserDefQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserDefQueryQuery({\n *   variables: {\n *      query: // value for 'query'\n *   },\n * });\n */\nexport function useUserDefQueryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserDefQueryQuery, UserDefQueryQueryVariables>) {\n        return ApolloReactHooks.useQuery<UserDefQueryQuery, UserDefQueryQueryVariables>(UserDefQueryDocument, baseOptions);\n      }\nexport function useUserDefQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserDefQueryQuery, UserDefQueryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UserDefQueryQuery, UserDefQueryQueryVariables>(UserDefQueryDocument, baseOptions);\n        }\nexport type UserDefQueryQueryHookResult = ReturnType<typeof useUserDefQueryQuery>;\nexport type UserDefQueryLazyQueryHookResult = ReturnType<typeof useUserDefQueryLazyQuery>;\nexport type UserDefQueryQueryResult = ApolloReactCommon.QueryResult<UserDefQueryQuery, UserDefQueryQueryVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  getUsers {\n    id\n    email\n    role\n    username\n    firstname\n    lastname\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;"],"sourceRoot":""}